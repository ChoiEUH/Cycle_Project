
Cycle_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1d0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  0800e380  0800e380  0000f380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e880  0800e880  000101d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e880  0800e880  0000f880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e888  0800e888  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e888  0800e888  0000f888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e88c  0800e88c  0000f88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800e890  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101d8  2**0
                  CONTENTS
 10 .bss          00004dcc  200001d8  200001d8  000101d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004fa4  20004fa4  000101d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ba2c  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bce  00000000  00000000  0002bc34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018f8  00000000  00000000  0002f808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000138a  00000000  00000000  00031100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000053fc  00000000  00000000  0003248a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c7e0  00000000  00000000  00037886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9d70  00000000  00000000  00054066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ddd6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007cc4  00000000  00000000  0013de1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00145ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e368 	.word	0x0800e368

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	0800e368 	.word	0x0800e368

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b988 	b.w	8000fd0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	468e      	mov	lr, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	4688      	mov	r8, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d962      	bls.n	8000db4 <__udivmoddi4+0xdc>
 8000cee:	fab2 f682 	clz	r6, r2
 8000cf2:	b14e      	cbz	r6, 8000d08 <__udivmoddi4+0x30>
 8000cf4:	f1c6 0320 	rsb	r3, r6, #32
 8000cf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	ea43 0808 	orr.w	r8, r3, r8
 8000d06:	40b4      	lsls	r4, r6
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d14:	0c23      	lsrs	r3, r4, #16
 8000d16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d2c:	f080 80ea 	bcs.w	8000f04 <__udivmoddi4+0x22c>
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f240 80e7 	bls.w	8000f04 <__udivmoddi4+0x22c>
 8000d36:	3902      	subs	r1, #2
 8000d38:	443b      	add	r3, r7
 8000d3a:	1a9a      	subs	r2, r3, r2
 8000d3c:	b2a3      	uxth	r3, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4e:	459c      	cmp	ip, r3
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x8e>
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d58:	f080 80d6 	bcs.w	8000f08 <__udivmoddi4+0x230>
 8000d5c:	459c      	cmp	ip, r3
 8000d5e:	f240 80d3 	bls.w	8000f08 <__udivmoddi4+0x230>
 8000d62:	443b      	add	r3, r7
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6a:	eba3 030c 	sub.w	r3, r3, ip
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40f3      	lsrs	r3, r6
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xb6>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb0>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x14c>
 8000d96:	4573      	cmp	r3, lr
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xc8>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	f200 8105 	bhi.w	8000faa <__udivmoddi4+0x2d2>
 8000da0:	1a84      	subs	r4, r0, r2
 8000da2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	4690      	mov	r8, r2
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d0e5      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000dae:	e9c5 4800 	strd	r4, r8, [r5]
 8000db2:	e7e2      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f000 8090 	beq.w	8000eda <__udivmoddi4+0x202>
 8000dba:	fab2 f682 	clz	r6, r2
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	f040 80a4 	bne.w	8000f0c <__udivmoddi4+0x234>
 8000dc4:	1a8a      	subs	r2, r1, r2
 8000dc6:	0c03      	lsrs	r3, r0, #16
 8000dc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dcc:	b280      	uxth	r0, r0
 8000dce:	b2bc      	uxth	r4, r7
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dde:	fb04 f20c 	mul.w	r2, r4, ip
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x11e>
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x11c>
 8000dee:	429a      	cmp	r2, r3
 8000df0:	f200 80e0 	bhi.w	8000fb4 <__udivmoddi4+0x2dc>
 8000df4:	46c4      	mov	ip, r8
 8000df6:	1a9b      	subs	r3, r3, r2
 8000df8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e04:	fb02 f404 	mul.w	r4, r2, r4
 8000e08:	429c      	cmp	r4, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x144>
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x142>
 8000e14:	429c      	cmp	r4, r3
 8000e16:	f200 80ca 	bhi.w	8000fae <__udivmoddi4+0x2d6>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	1b1b      	subs	r3, r3, r4
 8000e1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa0e f401 	lsl.w	r4, lr, r1
 8000e34:	fa20 f306 	lsr.w	r3, r0, r6
 8000e38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e40:	4323      	orrs	r3, r4
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	fa1f fc87 	uxth.w	ip, r7
 8000e4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e4e:	0c1c      	lsrs	r4, r3, #16
 8000e50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d909      	bls.n	8000e78 <__udivmoddi4+0x1a0>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e6a:	f080 809c 	bcs.w	8000fa6 <__udivmoddi4+0x2ce>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f240 8099 	bls.w	8000fa6 <__udivmoddi4+0x2ce>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	eba4 040e 	sub.w	r4, r4, lr
 8000e7c:	fa1f fe83 	uxth.w	lr, r3
 8000e80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e84:	fb09 4413 	mls	r4, r9, r3, r4
 8000e88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e90:	45a4      	cmp	ip, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1ce>
 8000e94:	193c      	adds	r4, r7, r4
 8000e96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e9a:	f080 8082 	bcs.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d97f      	bls.n	8000fa2 <__udivmoddi4+0x2ca>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eaa:	eba4 040c 	sub.w	r4, r4, ip
 8000eae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000eb2:	4564      	cmp	r4, ip
 8000eb4:	4673      	mov	r3, lr
 8000eb6:	46e1      	mov	r9, ip
 8000eb8:	d362      	bcc.n	8000f80 <__udivmoddi4+0x2a8>
 8000eba:	d05f      	beq.n	8000f7c <__udivmoddi4+0x2a4>
 8000ebc:	b15d      	cbz	r5, 8000ed6 <__udivmoddi4+0x1fe>
 8000ebe:	ebb8 0203 	subs.w	r2, r8, r3
 8000ec2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	fa22 f301 	lsr.w	r3, r2, r1
 8000ece:	431e      	orrs	r6, r3
 8000ed0:	40cc      	lsrs	r4, r1
 8000ed2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	e74f      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000eda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ede:	0c01      	lsrs	r1, r0, #16
 8000ee0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eea:	463b      	mov	r3, r7
 8000eec:	4638      	mov	r0, r7
 8000eee:	463c      	mov	r4, r7
 8000ef0:	46b8      	mov	r8, r7
 8000ef2:	46be      	mov	lr, r7
 8000ef4:	2620      	movs	r6, #32
 8000ef6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000efa:	eba2 0208 	sub.w	r2, r2, r8
 8000efe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f02:	e766      	b.n	8000dd2 <__udivmoddi4+0xfa>
 8000f04:	4601      	mov	r1, r0
 8000f06:	e718      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	e72c      	b.n	8000d66 <__udivmoddi4+0x8e>
 8000f0c:	f1c6 0220 	rsb	r2, r6, #32
 8000f10:	fa2e f302 	lsr.w	r3, lr, r2
 8000f14:	40b7      	lsls	r7, r6
 8000f16:	40b1      	lsls	r1, r6
 8000f18:	fa20 f202 	lsr.w	r2, r0, r2
 8000f1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f20:	430a      	orrs	r2, r1
 8000f22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f26:	b2bc      	uxth	r4, r7
 8000f28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb08 f904 	mul.w	r9, r8, r4
 8000f36:	40b0      	lsls	r0, r6
 8000f38:	4589      	cmp	r9, r1
 8000f3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f3e:	b280      	uxth	r0, r0
 8000f40:	d93e      	bls.n	8000fc0 <__udivmoddi4+0x2e8>
 8000f42:	1879      	adds	r1, r7, r1
 8000f44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f48:	d201      	bcs.n	8000f4e <__udivmoddi4+0x276>
 8000f4a:	4589      	cmp	r9, r1
 8000f4c:	d81f      	bhi.n	8000f8e <__udivmoddi4+0x2b6>
 8000f4e:	eba1 0109 	sub.w	r1, r1, r9
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fb09 f804 	mul.w	r8, r9, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	b292      	uxth	r2, r2
 8000f60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f64:	4542      	cmp	r2, r8
 8000f66:	d229      	bcs.n	8000fbc <__udivmoddi4+0x2e4>
 8000f68:	18ba      	adds	r2, r7, r2
 8000f6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f6e:	d2c4      	bcs.n	8000efa <__udivmoddi4+0x222>
 8000f70:	4542      	cmp	r2, r8
 8000f72:	d2c2      	bcs.n	8000efa <__udivmoddi4+0x222>
 8000f74:	f1a9 0102 	sub.w	r1, r9, #2
 8000f78:	443a      	add	r2, r7
 8000f7a:	e7be      	b.n	8000efa <__udivmoddi4+0x222>
 8000f7c:	45f0      	cmp	r8, lr
 8000f7e:	d29d      	bcs.n	8000ebc <__udivmoddi4+0x1e4>
 8000f80:	ebbe 0302 	subs.w	r3, lr, r2
 8000f84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f88:	3801      	subs	r0, #1
 8000f8a:	46e1      	mov	r9, ip
 8000f8c:	e796      	b.n	8000ebc <__udivmoddi4+0x1e4>
 8000f8e:	eba7 0909 	sub.w	r9, r7, r9
 8000f92:	4449      	add	r1, r9
 8000f94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9c:	fb09 f804 	mul.w	r8, r9, r4
 8000fa0:	e7db      	b.n	8000f5a <__udivmoddi4+0x282>
 8000fa2:	4673      	mov	r3, lr
 8000fa4:	e77f      	b.n	8000ea6 <__udivmoddi4+0x1ce>
 8000fa6:	4650      	mov	r0, sl
 8000fa8:	e766      	b.n	8000e78 <__udivmoddi4+0x1a0>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e6fd      	b.n	8000daa <__udivmoddi4+0xd2>
 8000fae:	443b      	add	r3, r7
 8000fb0:	3a02      	subs	r2, #2
 8000fb2:	e733      	b.n	8000e1c <__udivmoddi4+0x144>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	443b      	add	r3, r7
 8000fba:	e71c      	b.n	8000df6 <__udivmoddi4+0x11e>
 8000fbc:	4649      	mov	r1, r9
 8000fbe:	e79c      	b.n	8000efa <__udivmoddi4+0x222>
 8000fc0:	eba1 0109 	sub.w	r1, r1, r9
 8000fc4:	46c4      	mov	ip, r8
 8000fc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fca:	fb09 f804 	mul.w	r8, r9, r4
 8000fce:	e7c4      	b.n	8000f5a <__udivmoddi4+0x282>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af02      	add	r7, sp, #8
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	f023 030f 	bic.w	r3, r3, #15
 8000fe4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	011b      	lsls	r3, r3, #4
 8000fea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 8000fec:	7bfb      	ldrb	r3, [r7, #15]
 8000fee:	f043 030c 	orr.w	r3, r3, #12
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	f043 0308 	orr.w	r3, r3, #8
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	f043 030c 	orr.w	r3, r3, #12
 8001006:	b2db      	uxtb	r3, r3
 8001008:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 800100a:	7bbb      	ldrb	r3, [r7, #14]
 800100c:	f043 0308 	orr.w	r3, r3, #8
 8001010:	b2db      	uxtb	r3, r3
 8001012:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001014:	f107 0208 	add.w	r2, r7, #8
 8001018:	2364      	movs	r3, #100	@ 0x64
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2304      	movs	r3, #4
 800101e:	214e      	movs	r1, #78	@ 0x4e
 8001020:	4803      	ldr	r0, [pc, #12]	@ (8001030 <lcd_send_cmd+0x5c>)
 8001022:	f001 ff41 	bl	8002ea8 <HAL_I2C_Master_Transmit>
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200003c4 	.word	0x200003c4

08001034 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af02      	add	r7, sp, #8
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f023 030f 	bic.w	r3, r3, #15
 8001044:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0 -> bxxxx1101
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	f043 030d 	orr.w	r3, r3, #13
 8001052:	b2db      	uxtb	r3, r3
 8001054:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0 -> bxxxx1001
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	f043 0309 	orr.w	r3, r3, #9
 800105c:	b2db      	uxtb	r3, r3
 800105e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0 -> bxxxx1101
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	f043 030d 	orr.w	r3, r3, #13
 8001066:	b2db      	uxtb	r3, r3
 8001068:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0 -> bxxxx1001
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	f043 0309 	orr.w	r3, r3, #9
 8001070:	b2db      	uxtb	r3, r3
 8001072:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001074:	f107 0208 	add.w	r2, r7, #8
 8001078:	2364      	movs	r3, #100	@ 0x64
 800107a:	9300      	str	r3, [sp, #0]
 800107c:	2304      	movs	r3, #4
 800107e:	214e      	movs	r1, #78	@ 0x4e
 8001080:	4803      	ldr	r0, [pc, #12]	@ (8001090 <lcd_send_data+0x5c>)
 8001082:	f001 ff11 	bl	8002ea8 <HAL_I2C_Master_Transmit>
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200003c4 	.word	0x200003c4

08001094 <lcd_clear>:

void lcd_clear (void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800109a:	2080      	movs	r0, #128	@ 0x80
 800109c:	f7ff ff9a 	bl	8000fd4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80010a0:	2300      	movs	r3, #0
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	e005      	b.n	80010b2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80010a6:	2020      	movs	r0, #32
 80010a8:	f7ff ffc4 	bl	8001034 <lcd_send_data>
	for (int i=0; i<70; i++)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3301      	adds	r3, #1
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b45      	cmp	r3, #69	@ 0x45
 80010b6:	ddf6      	ble.n	80010a6 <lcd_clear+0x12>
	}
}
 80010b8:	bf00      	nop
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
    switch (row)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d003      	beq.n	80010da <lcd_put_cur+0x18>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d005      	beq.n	80010e4 <lcd_put_cur+0x22>
 80010d8:	e009      	b.n	80010ee <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010e0:	603b      	str	r3, [r7, #0]
            break;
 80010e2:	e004      	b.n	80010ee <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80010ea:	603b      	str	r3, [r7, #0]
            break;
 80010ec:	bf00      	nop
    }

    lcd_send_cmd (col);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff6e 	bl	8000fd4 <lcd_send_cmd>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <lcd_init>:


void lcd_init (void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001104:	2032      	movs	r0, #50	@ 0x32
 8001106:	f001 fa49 	bl	800259c <HAL_Delay>
	lcd_send_cmd (0x30);
 800110a:	2030      	movs	r0, #48	@ 0x30
 800110c:	f7ff ff62 	bl	8000fd4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001110:	2005      	movs	r0, #5
 8001112:	f001 fa43 	bl	800259c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001116:	2030      	movs	r0, #48	@ 0x30
 8001118:	f7ff ff5c 	bl	8000fd4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800111c:	2001      	movs	r0, #1
 800111e:	f001 fa3d 	bl	800259c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001122:	2030      	movs	r0, #48	@ 0x30
 8001124:	f7ff ff56 	bl	8000fd4 <lcd_send_cmd>
	HAL_Delay(10);
 8001128:	200a      	movs	r0, #10
 800112a:	f001 fa37 	bl	800259c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800112e:	2020      	movs	r0, #32
 8001130:	f7ff ff50 	bl	8000fd4 <lcd_send_cmd>
	HAL_Delay(10);
 8001134:	200a      	movs	r0, #10
 8001136:	f001 fa31 	bl	800259c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800113a:	2028      	movs	r0, #40	@ 0x28
 800113c:	f7ff ff4a 	bl	8000fd4 <lcd_send_cmd>
	HAL_Delay(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f001 fa2b 	bl	800259c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001146:	2008      	movs	r0, #8
 8001148:	f7ff ff44 	bl	8000fd4 <lcd_send_cmd>
	HAL_Delay(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f001 fa25 	bl	800259c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001152:	2001      	movs	r0, #1
 8001154:	f7ff ff3e 	bl	8000fd4 <lcd_send_cmd>
	HAL_Delay(1);
 8001158:	2001      	movs	r0, #1
 800115a:	f001 fa1f 	bl	800259c <HAL_Delay>
	HAL_Delay(1);
 800115e:	2001      	movs	r0, #1
 8001160:	f001 fa1c 	bl	800259c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001164:	2006      	movs	r0, #6
 8001166:	f7ff ff35 	bl	8000fd4 <lcd_send_cmd>
	HAL_Delay(1);
 800116a:	2001      	movs	r0, #1
 800116c:	f001 fa16 	bl	800259c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001170:	200c      	movs	r0, #12
 8001172:	f7ff ff2f 	bl	8000fd4 <lcd_send_cmd>
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}

0800117a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001182:	e006      	b.n	8001192 <lcd_send_string+0x18>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	607a      	str	r2, [r7, #4]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff51 	bl	8001034 <lcd_send_data>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f4      	bne.n	8001184 <lcd_send_string+0xa>
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <MPU_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void MPU_Init(){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af04      	add	r7, sp, #16
   uint8_t check, value;


   HAL_I2C_Mem_Read(&hi2c1,MPU_ADDR,WHO_AM_I,1,&check,1,1000);
 80011aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ae:	9302      	str	r3, [sp, #8]
 80011b0:	2301      	movs	r3, #1
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	1dfb      	adds	r3, r7, #7
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	2275      	movs	r2, #117	@ 0x75
 80011bc:	21d0      	movs	r1, #208	@ 0xd0
 80011be:	4823      	ldr	r0, [pc, #140]	@ (800124c <MPU_Init+0xa8>)
 80011c0:	f002 f86a 	bl	8003298 <HAL_I2C_Mem_Read>

   if(check == 104){
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b68      	cmp	r3, #104	@ 0x68
 80011c8:	d13b      	bne.n	8001242 <MPU_Init+0x9e>
	value = 0x00;
 80011ca:	2300      	movs	r3, #0
 80011cc:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1,MPU_ADDR,PWR_MGMT,1,&value,1,1000);
 80011ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	2301      	movs	r3, #1
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	1dbb      	adds	r3, r7, #6
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2301      	movs	r3, #1
 80011de:	226b      	movs	r2, #107	@ 0x6b
 80011e0:	21d0      	movs	r1, #208	@ 0xd0
 80011e2:	481a      	ldr	r0, [pc, #104]	@ (800124c <MPU_Init+0xa8>)
 80011e4:	f001 ff5e 	bl	80030a4 <HAL_I2C_Mem_Write>

	value = 0x07;
 80011e8:	2307      	movs	r3, #7
 80011ea:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1,MPU_ADDR,SMPLRT_DIV,1,&value,1,1000);
 80011ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	2301      	movs	r3, #1
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	1dbb      	adds	r3, r7, #6
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	2301      	movs	r3, #1
 80011fc:	2219      	movs	r2, #25
 80011fe:	21d0      	movs	r1, #208	@ 0xd0
 8001200:	4812      	ldr	r0, [pc, #72]	@ (800124c <MPU_Init+0xa8>)
 8001202:	f001 ff4f 	bl	80030a4 <HAL_I2C_Mem_Write>

	value = 0x00;
 8001206:	2300      	movs	r3, #0
 8001208:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1,MPU_ADDR,ACCEL_CONFIG,1,&value,1,1000);
 800120a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120e:	9302      	str	r3, [sp, #8]
 8001210:	2301      	movs	r3, #1
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	1dbb      	adds	r3, r7, #6
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	2301      	movs	r3, #1
 800121a:	221c      	movs	r2, #28
 800121c:	21d0      	movs	r1, #208	@ 0xd0
 800121e:	480b      	ldr	r0, [pc, #44]	@ (800124c <MPU_Init+0xa8>)
 8001220:	f001 ff40 	bl	80030a4 <HAL_I2C_Mem_Write>

    value = 0x00;
 8001224:	2300      	movs	r3, #0
 8001226:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1,MPU_ADDR,GYRO_CONFIG,1,&value,1,1000);
 8001228:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122c:	9302      	str	r3, [sp, #8]
 800122e:	2301      	movs	r3, #1
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	1dbb      	adds	r3, r7, #6
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2301      	movs	r3, #1
 8001238:	221b      	movs	r2, #27
 800123a:	21d0      	movs	r1, #208	@ 0xd0
 800123c:	4803      	ldr	r0, [pc, #12]	@ (800124c <MPU_Init+0xa8>)
 800123e:	f001 ff31 	bl	80030a4 <HAL_I2C_Mem_Write>

   }
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000370 	.word	0x20000370

08001250 <GYRO_Read>:

void GYRO_Read(Sensor *g){
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af02      	add	r7, sp, #8
 8001256:	6078      	str	r0, [r7, #4]
	M = GYRO_MODE;
 8001258:	4b08      	ldr	r3, [pc, #32]	@ (800127c <GYRO_Read+0x2c>)
 800125a:	2202      	movs	r2, #2
 800125c:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Mem_Read_IT(&hi2c1,MPU_ADDR,ACCEL_OUT_H,1,g->gyrodata,6);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	332c      	adds	r3, #44	@ 0x2c
 8001262:	2206      	movs	r2, #6
 8001264:	9201      	str	r2, [sp, #4]
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	223b      	movs	r2, #59	@ 0x3b
 800126c:	21d0      	movs	r1, #208	@ 0xd0
 800126e:	4804      	ldr	r0, [pc, #16]	@ (8001280 <GYRO_Read+0x30>)
 8001270:	f002 fa44 	bl	80036fc <HAL_I2C_Mem_Read_IT>
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200001f4 	.word	0x200001f4
 8001280:	20000370 	.word	0x20000370

08001284 <ACCEL_Read>:

void ACCEL_Read(Sensor *g){
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af02      	add	r7, sp, #8
 800128a:	6078      	str	r0, [r7, #4]
	M = ACCEL_MODE;
 800128c:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <ACCEL_Read+0x2c>)
 800128e:	2201      	movs	r2, #1
 8001290:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Mem_Read_IT(&hi2c1,MPU_ADDR,ACCEL_OUT_H,1,g->gyrodata,6);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	332c      	adds	r3, #44	@ 0x2c
 8001296:	2206      	movs	r2, #6
 8001298:	9201      	str	r2, [sp, #4]
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2301      	movs	r3, #1
 800129e:	223b      	movs	r2, #59	@ 0x3b
 80012a0:	21d0      	movs	r1, #208	@ 0xd0
 80012a2:	4804      	ldr	r0, [pc, #16]	@ (80012b4 <ACCEL_Read+0x30>)
 80012a4:	f002 fa2a 	bl	80036fc <HAL_I2C_Mem_Read_IT>
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	200001f4 	.word	0x200001f4
 80012b4:	20000370 	.word	0x20000370

080012b8 <GYRO_Process>:

void GYRO_Process(Sensor *g){
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	 g->gx = (int16_t)(g->gyrodata[0] << 8 )|(g->gyrodata[1]);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	4313      	orrs	r3, r2
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	80da      	strh	r2, [r3, #6]
	 g->gy = (int16_t)(g->gyrodata[2] << 8 )|(g->gyrodata[3]);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	811a      	strh	r2, [r3, #8]
	 g->gz = (int16_t)(g->gyrodata[4] << 8 )|(g->gyrodata[5]);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80012fe:	b21b      	sxth	r3, r3
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	b21a      	sxth	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b21a      	sxth	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	815a      	strh	r2, [r3, #10]

	 g->Rgx = (float)g->gx/131.0;;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800131a:	ee07 3a90 	vmov	s15, r3
 800131e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001322:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001374 <GYRO_Process+0xbc>
 8001326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	edc3 7a03 	vstr	s15, [r3, #12]
	 g->Rgy = (float)g->gy/131.0;;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133e:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001374 <GYRO_Process+0xbc>
 8001342:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a04 	vstr	s15, [r3, #16]
	 g->Rgz = (float)g->gz/131.0;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001352:	ee07 3a90 	vmov	s15, r3
 8001356:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800135a:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001374 <GYRO_Process+0xbc>
 800135e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	edc3 7a05 	vstr	s15, [r3, #20]


}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	43030000 	.word	0x43030000

08001378 <ACCEL_Process>:

void ACCEL_Process(Sensor *g){
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	 g->ax = (int16_t)(g->gyrodata[0] << 8 )|(g->gyrodata[1]);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001386:	b21b      	sxth	r3, r3
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	b21a      	sxth	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001392:	b21b      	sxth	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b21a      	sxth	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	801a      	strh	r2, [r3, #0]
	 g->ay = (int16_t)(g->gyrodata[2] << 8 )|(g->gyrodata[3]);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	b21a      	sxth	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b21a      	sxth	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	805a      	strh	r2, [r3, #2]
	 g->az = (int16_t)(g->gyrodata[4] << 8 )|(g->gyrodata[5]);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013be:	b21b      	sxth	r3, r3
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	809a      	strh	r2, [r3, #4]

	 g->Rax = (float)g->ax/16384.0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e2:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8001530 <ACCEL_Process+0x1b8>
 80013e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	edc3 7a06 	vstr	s15, [r3, #24]
	 g->Ray = (float)g->ay/16384.0;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013f6:	ee07 3a90 	vmov	s15, r3
 80013fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013fe:	eddf 6a4c 	vldr	s13, [pc, #304]	@ 8001530 <ACCEL_Process+0x1b8>
 8001402:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edc3 7a07 	vstr	s15, [r3, #28]
	 g->Raz = (float)g->az/16384.0;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800141a:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8001530 <ACCEL_Process+0x1b8>
 800141e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	edc3 7a08 	vstr	s15, [r3, #32]

	 g->roll = atan2(g->ay, g->az) * 180.0f / M_PI;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f888 	bl	8000544 <__aeabi_i2d>
 8001434:	4604      	mov	r4, r0
 8001436:	460d      	mov	r5, r1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f880 	bl	8000544 <__aeabi_i2d>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	ec43 2b11 	vmov	d1, r2, r3
 800144c:	ec45 4b10 	vmov	d0, r4, r5
 8001450:	f00c fc1c 	bl	800dc8c <atan2>
 8001454:	ec51 0b10 	vmov	r0, r1, d0
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	4b35      	ldr	r3, [pc, #212]	@ (8001534 <ACCEL_Process+0x1bc>)
 800145e:	f7ff f8db 	bl	8000618 <__aeabi_dmul>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	a32f      	add	r3, pc, #188	@ (adr r3, 8001528 <ACCEL_Process+0x1b0>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f9fc 	bl	800086c <__aeabi_ddiv>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	f7ff fbc4 	bl	8000c08 <__aeabi_d2f>
 8001480:	4602      	mov	r2, r0
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24
	 g->pitch = atan2(-g->ax, sqrt(g->ay*g->ay + g->az*g->az)) * 180.0f / M_PI;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148c:	425b      	negs	r3, r3
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f858 	bl	8000544 <__aeabi_i2d>
 8001494:	4604      	mov	r4, r0
 8001496:	460d      	mov	r5, r1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800149e:	461a      	mov	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014a6:	fb03 f202 	mul.w	r2, r3, r2
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014b0:	4619      	mov	r1, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014b8:	fb01 f303 	mul.w	r3, r1, r3
 80014bc:	4413      	add	r3, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff f840 	bl	8000544 <__aeabi_i2d>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	ec43 2b10 	vmov	d0, r2, r3
 80014cc:	f00c fbe0 	bl	800dc90 <sqrt>
 80014d0:	eeb0 7a40 	vmov.f32	s14, s0
 80014d4:	eef0 7a60 	vmov.f32	s15, s1
 80014d8:	eeb0 1a47 	vmov.f32	s2, s14
 80014dc:	eef0 1a67 	vmov.f32	s3, s15
 80014e0:	ec45 4b10 	vmov	d0, r4, r5
 80014e4:	f00c fbd2 	bl	800dc8c <atan2>
 80014e8:	ec51 0b10 	vmov	r0, r1, d0
 80014ec:	f04f 0200 	mov.w	r2, #0
 80014f0:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <ACCEL_Process+0x1bc>)
 80014f2:	f7ff f891 	bl	8000618 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	a30a      	add	r3, pc, #40	@ (adr r3, 8001528 <ACCEL_Process+0x1b0>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f7ff f9b2 	bl	800086c <__aeabi_ddiv>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff fb7a 	bl	8000c08 <__aeabi_d2f>
 8001514:	4602      	mov	r2, r0
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	629a      	str	r2, [r3, #40]	@ 0x28

}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bdb0      	pop	{r4, r5, r7, pc}
 8001522:	bf00      	nop
 8001524:	f3af 8000 	nop.w
 8001528:	54442d18 	.word	0x54442d18
 800152c:	400921fb 	.word	0x400921fb
 8001530:	46800000 	.word	0x46800000
 8001534:	40668000 	.word	0x40668000

08001538 <delay_us>:

void delay_us(uint16_t us){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	80fb      	strh	r3, [r7, #6]
	htim1.Instance-> CNT = 0;
 8001542:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <delay_us+0x30>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2200      	movs	r2, #0
 8001548:	625a      	str	r2, [r3, #36]	@ 0x24
	while(htim1.Instance->CNT < us){}
 800154a:	bf00      	nop
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <delay_us+0x30>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	429a      	cmp	r2, r3
 8001556:	d3f9      	bcc.n	800154c <delay_us+0x14>
}
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000418 	.word	0x20000418

0800156c <HAL_I2C_MemRxCpltCallback>:


void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0a      	ldr	r2, [pc, #40]	@ (80015a4 <HAL_I2C_MemRxCpltCallback+0x38>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d10d      	bne.n	800159a <HAL_I2C_MemRxCpltCallback+0x2e>
	 if(M == GYRO_MODE){
 800157e:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <HAL_I2C_MemRxCpltCallback+0x3c>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d102      	bne.n	800158c <HAL_I2C_MemRxCpltCallback+0x20>
	    	GYRO_Process(&s);
 8001586:	4809      	ldr	r0, [pc, #36]	@ (80015ac <HAL_I2C_MemRxCpltCallback+0x40>)
 8001588:	f7ff fe96 	bl	80012b8 <GYRO_Process>
	     }
	     if(M == ACCEL_MODE){
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <HAL_I2C_MemRxCpltCallback+0x3c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d102      	bne.n	800159a <HAL_I2C_MemRxCpltCallback+0x2e>
	    	 ACCEL_Process(&s);
 8001594:	4805      	ldr	r0, [pc, #20]	@ (80015ac <HAL_I2C_MemRxCpltCallback+0x40>)
 8001596:	f7ff feef 	bl	8001378 <ACCEL_Process>
	     }
	}
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40005400 	.word	0x40005400
 80015a8:	200001f4 	.word	0x200001f4
 80015ac:	20000208 	.word	0x20000208

080015b0 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4){
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	7f1b      	ldrb	r3, [r3, #28]
 80015bc:	2b08      	cmp	r3, #8
 80015be:	f040 8083 	bne.w	80016c8 <HAL_TIM_IC_CaptureCallback+0x118>
    if(u.firstcapture == 0)
 80015c2:	4b45      	ldr	r3, [pc, #276]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80015c4:	7b1b      	ldrb	r3, [r3, #12]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d11a      	bne.n	8001600 <HAL_TIM_IC_CaptureCallback+0x50>
    {
    	u.value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80015ca:	210c      	movs	r1, #12
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f005 fd15 	bl	8006ffc <HAL_TIM_ReadCapturedValue>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4a40      	ldr	r2, [pc, #256]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80015d6:	6013      	str	r3, [r2, #0]

    	u.firstcapture = 1;
 80015d8:	4b3f      	ldr	r3, [pc, #252]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80015da:	2201      	movs	r2, #1
 80015dc:	731a      	strb	r2, [r3, #12]

    	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,TIM_INPUTCHANNELPOLARITY_FALLING);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	6a1a      	ldr	r2, [r3, #32]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80015ec:	621a      	str	r2, [r3, #32]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6a1a      	ldr	r2, [r3, #32]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80015fc:	621a      	str	r2, [r3, #32]

      __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC4);

    }
    }
	}
 80015fe:	e063      	b.n	80016c8 <HAL_TIM_IC_CaptureCallback+0x118>
    else if(u.firstcapture == 1)
 8001600:	4b35      	ldr	r3, [pc, #212]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001602:	7b1b      	ldrb	r3, [r3, #12]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d15f      	bne.n	80016c8 <HAL_TIM_IC_CaptureCallback+0x118>
        u.value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001608:	210c      	movs	r1, #12
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f005 fcf6 	bl	8006ffc <HAL_TIM_ReadCapturedValue>
 8001610:	4603      	mov	r3, r0
 8001612:	4a31      	ldr	r2, [pc, #196]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001614:	6053      	str	r3, [r2, #4]
        __HAL_TIM_SET_COUNTER(htim,0);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2200      	movs	r2, #0
 800161c:	625a      	str	r2, [r3, #36]	@ 0x24
     if(u.value2 > u.value1)
 800161e:	4b2e      	ldr	r3, [pc, #184]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	4b2d      	ldr	r3, [pc, #180]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d907      	bls.n	800163a <HAL_TIM_IC_CaptureCallback+0x8a>
    	 u.diffrance = u.value2 - u.value1;
 800162a:	4b2b      	ldr	r3, [pc, #172]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	4b2a      	ldr	r3, [pc, #168]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	4a28      	ldr	r2, [pc, #160]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001636:	6093      	str	r3, [r2, #8]
 8001638:	e00f      	b.n	800165a <HAL_TIM_IC_CaptureCallback+0xaa>
     else if(u.value1 > u.value2)
 800163a:	4b27      	ldr	r3, [pc, #156]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	4b26      	ldr	r3, [pc, #152]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	d909      	bls.n	800165a <HAL_TIM_IC_CaptureCallback+0xaa>
    	 u.diffrance = (0xffff - u.value1) + u.value2;
 8001646:	4b24      	ldr	r3, [pc, #144]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	4b23      	ldr	r3, [pc, #140]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001654:	33ff      	adds	r3, #255	@ 0xff
 8001656:	4a20      	ldr	r2, [pc, #128]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001658:	6093      	str	r3, [r2, #8]
      u.distance = u.diffrance * .034/2;
 800165a:	4b1f      	ldr	r3, [pc, #124]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe ff60 	bl	8000524 <__aeabi_ui2d>
 8001664:	a31a      	add	r3, pc, #104	@ (adr r3, 80016d0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	f7fe ffd5 	bl	8000618 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800167e:	f7ff f8f5 	bl	800086c <__aeabi_ddiv>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fa9d 	bl	8000bc8 <__aeabi_d2uiz>
 800168e:	4603      	mov	r3, r0
 8001690:	b2da      	uxtb	r2, r3
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001694:	735a      	strb	r2, [r3, #13]
      u.firstcapture = 0;
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001698:	2200      	movs	r2, #0
 800169a:	731a      	strb	r2, [r3, #12]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6a1a      	ldr	r2, [r3, #32]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80016aa:	621a      	str	r2, [r3, #32]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6a12      	ldr	r2, [r2, #32]
 80016b6:	621a      	str	r2, [r3, #32]
      __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC4);
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	4b07      	ldr	r3, [pc, #28]	@ (80016dc <HAL_TIM_IC_CaptureCallback+0x12c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0210 	bic.w	r2, r2, #16
 80016c6:	60da      	str	r2, [r3, #12]
	}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	b020c49c 	.word	0xb020c49c
 80016d4:	3fa16872 	.word	0x3fa16872
 80016d8:	200001f8 	.word	0x200001f8
 80016dc:	20000460 	.word	0x20000460

080016e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e4:	f000 fee8 	bl	80024b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e8:	f000 f84e 	bl	8001788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ec:	f000 fa76 	bl	8001bdc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80016f0:	f000 fa4a 	bl	8001b88 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80016f4:	f000 f8b8 	bl	8001868 <MX_I2C1_Init>
  MX_TIM1_Init();
 80016f8:	f000 f936 	bl	8001968 <MX_TIM1_Init>
  MX_TIM4_Init();
 80016fc:	f000 f9d4 	bl	8001aa8 <MX_TIM4_Init>
  MX_I2C2_Init();
 8001700:	f000 f8f2 	bl	80018e8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CR1 = 0x0001;
 8001704:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <main+0x78>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800170a:	f006 fe45 	bl	8008398 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of dataQueue01 */
  dataQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &dataQueue01_attributes);
 800170e:	4a13      	ldr	r2, [pc, #76]	@ (800175c <main+0x7c>)
 8001710:	2102      	movs	r1, #2
 8001712:	2010      	movs	r0, #16
 8001714:	f006 ff37 	bl	8008586 <osMessageQueueNew>
 8001718:	4603      	mov	r3, r0
 800171a:	4a11      	ldr	r2, [pc, #68]	@ (8001760 <main+0x80>)
 800171c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of AccelTask_Init */
  AccelTask_InitHandle = osThreadNew(AccelTask, NULL, &AccelTask_Init_attributes);
 800171e:	4a11      	ldr	r2, [pc, #68]	@ (8001764 <main+0x84>)
 8001720:	2100      	movs	r1, #0
 8001722:	4811      	ldr	r0, [pc, #68]	@ (8001768 <main+0x88>)
 8001724:	f006 fe82 	bl	800842c <osThreadNew>
 8001728:	4603      	mov	r3, r0
 800172a:	4a10      	ldr	r2, [pc, #64]	@ (800176c <main+0x8c>)
 800172c:	6013      	str	r3, [r2, #0]

  /* creation of ultraTask_Init */
  ultraTask_InitHandle = osThreadNew(UltrasonicTask, NULL, &ultraTask_Init_attributes);
 800172e:	4a10      	ldr	r2, [pc, #64]	@ (8001770 <main+0x90>)
 8001730:	2100      	movs	r1, #0
 8001732:	4810      	ldr	r0, [pc, #64]	@ (8001774 <main+0x94>)
 8001734:	f006 fe7a 	bl	800842c <osThreadNew>
 8001738:	4603      	mov	r3, r0
 800173a:	4a0f      	ldr	r2, [pc, #60]	@ (8001778 <main+0x98>)
 800173c:	6013      	str	r3, [r2, #0]

  /* creation of LCDTask_Init */
  LCDTask_InitHandle = osThreadNew(LCDTask, NULL, &LCDTask_Init_attributes);
 800173e:	4a0f      	ldr	r2, [pc, #60]	@ (800177c <main+0x9c>)
 8001740:	2100      	movs	r1, #0
 8001742:	480f      	ldr	r0, [pc, #60]	@ (8001780 <main+0xa0>)
 8001744:	f006 fe72 	bl	800842c <osThreadNew>
 8001748:	4603      	mov	r3, r0
 800174a:	4a0e      	ldr	r2, [pc, #56]	@ (8001784 <main+0xa4>)
 800174c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800174e:	f006 fe47 	bl	80083e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001752:	bf00      	nop
 8001754:	e7fd      	b.n	8001752 <main+0x72>
 8001756:	bf00      	nop
 8001758:	40010000 	.word	0x40010000
 800175c:	0800e454 	.word	0x0800e454
 8001760:	200004fc 	.word	0x200004fc
 8001764:	0800e3e8 	.word	0x0800e3e8
 8001768:	08001d9d 	.word	0x08001d9d
 800176c:	200004f0 	.word	0x200004f0
 8001770:	0800e40c 	.word	0x0800e40c
 8001774:	08001e35 	.word	0x08001e35
 8001778:	200004f4 	.word	0x200004f4
 800177c:	0800e430 	.word	0x0800e430
 8001780:	08001ec9 	.word	0x08001ec9
 8001784:	200004f8 	.word	0x200004f8

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	@ 0x50
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	2230      	movs	r2, #48	@ 0x30
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f00a f9ab 	bl	800baf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001860 <SystemClock_Config+0xd8>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001860 <SystemClock_Config+0xd8>)
 80017b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80017bc:	4b28      	ldr	r3, [pc, #160]	@ (8001860 <SystemClock_Config+0xd8>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	4b25      	ldr	r3, [pc, #148]	@ (8001864 <SystemClock_Config+0xdc>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a24      	ldr	r2, [pc, #144]	@ (8001864 <SystemClock_Config+0xdc>)
 80017d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <SystemClock_Config+0xdc>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e4:	2301      	movs	r3, #1
 80017e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017e8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80017ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ee:	2302      	movs	r3, #2
 80017f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017f8:	2304      	movs	r3, #4
 80017fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80017fc:	23b4      	movs	r3, #180	@ 0xb4
 80017fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001800:	2302      	movs	r3, #2
 8001802:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001804:	2307      	movs	r3, #7
 8001806:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001808:	f107 0320 	add.w	r3, r7, #32
 800180c:	4618      	mov	r0, r3
 800180e:	f004 fa1d 	bl	8005c4c <HAL_RCC_OscConfig>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001818:	f000 fb5e 	bl	8001ed8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800181c:	f004 f9c6 	bl	8005bac <HAL_PWREx_EnableOverDrive>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001826:	f000 fb57 	bl	8001ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182a:	230f      	movs	r3, #15
 800182c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800182e:	2302      	movs	r3, #2
 8001830:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001836:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800183a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800183c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001840:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	2105      	movs	r1, #5
 8001848:	4618      	mov	r0, r3
 800184a:	f004 fc77 	bl	800613c <HAL_RCC_ClockConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001854:	f000 fb40 	bl	8001ed8 <Error_Handler>
  }
}
 8001858:	bf00      	nop
 800185a:	3750      	adds	r7, #80	@ 0x50
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800
 8001864:	40007000 	.word	0x40007000

08001868 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800186c:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <MX_I2C1_Init+0x74>)
 800186e:	4a1c      	ldr	r2, [pc, #112]	@ (80018e0 <MX_I2C1_Init+0x78>)
 8001870:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001872:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <MX_I2C1_Init+0x74>)
 8001874:	4a1b      	ldr	r2, [pc, #108]	@ (80018e4 <MX_I2C1_Init+0x7c>)
 8001876:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001878:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <MX_I2C1_Init+0x74>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800187e:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <MX_I2C1_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001884:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <MX_I2C1_Init+0x74>)
 8001886:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800188a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800188c:	4b13      	ldr	r3, [pc, #76]	@ (80018dc <MX_I2C1_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001892:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <MX_I2C1_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001898:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <MX_I2C1_Init+0x74>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800189e:	4b0f      	ldr	r3, [pc, #60]	@ (80018dc <MX_I2C1_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018a4:	480d      	ldr	r0, [pc, #52]	@ (80018dc <MX_I2C1_Init+0x74>)
 80018a6:	f001 f9a5 	bl	8002bf4 <HAL_I2C_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018b0:	f000 fb12 	bl	8001ed8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018b4:	2100      	movs	r1, #0
 80018b6:	4809      	ldr	r0, [pc, #36]	@ (80018dc <MX_I2C1_Init+0x74>)
 80018b8:	f004 f8fd 	bl	8005ab6 <HAL_I2CEx_ConfigAnalogFilter>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80018c2:	f000 fb09 	bl	8001ed8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018c6:	2100      	movs	r1, #0
 80018c8:	4804      	ldr	r0, [pc, #16]	@ (80018dc <MX_I2C1_Init+0x74>)
 80018ca:	f004 f930 	bl	8005b2e <HAL_I2CEx_ConfigDigitalFilter>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80018d4:	f000 fb00 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000370 	.word	0x20000370
 80018e0:	40005400 	.word	0x40005400
 80018e4:	000186a0 	.word	0x000186a0

080018e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <MX_I2C2_Init+0x74>)
 80018ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001960 <MX_I2C2_Init+0x78>)
 80018f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	@ (800195c <MX_I2C2_Init+0x74>)
 80018f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001964 <MX_I2C2_Init+0x7c>)
 80018f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018f8:	4b18      	ldr	r3, [pc, #96]	@ (800195c <MX_I2C2_Init+0x74>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018fe:	4b17      	ldr	r3, [pc, #92]	@ (800195c <MX_I2C2_Init+0x74>)
 8001900:	2200      	movs	r2, #0
 8001902:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001904:	4b15      	ldr	r3, [pc, #84]	@ (800195c <MX_I2C2_Init+0x74>)
 8001906:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800190a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800190c:	4b13      	ldr	r3, [pc, #76]	@ (800195c <MX_I2C2_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001912:	4b12      	ldr	r3, [pc, #72]	@ (800195c <MX_I2C2_Init+0x74>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001918:	4b10      	ldr	r3, [pc, #64]	@ (800195c <MX_I2C2_Init+0x74>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800191e:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <MX_I2C2_Init+0x74>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001924:	480d      	ldr	r0, [pc, #52]	@ (800195c <MX_I2C2_Init+0x74>)
 8001926:	f001 f965 	bl	8002bf4 <HAL_I2C_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001930:	f000 fad2 	bl	8001ed8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001934:	2100      	movs	r1, #0
 8001936:	4809      	ldr	r0, [pc, #36]	@ (800195c <MX_I2C2_Init+0x74>)
 8001938:	f004 f8bd 	bl	8005ab6 <HAL_I2CEx_ConfigAnalogFilter>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001942:	f000 fac9 	bl	8001ed8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001946:	2100      	movs	r1, #0
 8001948:	4804      	ldr	r0, [pc, #16]	@ (800195c <MX_I2C2_Init+0x74>)
 800194a:	f004 f8f0 	bl	8005b2e <HAL_I2CEx_ConfigDigitalFilter>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001954:	f000 fac0 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200003c4 	.word	0x200003c4
 8001960:	40005800 	.word	0x40005800
 8001964:	000186a0 	.word	0x000186a0

08001968 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b096      	sub	sp, #88	@ 0x58
 800196c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
 8001994:	611a      	str	r2, [r3, #16]
 8001996:	615a      	str	r2, [r3, #20]
 8001998:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2220      	movs	r2, #32
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f00a f8a6 	bl	800baf2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019a6:	4b3e      	ldr	r3, [pc, #248]	@ (8001aa0 <MX_TIM1_Init+0x138>)
 80019a8:	4a3e      	ldr	r2, [pc, #248]	@ (8001aa4 <MX_TIM1_Init+0x13c>)
 80019aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 80019ac:	4b3c      	ldr	r3, [pc, #240]	@ (8001aa0 <MX_TIM1_Init+0x138>)
 80019ae:	22b3      	movs	r2, #179	@ 0xb3
 80019b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b2:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa0 <MX_TIM1_Init+0x138>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 80019b8:	4b39      	ldr	r3, [pc, #228]	@ (8001aa0 <MX_TIM1_Init+0x138>)
 80019ba:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80019be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c0:	4b37      	ldr	r3, [pc, #220]	@ (8001aa0 <MX_TIM1_Init+0x138>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019c6:	4b36      	ldr	r3, [pc, #216]	@ (8001aa0 <MX_TIM1_Init+0x138>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019cc:	4b34      	ldr	r3, [pc, #208]	@ (8001aa0 <MX_TIM1_Init+0x138>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019d2:	4833      	ldr	r0, [pc, #204]	@ (8001aa0 <MX_TIM1_Init+0x138>)
 80019d4:	f004 fdd2 	bl	800657c <HAL_TIM_Base_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80019de:	f000 fa7b 	bl	8001ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80019ec:	4619      	mov	r1, r3
 80019ee:	482c      	ldr	r0, [pc, #176]	@ (8001aa0 <MX_TIM1_Init+0x138>)
 80019f0:	f005 fa3c 	bl	8006e6c <HAL_TIM_ConfigClockSource>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80019fa:	f000 fa6d 	bl	8001ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019fe:	4828      	ldr	r0, [pc, #160]	@ (8001aa0 <MX_TIM1_Init+0x138>)
 8001a00:	f004 fe0b 	bl	800661a <HAL_TIM_PWM_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001a0a:	f000 fa65 	bl	8001ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a16:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4820      	ldr	r0, [pc, #128]	@ (8001aa0 <MX_TIM1_Init+0x138>)
 8001a1e:	f005 ff99 	bl	8007954 <HAL_TIMEx_MasterConfigSynchronization>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a28:	f000 fa56 	bl	8001ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2c:	2360      	movs	r3, #96	@ 0x60
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a40:	2300      	movs	r3, #0
 8001a42:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a44:	2300      	movs	r3, #0
 8001a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4813      	ldr	r0, [pc, #76]	@ (8001aa0 <MX_TIM1_Init+0x138>)
 8001a52:	f005 f949 	bl	8006ce8 <HAL_TIM_PWM_ConfigChannel>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001a5c:	f000 fa3c 	bl	8001ed8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	4619      	mov	r1, r3
 8001a82:	4807      	ldr	r0, [pc, #28]	@ (8001aa0 <MX_TIM1_Init+0x138>)
 8001a84:	f005 ffe2 	bl	8007a4c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001a8e:	f000 fa23 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a92:	4803      	ldr	r0, [pc, #12]	@ (8001aa0 <MX_TIM1_Init+0x138>)
 8001a94:	f000 fb46 	bl	8002124 <HAL_TIM_MspPostInit>

}
 8001a98:	bf00      	nop
 8001a9a:	3758      	adds	r7, #88	@ 0x58
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000418 	.word	0x20000418
 8001aa4:	40010000 	.word	0x40010000

08001aa8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	@ 0x28
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aae:	f107 0318 	add.w	r3, r7, #24
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b80 <MX_TIM4_Init+0xd8>)
 8001ad4:	4a2b      	ldr	r2, [pc, #172]	@ (8001b84 <MX_TIM4_Init+0xdc>)
 8001ad6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 180-1;
 8001ad8:	4b29      	ldr	r3, [pc, #164]	@ (8001b80 <MX_TIM4_Init+0xd8>)
 8001ada:	22b3      	movs	r2, #179	@ 0xb3
 8001adc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	4b28      	ldr	r3, [pc, #160]	@ (8001b80 <MX_TIM4_Init+0xd8>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 8001ae4:	4b26      	ldr	r3, [pc, #152]	@ (8001b80 <MX_TIM4_Init+0xd8>)
 8001ae6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001aea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aec:	4b24      	ldr	r3, [pc, #144]	@ (8001b80 <MX_TIM4_Init+0xd8>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af2:	4b23      	ldr	r3, [pc, #140]	@ (8001b80 <MX_TIM4_Init+0xd8>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001af8:	4821      	ldr	r0, [pc, #132]	@ (8001b80 <MX_TIM4_Init+0xd8>)
 8001afa:	f004 fd3f 	bl	800657c <HAL_TIM_Base_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001b04:	f000 f9e8 	bl	8001ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b0c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b0e:	f107 0318 	add.w	r3, r7, #24
 8001b12:	4619      	mov	r1, r3
 8001b14:	481a      	ldr	r0, [pc, #104]	@ (8001b80 <MX_TIM4_Init+0xd8>)
 8001b16:	f005 f9a9 	bl	8006e6c <HAL_TIM_ConfigClockSource>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001b20:	f000 f9da 	bl	8001ed8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001b24:	4816      	ldr	r0, [pc, #88]	@ (8001b80 <MX_TIM4_Init+0xd8>)
 8001b26:	f004 fdd1 	bl	80066cc <HAL_TIM_IC_Init>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b30:	f000 f9d2 	bl	8001ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b3c:	f107 0310 	add.w	r3, r7, #16
 8001b40:	4619      	mov	r1, r3
 8001b42:	480f      	ldr	r0, [pc, #60]	@ (8001b80 <MX_TIM4_Init+0xd8>)
 8001b44:	f005 ff06 	bl	8007954 <HAL_TIMEx_MasterConfigSynchronization>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001b4e:	f000 f9c3 	bl	8001ed8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001b52:	2300      	movs	r3, #0
 8001b54:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001b56:	2301      	movs	r3, #1
 8001b58:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001b62:	463b      	mov	r3, r7
 8001b64:	220c      	movs	r2, #12
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	@ (8001b80 <MX_TIM4_Init+0xd8>)
 8001b6a:	f005 f821 	bl	8006bb0 <HAL_TIM_IC_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001b74:	f000 f9b0 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	3728      	adds	r7, #40	@ 0x28
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000460 	.word	0x20000460
 8001b84:	40000800 	.word	0x40000800

08001b88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	@ (8001bd8 <MX_USART3_UART_Init+0x50>)
 8001b90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001b94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bac:	4b09      	ldr	r3, [pc, #36]	@ (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001bae:	220c      	movs	r2, #12
 8001bb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb2:	4b08      	ldr	r3, [pc, #32]	@ (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bbe:	4805      	ldr	r0, [pc, #20]	@ (8001bd4 <MX_USART3_UART_Init+0x4c>)
 8001bc0:	f005 ffaa 	bl	8007b18 <HAL_UART_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001bca:	f000 f985 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	200004a8 	.word	0x200004a8
 8001bd8:	40004800 	.word	0x40004800

08001bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08e      	sub	sp, #56	@ 0x38
 8001be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
 8001bf0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
 8001bf6:	4b64      	ldr	r3, [pc, #400]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4a63      	ldr	r2, [pc, #396]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c02:	4b61      	ldr	r3, [pc, #388]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	623b      	str	r3, [r7, #32]
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	4b5d      	ldr	r3, [pc, #372]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	4a5c      	ldr	r2, [pc, #368]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c18:	f043 0320 	orr.w	r3, r3, #32
 8001c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1e:	4b5a      	ldr	r3, [pc, #360]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	f003 0320 	and.w	r3, r3, #32
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	4b56      	ldr	r3, [pc, #344]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	4a55      	ldr	r2, [pc, #340]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3a:	4b53      	ldr	r3, [pc, #332]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	4b4f      	ldr	r3, [pc, #316]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	4a4e      	ldr	r2, [pc, #312]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c56:	4b4c      	ldr	r3, [pc, #304]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	4b48      	ldr	r3, [pc, #288]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	4a47      	ldr	r2, [pc, #284]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c6c:	f043 0310 	orr.w	r3, r3, #16
 8001c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c72:	4b45      	ldr	r3, [pc, #276]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b41      	ldr	r3, [pc, #260]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	4a40      	ldr	r2, [pc, #256]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c88:	f043 0308 	orr.w	r3, r3, #8
 8001c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a39      	ldr	r2, [pc, #228]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001ca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b37      	ldr	r3, [pc, #220]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cb2:	60bb      	str	r3, [r7, #8]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	4b33      	ldr	r3, [pc, #204]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	4a32      	ldr	r2, [pc, #200]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc6:	4b30      	ldr	r3, [pc, #192]	@ (8001d88 <MX_GPIO_Init+0x1ac>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001cd8:	482c      	ldr	r0, [pc, #176]	@ (8001d8c <MX_GPIO_Init+0x1b0>)
 8001cda:	f000 ff71 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ce4:	482a      	ldr	r0, [pc, #168]	@ (8001d90 <MX_GPIO_Init+0x1b4>)
 8001ce6:	f000 ff6b 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2140      	movs	r1, #64	@ 0x40
 8001cee:	4829      	ldr	r0, [pc, #164]	@ (8001d94 <MX_GPIO_Init+0x1b8>)
 8001cf0:	f000 ff66 	bl	8002bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001cf4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cfa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4823      	ldr	r0, [pc, #140]	@ (8001d98 <MX_GPIO_Init+0x1bc>)
 8001d0c:	f000 fdac 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001d10:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d16:	2301      	movs	r3, #1
 8001d18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d26:	4619      	mov	r1, r3
 8001d28:	4818      	ldr	r0, [pc, #96]	@ (8001d8c <MX_GPIO_Init+0x1b0>)
 8001d2a:	f000 fd9d 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d34:	2301      	movs	r3, #1
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d44:	4619      	mov	r1, r3
 8001d46:	4812      	ldr	r0, [pc, #72]	@ (8001d90 <MX_GPIO_Init+0x1b4>)
 8001d48:	f000 fd8e 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001d4c:	2340      	movs	r3, #64	@ 0x40
 8001d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d50:	2301      	movs	r3, #1
 8001d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d60:	4619      	mov	r1, r3
 8001d62:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <MX_GPIO_Init+0x1b8>)
 8001d64:	f000 fd80 	bl	8002868 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d68:	2380      	movs	r3, #128	@ 0x80
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4806      	ldr	r0, [pc, #24]	@ (8001d94 <MX_GPIO_Init+0x1b8>)
 8001d7c:	f000 fd74 	bl	8002868 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d80:	bf00      	nop
 8001d82:	3738      	adds	r7, #56	@ 0x38
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	40021400 	.word	0x40021400
 8001d94:	40021800 	.word	0x40021800
 8001d98:	40020800 	.word	0x40020800

08001d9c <AccelTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_AccelTask */
void AccelTask(void *argument)
{
 8001d9c:	b5b0      	push	{r4, r5, r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	lcd_init();
 8001da4:	f7ff f9ac 	bl	8001100 <lcd_init>
	MPU_Init();
 8001da8:	f7ff f9fc 	bl	80011a4 <MPU_Init>

	lcd_clear();
 8001dac:	f7ff f972 	bl	8001094 <lcd_clear>

  /* Infinite loop */
  for(;;)
  {
	  ACCEL_Read(&s);
 8001db0:	481c      	ldr	r0, [pc, #112]	@ (8001e24 <AccelTask+0x88>)
 8001db2:	f7ff fa67 	bl	8001284 <ACCEL_Read>
      osDelay(10);
 8001db6:	200a      	movs	r0, #10
 8001db8:	f006 fbca 	bl	8008550 <osDelay>
      GYRO_Read(&s);
 8001dbc:	4819      	ldr	r0, [pc, #100]	@ (8001e24 <AccelTask+0x88>)
 8001dbe:	f7ff fa47 	bl	8001250 <GYRO_Read>
      osDelay(10);
 8001dc2:	200a      	movs	r0, #10
 8001dc4:	f006 fbc4 	bl	8008550 <osDelay>
      sprintf(buf,"%.2f,%.2f\r\n",s.roll,s.pitch);
 8001dc8:	4b16      	ldr	r3, [pc, #88]	@ (8001e24 <AccelTask+0x88>)
 8001dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fbcb 	bl	8000568 <__aeabi_f2d>
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	460d      	mov	r5, r1
 8001dd6:	4b13      	ldr	r3, [pc, #76]	@ (8001e24 <AccelTask+0x88>)
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fbc4 	bl	8000568 <__aeabi_f2d>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	e9cd 2300 	strd	r2, r3, [sp]
 8001de8:	4622      	mov	r2, r4
 8001dea:	462b      	mov	r3, r5
 8001dec:	490e      	ldr	r1, [pc, #56]	@ (8001e28 <AccelTask+0x8c>)
 8001dee:	480f      	ldr	r0, [pc, #60]	@ (8001e2c <AccelTask+0x90>)
 8001df0:	f009 fe1a 	bl	800ba28 <siprintf>
      lcd_send_string(buf);
 8001df4:	480d      	ldr	r0, [pc, #52]	@ (8001e2c <AccelTask+0x90>)
 8001df6:	f7ff f9c0 	bl	800117a <lcd_send_string>

      lcd_put_cur (1,0);
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f7ff f960 	bl	80010c2 <lcd_put_cur>
      HAL_UART_Transmit(&huart3,(uint8_t*)buf,strlen(buf),10);
 8001e02:	480a      	ldr	r0, [pc, #40]	@ (8001e2c <AccelTask+0x90>)
 8001e04:	f7fe fa44 	bl	8000290 <strlen>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	230a      	movs	r3, #10
 8001e0e:	4907      	ldr	r1, [pc, #28]	@ (8001e2c <AccelTask+0x90>)
 8001e10:	4807      	ldr	r0, [pc, #28]	@ (8001e30 <AccelTask+0x94>)
 8001e12:	f005 fed1 	bl	8007bb8 <HAL_UART_Transmit>

       osDelay(1000);
 8001e16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001e1a:	f006 fb99 	bl	8008550 <osDelay>
	  ACCEL_Read(&s);
 8001e1e:	bf00      	nop
 8001e20:	e7c6      	b.n	8001db0 <AccelTask+0x14>
 8001e22:	bf00      	nop
 8001e24:	20000208 	.word	0x20000208
 8001e28:	0800e3bc 	.word	0x0800e3bc
 8001e2c:	2000023c 	.word	0x2000023c
 8001e30:	200004a8 	.word	0x200004a8

08001e34 <UltrasonicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UltrasonicTask */
void UltrasonicTask(void *argument)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltrasonicTask */
	HAL_TIM_IC_Start_IT(&htim4,TIM_CHANNEL_4);
 8001e3c:	210c      	movs	r1, #12
 8001e3e:	481c      	ldr	r0, [pc, #112]	@ (8001eb0 <UltrasonicTask+0x7c>)
 8001e40:	f004 fc9e 	bl	8006780 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_WritePin(TRIG_PORT,TRIG_PIN,GPIO_PIN_SET);
 8001e44:	2201      	movs	r2, #1
 8001e46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e4a:	481a      	ldr	r0, [pc, #104]	@ (8001eb4 <UltrasonicTask+0x80>)
 8001e4c:	f000 feb8 	bl	8002bc0 <HAL_GPIO_WritePin>
    delay_us(10);
 8001e50:	200a      	movs	r0, #10
 8001e52:	f7ff fb71 	bl	8001538 <delay_us>
    HAL_GPIO_WritePin(TRIG_PORT,TRIG_PIN,GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001e5c:	4815      	ldr	r0, [pc, #84]	@ (8001eb4 <UltrasonicTask+0x80>)
 8001e5e:	f000 feaf 	bl	8002bc0 <HAL_GPIO_WritePin>
    __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC4);
 8001e62:	4b13      	ldr	r3, [pc, #76]	@ (8001eb0 <UltrasonicTask+0x7c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <UltrasonicTask+0x7c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0210 	orr.w	r2, r2, #16
 8001e70:	60da      	str	r2, [r3, #12]
    sprintf(buf2, "%d\r\n", u.distance);
 8001e72:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <UltrasonicTask+0x84>)
 8001e74:	7b5b      	ldrb	r3, [r3, #13]
 8001e76:	461a      	mov	r2, r3
 8001e78:	4910      	ldr	r1, [pc, #64]	@ (8001ebc <UltrasonicTask+0x88>)
 8001e7a:	4811      	ldr	r0, [pc, #68]	@ (8001ec0 <UltrasonicTask+0x8c>)
 8001e7c:	f009 fdd4 	bl	800ba28 <siprintf>
    lcd_send_string(buf2);
 8001e80:	480f      	ldr	r0, [pc, #60]	@ (8001ec0 <UltrasonicTask+0x8c>)
 8001e82:	f7ff f97a 	bl	800117a <lcd_send_string>

    lcd_put_cur(0,0);
 8001e86:	2100      	movs	r1, #0
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f7ff f91a 	bl	80010c2 <lcd_put_cur>
    HAL_UART_Transmit(&huart3,buf2,strlen(buf2),10);
 8001e8e:	480c      	ldr	r0, [pc, #48]	@ (8001ec0 <UltrasonicTask+0x8c>)
 8001e90:	f7fe f9fe 	bl	8000290 <strlen>
 8001e94:	4603      	mov	r3, r0
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	230a      	movs	r3, #10
 8001e9a:	4909      	ldr	r1, [pc, #36]	@ (8001ec0 <UltrasonicTask+0x8c>)
 8001e9c:	4809      	ldr	r0, [pc, #36]	@ (8001ec4 <UltrasonicTask+0x90>)
 8001e9e:	f005 fe8b 	bl	8007bb8 <HAL_UART_Transmit>
    osDelay(1000);
 8001ea2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001ea6:	f006 fb53 	bl	8008550 <osDelay>
    HAL_GPIO_WritePin(TRIG_PORT,TRIG_PIN,GPIO_PIN_SET);
 8001eaa:	bf00      	nop
 8001eac:	e7ca      	b.n	8001e44 <UltrasonicTask+0x10>
 8001eae:	bf00      	nop
 8001eb0:	20000460 	.word	0x20000460
 8001eb4:	40021400 	.word	0x40021400
 8001eb8:	200001f8 	.word	0x200001f8
 8001ebc:	0800e3c8 	.word	0x0800e3c8
 8001ec0:	2000033c 	.word	0x2000033c
 8001ec4:	200004a8 	.word	0x200004a8

08001ec8 <LCDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LCDTask */
void LCDTask(void *argument)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LCDTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f006 fb3d 	bl	8008550 <osDelay>
 8001ed6:	e7fb      	b.n	8001ed0 <LCDTask+0x8>

08001ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001edc:	b672      	cpsid	i
}
 8001ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <Error_Handler+0x8>

08001ee4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	4b12      	ldr	r3, [pc, #72]	@ (8001f38 <HAL_MspInit+0x54>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	4a11      	ldr	r2, [pc, #68]	@ (8001f38 <HAL_MspInit+0x54>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efa:	4b0f      	ldr	r3, [pc, #60]	@ (8001f38 <HAL_MspInit+0x54>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <HAL_MspInit+0x54>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <HAL_MspInit+0x54>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f16:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <HAL_MspInit+0x54>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	210f      	movs	r1, #15
 8001f26:	f06f 0001 	mvn.w	r0, #1
 8001f2a:	f000 fc36 	bl	800279a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800

08001f3c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08c      	sub	sp, #48	@ 0x30
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 031c 	add.w	r3, r7, #28
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a3a      	ldr	r2, [pc, #232]	@ (8002044 <HAL_I2C_MspInit+0x108>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d13d      	bne.n	8001fda <HAL_I2C_MspInit+0x9e>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	4b39      	ldr	r3, [pc, #228]	@ (8002048 <HAL_I2C_MspInit+0x10c>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f66:	4a38      	ldr	r2, [pc, #224]	@ (8002048 <HAL_I2C_MspInit+0x10c>)
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6e:	4b36      	ldr	r3, [pc, #216]	@ (8002048 <HAL_I2C_MspInit+0x10c>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	61bb      	str	r3, [r7, #24]
 8001f78:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f80:	2312      	movs	r3, #18
 8001f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	4619      	mov	r1, r3
 8001f96:	482d      	ldr	r0, [pc, #180]	@ (800204c <HAL_I2C_MspInit+0x110>)
 8001f98:	f000 fc66 	bl	8002868 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	4b29      	ldr	r3, [pc, #164]	@ (8002048 <HAL_I2C_MspInit+0x10c>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa4:	4a28      	ldr	r2, [pc, #160]	@ (8002048 <HAL_I2C_MspInit+0x10c>)
 8001fa6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001faa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fac:	4b26      	ldr	r3, [pc, #152]	@ (8002048 <HAL_I2C_MspInit+0x10c>)
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2105      	movs	r1, #5
 8001fbc:	201f      	movs	r0, #31
 8001fbe:	f000 fbec 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001fc2:	201f      	movs	r0, #31
 8001fc4:	f000 fc05 	bl	80027d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2105      	movs	r1, #5
 8001fcc:	2020      	movs	r0, #32
 8001fce:	f000 fbe4 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001fd2:	2020      	movs	r0, #32
 8001fd4:	f000 fbfd 	bl	80027d2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fd8:	e030      	b.n	800203c <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a1c      	ldr	r2, [pc, #112]	@ (8002050 <HAL_I2C_MspInit+0x114>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d12b      	bne.n	800203c <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	4b17      	ldr	r3, [pc, #92]	@ (8002048 <HAL_I2C_MspInit+0x10c>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fec:	4a16      	ldr	r2, [pc, #88]	@ (8002048 <HAL_I2C_MspInit+0x10c>)
 8001fee:	f043 0320 	orr.w	r3, r3, #32
 8001ff2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff4:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <HAL_I2C_MspInit+0x10c>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	613b      	str	r3, [r7, #16]
 8001ffe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002000:	2303      	movs	r3, #3
 8002002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002004:	2312      	movs	r3, #18
 8002006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200c:	2303      	movs	r3, #3
 800200e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002010:	2304      	movs	r3, #4
 8002012:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002014:	f107 031c 	add.w	r3, r7, #28
 8002018:	4619      	mov	r1, r3
 800201a:	480e      	ldr	r0, [pc, #56]	@ (8002054 <HAL_I2C_MspInit+0x118>)
 800201c:	f000 fc24 	bl	8002868 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	4b08      	ldr	r3, [pc, #32]	@ (8002048 <HAL_I2C_MspInit+0x10c>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	4a07      	ldr	r2, [pc, #28]	@ (8002048 <HAL_I2C_MspInit+0x10c>)
 800202a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800202e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002030:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <HAL_I2C_MspInit+0x10c>)
 8002032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002034:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
}
 800203c:	bf00      	nop
 800203e:	3730      	adds	r7, #48	@ 0x30
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40005400 	.word	0x40005400
 8002048:	40023800 	.word	0x40023800
 800204c:	40020400 	.word	0x40020400
 8002050:	40005800 	.word	0x40005800
 8002054:	40021400 	.word	0x40021400

08002058 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	@ 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a27      	ldr	r2, [pc, #156]	@ (8002114 <HAL_TIM_Base_MspInit+0xbc>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d10e      	bne.n	8002098 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800207a:	2300      	movs	r3, #0
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	4b26      	ldr	r3, [pc, #152]	@ (8002118 <HAL_TIM_Base_MspInit+0xc0>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002082:	4a25      	ldr	r2, [pc, #148]	@ (8002118 <HAL_TIM_Base_MspInit+0xc0>)
 8002084:	f043 0301 	orr.w	r3, r3, #1
 8002088:	6453      	str	r3, [r2, #68]	@ 0x44
 800208a:	4b23      	ldr	r3, [pc, #140]	@ (8002118 <HAL_TIM_Base_MspInit+0xc0>)
 800208c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002096:	e039      	b.n	800210c <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM4)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1f      	ldr	r2, [pc, #124]	@ (800211c <HAL_TIM_Base_MspInit+0xc4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d134      	bne.n	800210c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002118 <HAL_TIM_Base_MspInit+0xc0>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002118 <HAL_TIM_Base_MspInit+0xc0>)
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b2:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <HAL_TIM_Base_MspInit+0xc0>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <HAL_TIM_Base_MspInit+0xc0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	4a14      	ldr	r2, [pc, #80]	@ (8002118 <HAL_TIM_Base_MspInit+0xc0>)
 80020c8:	f043 0308 	orr.w	r3, r3, #8
 80020cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ce:	4b12      	ldr	r3, [pc, #72]	@ (8002118 <HAL_TIM_Base_MspInit+0xc0>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	2300      	movs	r3, #0
 80020ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020ec:	2302      	movs	r3, #2
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	4619      	mov	r1, r3
 80020f6:	480a      	ldr	r0, [pc, #40]	@ (8002120 <HAL_TIM_Base_MspInit+0xc8>)
 80020f8:	f000 fbb6 	bl	8002868 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2105      	movs	r1, #5
 8002100:	201e      	movs	r0, #30
 8002102:	f000 fb4a 	bl	800279a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002106:	201e      	movs	r0, #30
 8002108:	f000 fb63 	bl	80027d2 <HAL_NVIC_EnableIRQ>
}
 800210c:	bf00      	nop
 800210e:	3728      	adds	r7, #40	@ 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40010000 	.word	0x40010000
 8002118:	40023800 	.word	0x40023800
 800211c:	40000800 	.word	0x40000800
 8002120:	40020c00 	.word	0x40020c00

08002124 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a12      	ldr	r2, [pc, #72]	@ (800218c <HAL_TIM_MspPostInit+0x68>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d11e      	bne.n	8002184 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	4b11      	ldr	r3, [pc, #68]	@ (8002190 <HAL_TIM_MspPostInit+0x6c>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	4a10      	ldr	r2, [pc, #64]	@ (8002190 <HAL_TIM_MspPostInit+0x6c>)
 8002150:	f043 0310 	orr.w	r3, r3, #16
 8002154:	6313      	str	r3, [r2, #48]	@ 0x30
 8002156:	4b0e      	ldr	r3, [pc, #56]	@ (8002190 <HAL_TIM_MspPostInit+0x6c>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002162:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002166:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002174:	2301      	movs	r3, #1
 8002176:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002178:	f107 030c 	add.w	r3, r7, #12
 800217c:	4619      	mov	r1, r3
 800217e:	4805      	ldr	r0, [pc, #20]	@ (8002194 <HAL_TIM_MspPostInit+0x70>)
 8002180:	f000 fb72 	bl	8002868 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002184:	bf00      	nop
 8002186:	3720      	adds	r7, #32
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40010000 	.word	0x40010000
 8002190:	40023800 	.word	0x40023800
 8002194:	40021000 	.word	0x40021000

08002198 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	@ 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a19      	ldr	r2, [pc, #100]	@ (800221c <HAL_UART_MspInit+0x84>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d12c      	bne.n	8002214 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART3_MspInit 0 */

    /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <HAL_UART_MspInit+0x88>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	4a17      	ldr	r2, [pc, #92]	@ (8002220 <HAL_UART_MspInit+0x88>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <HAL_UART_MspInit+0x88>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <HAL_UART_MspInit+0x88>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	4a10      	ldr	r2, [pc, #64]	@ (8002220 <HAL_UART_MspInit+0x88>)
 80021e0:	f043 0308 	orr.w	r3, r3, #8
 80021e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <HAL_UART_MspInit+0x88>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80021f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002204:	2307      	movs	r3, #7
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4619      	mov	r1, r3
 800220e:	4805      	ldr	r0, [pc, #20]	@ (8002224 <HAL_UART_MspInit+0x8c>)
 8002210:	f000 fb2a 	bl	8002868 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8002214:	bf00      	nop
 8002216:	3728      	adds	r7, #40	@ 0x28
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40004800 	.word	0x40004800
 8002220:	40023800 	.word	0x40023800
 8002224:	40020c00 	.word	0x40020c00

08002228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <NMI_Handler+0x4>

08002230 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002234:	bf00      	nop
 8002236:	e7fd      	b.n	8002234 <HardFault_Handler+0x4>

08002238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800223c:	bf00      	nop
 800223e:	e7fd      	b.n	800223c <MemManage_Handler+0x4>

08002240 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002244:	bf00      	nop
 8002246:	e7fd      	b.n	8002244 <BusFault_Handler+0x4>

08002248 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800224c:	bf00      	nop
 800224e:	e7fd      	b.n	800224c <UsageFault_Handler+0x4>

08002250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002262:	f000 f97b 	bl	800255c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002266:	f007 fe49 	bl	8009efc <xTaskGetSchedulerState>
 800226a:	4603      	mov	r3, r0
 800226c:	2b01      	cmp	r3, #1
 800226e:	d001      	beq.n	8002274 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002270:	f008 fc42 	bl	800aaf8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800227c:	4802      	ldr	r0, [pc, #8]	@ (8002288 <TIM4_IRQHandler+0x10>)
 800227e:	f004 fba7 	bl	80069d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000460 	.word	0x20000460

0800228c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002290:	4802      	ldr	r0, [pc, #8]	@ (800229c <I2C1_EV_IRQHandler+0x10>)
 8002292:	f001 faed 	bl	8003870 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002296:	bf00      	nop
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000370 	.word	0x20000370

080022a0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80022a4:	4802      	ldr	r0, [pc, #8]	@ (80022b0 <I2C1_ER_IRQHandler+0x10>)
 80022a6:	f001 fc54 	bl	8003b52 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000370 	.word	0x20000370

080022b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return 1;
 80022b8:	2301      	movs	r3, #1
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <_kill>:

int _kill(int pid, int sig)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022ce:	f009 fc63 	bl	800bb98 <__errno>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2216      	movs	r2, #22
 80022d6:	601a      	str	r2, [r3, #0]
  return -1;
 80022d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <_exit>:

void _exit (int status)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022ec:	f04f 31ff 	mov.w	r1, #4294967295
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ffe7 	bl	80022c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022f6:	bf00      	nop
 80022f8:	e7fd      	b.n	80022f6 <_exit+0x12>

080022fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e00a      	b.n	8002322 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800230c:	f3af 8000 	nop.w
 8002310:	4601      	mov	r1, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	60ba      	str	r2, [r7, #8]
 8002318:	b2ca      	uxtb	r2, r1
 800231a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	3301      	adds	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	dbf0      	blt.n	800230c <_read+0x12>
  }

  return len;
 800232a:	687b      	ldr	r3, [r7, #4]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	e009      	b.n	800235a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	60ba      	str	r2, [r7, #8]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	3301      	adds	r3, #1
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	dbf1      	blt.n	8002346 <_write+0x12>
  }
  return len;
 8002362:	687b      	ldr	r3, [r7, #4]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_close>:

int _close(int file)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002394:	605a      	str	r2, [r3, #4]
  return 0;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_isatty>:

int _isatty(int file)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023ac:	2301      	movs	r3, #1
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b085      	sub	sp, #20
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023dc:	4a14      	ldr	r2, [pc, #80]	@ (8002430 <_sbrk+0x5c>)
 80023de:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <_sbrk+0x60>)
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e8:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f0:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <_sbrk+0x64>)
 80023f2:	4a12      	ldr	r2, [pc, #72]	@ (800243c <_sbrk+0x68>)
 80023f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023f6:	4b10      	ldr	r3, [pc, #64]	@ (8002438 <_sbrk+0x64>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	429a      	cmp	r2, r3
 8002402:	d207      	bcs.n	8002414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002404:	f009 fbc8 	bl	800bb98 <__errno>
 8002408:	4603      	mov	r3, r0
 800240a:	220c      	movs	r2, #12
 800240c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800240e:	f04f 33ff 	mov.w	r3, #4294967295
 8002412:	e009      	b.n	8002428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002414:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800241a:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <_sbrk+0x64>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	4a05      	ldr	r2, [pc, #20]	@ (8002438 <_sbrk+0x64>)
 8002424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002426:	68fb      	ldr	r3, [r7, #12]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20030000 	.word	0x20030000
 8002434:	00000400 	.word	0x00000400
 8002438:	20000500 	.word	0x20000500
 800243c:	20004fa8 	.word	0x20004fa8

08002440 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <SystemInit+0x20>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244a:	4a05      	ldr	r2, [pc, #20]	@ (8002460 <SystemInit+0x20>)
 800244c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002450:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002464:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800249c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002468:	f7ff ffea 	bl	8002440 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800246c:	480c      	ldr	r0, [pc, #48]	@ (80024a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800246e:	490d      	ldr	r1, [pc, #52]	@ (80024a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002470:	4a0d      	ldr	r2, [pc, #52]	@ (80024a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002474:	e002      	b.n	800247c <LoopCopyDataInit>

08002476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800247a:	3304      	adds	r3, #4

0800247c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800247c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800247e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002480:	d3f9      	bcc.n	8002476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002482:	4a0a      	ldr	r2, [pc, #40]	@ (80024ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002484:	4c0a      	ldr	r4, [pc, #40]	@ (80024b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002488:	e001      	b.n	800248e <LoopFillZerobss>

0800248a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800248a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800248c:	3204      	adds	r2, #4

0800248e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800248e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002490:	d3fb      	bcc.n	800248a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002492:	f009 fb87 	bl	800bba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002496:	f7ff f923 	bl	80016e0 <main>
  bx  lr    
 800249a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800249c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80024a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024a4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80024a8:	0800e890 	.word	0x0800e890
  ldr r2, =_sbss
 80024ac:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80024b0:	20004fa4 	.word	0x20004fa4

080024b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024b4:	e7fe      	b.n	80024b4 <ADC_IRQHandler>
	...

080024b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024bc:	4b0e      	ldr	r3, [pc, #56]	@ (80024f8 <HAL_Init+0x40>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0d      	ldr	r2, [pc, #52]	@ (80024f8 <HAL_Init+0x40>)
 80024c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024c8:	4b0b      	ldr	r3, [pc, #44]	@ (80024f8 <HAL_Init+0x40>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <HAL_Init+0x40>)
 80024ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d4:	4b08      	ldr	r3, [pc, #32]	@ (80024f8 <HAL_Init+0x40>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a07      	ldr	r2, [pc, #28]	@ (80024f8 <HAL_Init+0x40>)
 80024da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e0:	2003      	movs	r0, #3
 80024e2:	f000 f94f 	bl	8002784 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024e6:	200f      	movs	r0, #15
 80024e8:	f000 f808 	bl	80024fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024ec:	f7ff fcfa 	bl	8001ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40023c00 	.word	0x40023c00

080024fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002504:	4b12      	ldr	r3, [pc, #72]	@ (8002550 <HAL_InitTick+0x54>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b12      	ldr	r3, [pc, #72]	@ (8002554 <HAL_InitTick+0x58>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002512:	fbb3 f3f1 	udiv	r3, r3, r1
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f967 	bl	80027ee <HAL_SYSTICK_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e00e      	b.n	8002548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d80a      	bhi.n	8002546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002530:	2200      	movs	r2, #0
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	f04f 30ff 	mov.w	r0, #4294967295
 8002538:	f000 f92f 	bl	800279a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800253c:	4a06      	ldr	r2, [pc, #24]	@ (8002558 <HAL_InitTick+0x5c>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000000 	.word	0x20000000
 8002554:	20000008 	.word	0x20000008
 8002558:	20000004 	.word	0x20000004

0800255c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_IncTick+0x20>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <HAL_IncTick+0x24>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4413      	add	r3, r2
 800256c:	4a04      	ldr	r2, [pc, #16]	@ (8002580 <HAL_IncTick+0x24>)
 800256e:	6013      	str	r3, [r2, #0]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000008 	.word	0x20000008
 8002580:	20000504 	.word	0x20000504

08002584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return uwTick;
 8002588:	4b03      	ldr	r3, [pc, #12]	@ (8002598 <HAL_GetTick+0x14>)
 800258a:	681b      	ldr	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000504 	.word	0x20000504

0800259c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7ff ffee 	bl	8002584 <HAL_GetTick>
 80025a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d005      	beq.n	80025c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025b6:	4b0a      	ldr	r3, [pc, #40]	@ (80025e0 <HAL_Delay+0x44>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	4413      	add	r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025c2:	bf00      	nop
 80025c4:	f7ff ffde 	bl	8002584 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d8f7      	bhi.n	80025c4 <HAL_Delay+0x28>
  {
  }
}
 80025d4:	bf00      	nop
 80025d6:	bf00      	nop
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000008 	.word	0x20000008

080025e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002628 <__NVIC_SetPriorityGrouping+0x44>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002600:	4013      	ands	r3, r2
 8002602:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800260c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002614:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002616:	4a04      	ldr	r2, [pc, #16]	@ (8002628 <__NVIC_SetPriorityGrouping+0x44>)
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	60d3      	str	r3, [r2, #12]
}
 800261c:	bf00      	nop
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000ed00 	.word	0xe000ed00

0800262c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002630:	4b04      	ldr	r3, [pc, #16]	@ (8002644 <__NVIC_GetPriorityGrouping+0x18>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	0a1b      	lsrs	r3, r3, #8
 8002636:	f003 0307 	and.w	r3, r3, #7
}
 800263a:	4618      	mov	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000ed00 	.word	0xe000ed00

08002648 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	2b00      	cmp	r3, #0
 8002658:	db0b      	blt.n	8002672 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	f003 021f 	and.w	r2, r3, #31
 8002660:	4907      	ldr	r1, [pc, #28]	@ (8002680 <__NVIC_EnableIRQ+0x38>)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	095b      	lsrs	r3, r3, #5
 8002668:	2001      	movs	r0, #1
 800266a:	fa00 f202 	lsl.w	r2, r0, r2
 800266e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	e000e100 	.word	0xe000e100

08002684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002694:	2b00      	cmp	r3, #0
 8002696:	db0a      	blt.n	80026ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	b2da      	uxtb	r2, r3
 800269c:	490c      	ldr	r1, [pc, #48]	@ (80026d0 <__NVIC_SetPriority+0x4c>)
 800269e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a2:	0112      	lsls	r2, r2, #4
 80026a4:	b2d2      	uxtb	r2, r2
 80026a6:	440b      	add	r3, r1
 80026a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026ac:	e00a      	b.n	80026c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4908      	ldr	r1, [pc, #32]	@ (80026d4 <__NVIC_SetPriority+0x50>)
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	3b04      	subs	r3, #4
 80026bc:	0112      	lsls	r2, r2, #4
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	440b      	add	r3, r1
 80026c2:	761a      	strb	r2, [r3, #24]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	e000e100 	.word	0xe000e100
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b089      	sub	sp, #36	@ 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f1c3 0307 	rsb	r3, r3, #7
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	bf28      	it	cs
 80026f6:	2304      	movcs	r3, #4
 80026f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	3304      	adds	r3, #4
 80026fe:	2b06      	cmp	r3, #6
 8002700:	d902      	bls.n	8002708 <NVIC_EncodePriority+0x30>
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	3b03      	subs	r3, #3
 8002706:	e000      	b.n	800270a <NVIC_EncodePriority+0x32>
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800270c:	f04f 32ff 	mov.w	r2, #4294967295
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	43da      	mvns	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	401a      	ands	r2, r3
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002720:	f04f 31ff 	mov.w	r1, #4294967295
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	fa01 f303 	lsl.w	r3, r1, r3
 800272a:	43d9      	mvns	r1, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	4313      	orrs	r3, r2
         );
}
 8002732:	4618      	mov	r0, r3
 8002734:	3724      	adds	r7, #36	@ 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002750:	d301      	bcc.n	8002756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002752:	2301      	movs	r3, #1
 8002754:	e00f      	b.n	8002776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002756:	4a0a      	ldr	r2, [pc, #40]	@ (8002780 <SysTick_Config+0x40>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275e:	210f      	movs	r1, #15
 8002760:	f04f 30ff 	mov.w	r0, #4294967295
 8002764:	f7ff ff8e 	bl	8002684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002768:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <SysTick_Config+0x40>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276e:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <SysTick_Config+0x40>)
 8002770:	2207      	movs	r2, #7
 8002772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	e000e010 	.word	0xe000e010

08002784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff29 	bl	80025e4 <__NVIC_SetPriorityGrouping>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800279a:	b580      	push	{r7, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027ac:	f7ff ff3e 	bl	800262c <__NVIC_GetPriorityGrouping>
 80027b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	6978      	ldr	r0, [r7, #20]
 80027b8:	f7ff ff8e 	bl	80026d8 <NVIC_EncodePriority>
 80027bc:	4602      	mov	r2, r0
 80027be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c2:	4611      	mov	r1, r2
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff ff5d 	bl	8002684 <__NVIC_SetPriority>
}
 80027ca:	bf00      	nop
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	4603      	mov	r3, r0
 80027da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff ff31 	bl	8002648 <__NVIC_EnableIRQ>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff ffa2 	bl	8002740 <SysTick_Config>
 80027fc:	4603      	mov	r3, r0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d004      	beq.n	8002824 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2280      	movs	r2, #128	@ 0x80
 800281e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e00c      	b.n	800283e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2205      	movs	r2, #5
 8002828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0201 	bic.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002858:	b2db      	uxtb	r3, r3
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002868:	b480      	push	{r7}
 800286a:	b089      	sub	sp, #36	@ 0x24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800287a:	2300      	movs	r3, #0
 800287c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	e177      	b.n	8002b74 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002884:	2201      	movs	r2, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	429a      	cmp	r2, r3
 800289e:	f040 8166 	bne.w	8002b6e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d005      	beq.n	80028ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d130      	bne.n	800291c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	2203      	movs	r2, #3
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f0:	2201      	movs	r2, #1
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	091b      	lsrs	r3, r3, #4
 8002906:	f003 0201 	and.w	r2, r3, #1
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b03      	cmp	r3, #3
 8002926:	d017      	beq.n	8002958 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	2203      	movs	r2, #3
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	4013      	ands	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d123      	bne.n	80029ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	08da      	lsrs	r2, r3, #3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3208      	adds	r2, #8
 800296c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	220f      	movs	r2, #15
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	08da      	lsrs	r2, r3, #3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3208      	adds	r2, #8
 80029a6:	69b9      	ldr	r1, [r7, #24]
 80029a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 0203 	and.w	r2, r3, #3
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80c0 	beq.w	8002b6e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	4b66      	ldr	r3, [pc, #408]	@ (8002b8c <HAL_GPIO_Init+0x324>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f6:	4a65      	ldr	r2, [pc, #404]	@ (8002b8c <HAL_GPIO_Init+0x324>)
 80029f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029fe:	4b63      	ldr	r3, [pc, #396]	@ (8002b8c <HAL_GPIO_Init+0x324>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a0a:	4a61      	ldr	r2, [pc, #388]	@ (8002b90 <HAL_GPIO_Init+0x328>)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	089b      	lsrs	r3, r3, #2
 8002a10:	3302      	adds	r3, #2
 8002a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	220f      	movs	r2, #15
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a58      	ldr	r2, [pc, #352]	@ (8002b94 <HAL_GPIO_Init+0x32c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d037      	beq.n	8002aa6 <HAL_GPIO_Init+0x23e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a57      	ldr	r2, [pc, #348]	@ (8002b98 <HAL_GPIO_Init+0x330>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d031      	beq.n	8002aa2 <HAL_GPIO_Init+0x23a>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a56      	ldr	r2, [pc, #344]	@ (8002b9c <HAL_GPIO_Init+0x334>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d02b      	beq.n	8002a9e <HAL_GPIO_Init+0x236>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a55      	ldr	r2, [pc, #340]	@ (8002ba0 <HAL_GPIO_Init+0x338>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d025      	beq.n	8002a9a <HAL_GPIO_Init+0x232>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a54      	ldr	r2, [pc, #336]	@ (8002ba4 <HAL_GPIO_Init+0x33c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01f      	beq.n	8002a96 <HAL_GPIO_Init+0x22e>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a53      	ldr	r2, [pc, #332]	@ (8002ba8 <HAL_GPIO_Init+0x340>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d019      	beq.n	8002a92 <HAL_GPIO_Init+0x22a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a52      	ldr	r2, [pc, #328]	@ (8002bac <HAL_GPIO_Init+0x344>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_GPIO_Init+0x226>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a51      	ldr	r2, [pc, #324]	@ (8002bb0 <HAL_GPIO_Init+0x348>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00d      	beq.n	8002a8a <HAL_GPIO_Init+0x222>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a50      	ldr	r2, [pc, #320]	@ (8002bb4 <HAL_GPIO_Init+0x34c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <HAL_GPIO_Init+0x21e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4f      	ldr	r2, [pc, #316]	@ (8002bb8 <HAL_GPIO_Init+0x350>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_GPIO_Init+0x21a>
 8002a7e:	2309      	movs	r3, #9
 8002a80:	e012      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002a82:	230a      	movs	r3, #10
 8002a84:	e010      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002a86:	2308      	movs	r3, #8
 8002a88:	e00e      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002a8a:	2307      	movs	r3, #7
 8002a8c:	e00c      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002a8e:	2306      	movs	r3, #6
 8002a90:	e00a      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002a92:	2305      	movs	r3, #5
 8002a94:	e008      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002a96:	2304      	movs	r3, #4
 8002a98:	e006      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e004      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e002      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_GPIO_Init+0x240>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	f002 0203 	and.w	r2, r2, #3
 8002aae:	0092      	lsls	r2, r2, #2
 8002ab0:	4093      	lsls	r3, r2
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab8:	4935      	ldr	r1, [pc, #212]	@ (8002b90 <HAL_GPIO_Init+0x328>)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	089b      	lsrs	r3, r3, #2
 8002abe:	3302      	adds	r3, #2
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ac6:	4b3d      	ldr	r3, [pc, #244]	@ (8002bbc <HAL_GPIO_Init+0x354>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aea:	4a34      	ldr	r2, [pc, #208]	@ (8002bbc <HAL_GPIO_Init+0x354>)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af0:	4b32      	ldr	r3, [pc, #200]	@ (8002bbc <HAL_GPIO_Init+0x354>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b14:	4a29      	ldr	r2, [pc, #164]	@ (8002bbc <HAL_GPIO_Init+0x354>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b1a:	4b28      	ldr	r3, [pc, #160]	@ (8002bbc <HAL_GPIO_Init+0x354>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bbc <HAL_GPIO_Init+0x354>)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b44:	4b1d      	ldr	r3, [pc, #116]	@ (8002bbc <HAL_GPIO_Init+0x354>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b68:	4a14      	ldr	r2, [pc, #80]	@ (8002bbc <HAL_GPIO_Init+0x354>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3301      	adds	r3, #1
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	2b0f      	cmp	r3, #15
 8002b78:	f67f ae84 	bls.w	8002884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	3724      	adds	r7, #36	@ 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40013800 	.word	0x40013800
 8002b94:	40020000 	.word	0x40020000
 8002b98:	40020400 	.word	0x40020400
 8002b9c:	40020800 	.word	0x40020800
 8002ba0:	40020c00 	.word	0x40020c00
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40021400 	.word	0x40021400
 8002bac:	40021800 	.word	0x40021800
 8002bb0:	40021c00 	.word	0x40021c00
 8002bb4:	40022000 	.word	0x40022000
 8002bb8:	40022400 	.word	0x40022400
 8002bbc:	40013c00 	.word	0x40013c00

08002bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	807b      	strh	r3, [r7, #2]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd0:	787b      	ldrb	r3, [r7, #1]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bd6:	887a      	ldrh	r2, [r7, #2]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bdc:	e003      	b.n	8002be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bde:	887b      	ldrh	r3, [r7, #2]
 8002be0:	041a      	lsls	r2, r3, #16
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	619a      	str	r2, [r3, #24]
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e12b      	b.n	8002e5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff f98e 	bl	8001f3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2224      	movs	r2, #36	@ 0x24
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c58:	f003 fc68 	bl	800652c <HAL_RCC_GetPCLK1Freq>
 8002c5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4a81      	ldr	r2, [pc, #516]	@ (8002e68 <HAL_I2C_Init+0x274>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d807      	bhi.n	8002c78 <HAL_I2C_Init+0x84>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4a80      	ldr	r2, [pc, #512]	@ (8002e6c <HAL_I2C_Init+0x278>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	bf94      	ite	ls
 8002c70:	2301      	movls	r3, #1
 8002c72:	2300      	movhi	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	e006      	b.n	8002c86 <HAL_I2C_Init+0x92>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4a7d      	ldr	r2, [pc, #500]	@ (8002e70 <HAL_I2C_Init+0x27c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	bf94      	ite	ls
 8002c80:	2301      	movls	r3, #1
 8002c82:	2300      	movhi	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e0e7      	b.n	8002e5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4a78      	ldr	r2, [pc, #480]	@ (8002e74 <HAL_I2C_Init+0x280>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	0c9b      	lsrs	r3, r3, #18
 8002c98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	4a6a      	ldr	r2, [pc, #424]	@ (8002e68 <HAL_I2C_Init+0x274>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d802      	bhi.n	8002cc8 <HAL_I2C_Init+0xd4>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	e009      	b.n	8002cdc <HAL_I2C_Init+0xe8>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002cce:	fb02 f303 	mul.w	r3, r2, r3
 8002cd2:	4a69      	ldr	r2, [pc, #420]	@ (8002e78 <HAL_I2C_Init+0x284>)
 8002cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd8:	099b      	lsrs	r3, r3, #6
 8002cda:	3301      	adds	r3, #1
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002cee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	495c      	ldr	r1, [pc, #368]	@ (8002e68 <HAL_I2C_Init+0x274>)
 8002cf8:	428b      	cmp	r3, r1
 8002cfa:	d819      	bhi.n	8002d30 <HAL_I2C_Init+0x13c>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1e59      	subs	r1, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d0a:	1c59      	adds	r1, r3, #1
 8002d0c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d10:	400b      	ands	r3, r1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_I2C_Init+0x138>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	1e59      	subs	r1, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d24:	3301      	adds	r3, #1
 8002d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d2a:	e051      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002d2c:	2304      	movs	r3, #4
 8002d2e:	e04f      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d111      	bne.n	8002d5c <HAL_I2C_Init+0x168>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1e58      	subs	r0, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6859      	ldr	r1, [r3, #4]
 8002d40:	460b      	mov	r3, r1
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	440b      	add	r3, r1
 8002d46:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf0c      	ite	eq
 8002d54:	2301      	moveq	r3, #1
 8002d56:	2300      	movne	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	e012      	b.n	8002d82 <HAL_I2C_Init+0x18e>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1e58      	subs	r0, r3, #1
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6859      	ldr	r1, [r3, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	0099      	lsls	r1, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d72:	3301      	adds	r3, #1
 8002d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	bf0c      	ite	eq
 8002d7c:	2301      	moveq	r3, #1
 8002d7e:	2300      	movne	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Init+0x196>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e022      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10e      	bne.n	8002db0 <HAL_I2C_Init+0x1bc>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	1e58      	subs	r0, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6859      	ldr	r1, [r3, #4]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	440b      	add	r3, r1
 8002da0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da4:	3301      	adds	r3, #1
 8002da6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002daa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dae:	e00f      	b.n	8002dd0 <HAL_I2C_Init+0x1dc>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	1e58      	subs	r0, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6859      	ldr	r1, [r3, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	0099      	lsls	r1, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	6809      	ldr	r1, [r1, #0]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69da      	ldr	r2, [r3, #28]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002dfe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6911      	ldr	r1, [r2, #16]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68d2      	ldr	r2, [r2, #12]
 8002e0a:	4311      	orrs	r1, r2
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	430b      	orrs	r3, r1
 8002e12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	000186a0 	.word	0x000186a0
 8002e6c:	001e847f 	.word	0x001e847f
 8002e70:	003d08ff 	.word	0x003d08ff
 8002e74:	431bde83 	.word	0x431bde83
 8002e78:	10624dd3 	.word	0x10624dd3

08002e7c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e8e:	2b80      	cmp	r3, #128	@ 0x80
 8002e90:	d103      	bne.n	8002e9a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2200      	movs	r2, #0
 8002e98:	611a      	str	r2, [r3, #16]
  }
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	817b      	strh	r3, [r7, #10]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ebc:	f7ff fb62 	bl	8002584 <HAL_GetTick>
 8002ec0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	f040 80e0 	bne.w	8003090 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	2319      	movs	r3, #25
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	4970      	ldr	r1, [pc, #448]	@ (800309c <HAL_I2C_Master_Transmit+0x1f4>)
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f002 fb68 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e0d3      	b.n	8003092 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_I2C_Master_Transmit+0x50>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e0cc      	b.n	8003092 <HAL_I2C_Master_Transmit+0x1ea>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d007      	beq.n	8002f1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f042 0201 	orr.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2221      	movs	r2, #33	@ 0x21
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2210      	movs	r2, #16
 8002f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	893a      	ldrh	r2, [r7, #8]
 8002f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4a50      	ldr	r2, [pc, #320]	@ (80030a0 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f60:	8979      	ldrh	r1, [r7, #10]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	6a3a      	ldr	r2, [r7, #32]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f002 f87a 	bl	8005060 <I2C_MasterRequestWrite>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e08d      	b.n	8003092 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f8c:	e066      	b.n	800305c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	6a39      	ldr	r1, [r7, #32]
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f002 fc26 	bl	80057e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00d      	beq.n	8002fba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d107      	bne.n	8002fb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e06b      	b.n	8003092 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbe:	781a      	ldrb	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d11b      	bne.n	8003030 <HAL_I2C_Master_Transmit+0x188>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d017      	beq.n	8003030 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003004:	781a      	ldrb	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	3b01      	subs	r3, #1
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003028:	3b01      	subs	r3, #1
 800302a:	b29a      	uxth	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	6a39      	ldr	r1, [r7, #32]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f002 fc1d 	bl	8005874 <I2C_WaitOnBTFFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00d      	beq.n	800305c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003044:	2b04      	cmp	r3, #4
 8003046:	d107      	bne.n	8003058 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003056:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e01a      	b.n	8003092 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003060:	2b00      	cmp	r3, #0
 8003062:	d194      	bne.n	8002f8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e000      	b.n	8003092 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003090:	2302      	movs	r3, #2
  }
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	00100002 	.word	0x00100002
 80030a0:	ffff0000 	.word	0xffff0000

080030a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	4608      	mov	r0, r1
 80030ae:	4611      	mov	r1, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	817b      	strh	r3, [r7, #10]
 80030b6:	460b      	mov	r3, r1
 80030b8:	813b      	strh	r3, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030be:	f7ff fa61 	bl	8002584 <HAL_GetTick>
 80030c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	f040 80d9 	bne.w	8003284 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	2319      	movs	r3, #25
 80030d8:	2201      	movs	r2, #1
 80030da:	496d      	ldr	r1, [pc, #436]	@ (8003290 <HAL_I2C_Mem_Write+0x1ec>)
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f002 fa67 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80030e8:	2302      	movs	r3, #2
 80030ea:	e0cc      	b.n	8003286 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_I2C_Mem_Write+0x56>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e0c5      	b.n	8003286 <HAL_I2C_Mem_Write+0x1e2>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	d007      	beq.n	8003120 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f042 0201 	orr.w	r2, r2, #1
 800311e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800312e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2221      	movs	r2, #33	@ 0x21
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2240      	movs	r2, #64	@ 0x40
 800313c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a3a      	ldr	r2, [r7, #32]
 800314a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003150:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4a4d      	ldr	r2, [pc, #308]	@ (8003294 <HAL_I2C_Mem_Write+0x1f0>)
 8003160:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003162:	88f8      	ldrh	r0, [r7, #6]
 8003164:	893a      	ldrh	r2, [r7, #8]
 8003166:	8979      	ldrh	r1, [r7, #10]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	9301      	str	r3, [sp, #4]
 800316c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	4603      	mov	r3, r0
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f001 fff6 	bl	8005164 <I2C_RequestMemoryWrite>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d052      	beq.n	8003224 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e081      	b.n	8003286 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f002 fb2c 	bl	80057e4 <I2C_WaitOnTXEFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00d      	beq.n	80031ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	2b04      	cmp	r3, #4
 8003198:	d107      	bne.n	80031aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e06b      	b.n	8003286 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	781a      	ldrb	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f003 0304 	and.w	r3, r3, #4
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d11b      	bne.n	8003224 <HAL_I2C_Mem_Write+0x180>
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d017      	beq.n	8003224 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f8:	781a      	ldrb	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1aa      	bne.n	8003182 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f002 fb1f 	bl	8005874 <I2C_WaitOnBTFFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00d      	beq.n	8003258 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003240:	2b04      	cmp	r3, #4
 8003242:	d107      	bne.n	8003254 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003252:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e016      	b.n	8003286 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	e000      	b.n	8003286 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003284:	2302      	movs	r3, #2
  }
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	00100002 	.word	0x00100002
 8003294:	ffff0000 	.word	0xffff0000

08003298 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b08c      	sub	sp, #48	@ 0x30
 800329c:	af02      	add	r7, sp, #8
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	4608      	mov	r0, r1
 80032a2:	4611      	mov	r1, r2
 80032a4:	461a      	mov	r2, r3
 80032a6:	4603      	mov	r3, r0
 80032a8:	817b      	strh	r3, [r7, #10]
 80032aa:	460b      	mov	r3, r1
 80032ac:	813b      	strh	r3, [r7, #8]
 80032ae:	4613      	mov	r3, r2
 80032b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032b2:	f7ff f967 	bl	8002584 <HAL_GetTick>
 80032b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b20      	cmp	r3, #32
 80032c2:	f040 8214 	bne.w	80036ee <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	2319      	movs	r3, #25
 80032cc:	2201      	movs	r2, #1
 80032ce:	497b      	ldr	r1, [pc, #492]	@ (80034bc <HAL_I2C_Mem_Read+0x224>)
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f002 f96d 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
 80032de:	e207      	b.n	80036f0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_I2C_Mem_Read+0x56>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e200      	b.n	80036f0 <HAL_I2C_Mem_Read+0x458>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d007      	beq.n	8003314 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0201 	orr.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003322:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2222      	movs	r2, #34	@ 0x22
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2240      	movs	r2, #64	@ 0x40
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800333e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003344:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a5b      	ldr	r2, [pc, #364]	@ (80034c0 <HAL_I2C_Mem_Read+0x228>)
 8003354:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003356:	88f8      	ldrh	r0, [r7, #6]
 8003358:	893a      	ldrh	r2, [r7, #8]
 800335a:	8979      	ldrh	r1, [r7, #10]
 800335c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	4603      	mov	r3, r0
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f001 ff92 	bl	8005290 <I2C_RequestMemoryRead>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e1bc      	b.n	80036f0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337a:	2b00      	cmp	r3, #0
 800337c:	d113      	bne.n	80033a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337e:	2300      	movs	r3, #0
 8003380:	623b      	str	r3, [r7, #32]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	623b      	str	r3, [r7, #32]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	623b      	str	r3, [r7, #32]
 8003392:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	e190      	b.n	80036c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d11b      	bne.n	80033e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	e170      	b.n	80036c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d11b      	bne.n	8003426 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800340c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800340e:	2300      	movs	r3, #0
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	61bb      	str	r3, [r7, #24]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	61bb      	str	r3, [r7, #24]
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	e150      	b.n	80036c8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800343c:	e144      	b.n	80036c8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003442:	2b03      	cmp	r3, #3
 8003444:	f200 80f1 	bhi.w	800362a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344c:	2b01      	cmp	r3, #1
 800344e:	d123      	bne.n	8003498 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003450:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003452:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f002 fa87 	bl	8005968 <I2C_WaitOnRXNEFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e145      	b.n	80036f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691a      	ldr	r2, [r3, #16]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003476:	1c5a      	adds	r2, r3, #1
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003480:	3b01      	subs	r3, #1
 8003482:	b29a      	uxth	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003496:	e117      	b.n	80036c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800349c:	2b02      	cmp	r3, #2
 800349e:	d14e      	bne.n	800353e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a6:	2200      	movs	r2, #0
 80034a8:	4906      	ldr	r1, [pc, #24]	@ (80034c4 <HAL_I2C_Mem_Read+0x22c>)
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f002 f880 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e11a      	b.n	80036f0 <HAL_I2C_Mem_Read+0x458>
 80034ba:	bf00      	nop
 80034bc:	00100002 	.word	0x00100002
 80034c0:	ffff0000 	.word	0xffff0000
 80034c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	691a      	ldr	r2, [r3, #16]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800353c:	e0c4      	b.n	80036c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003544:	2200      	movs	r2, #0
 8003546:	496c      	ldr	r1, [pc, #432]	@ (80036f8 <HAL_I2C_Mem_Read+0x460>)
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f002 f831 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0cb      	b.n	80036f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	b2d2      	uxtb	r2, r2
 8003574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357a:	1c5a      	adds	r2, r3, #1
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003590:	b29b      	uxth	r3, r3
 8003592:	3b01      	subs	r3, #1
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800359a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a0:	2200      	movs	r2, #0
 80035a2:	4955      	ldr	r1, [pc, #340]	@ (80036f8 <HAL_I2C_Mem_Read+0x460>)
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f002 f803 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d001      	beq.n	80035b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e09d      	b.n	80036f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691a      	ldr	r2, [r3, #16]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003628:	e04e      	b.n	80036c8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800362a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800362c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f002 f99a 	bl	8005968 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e058      	b.n	80036f0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0304 	and.w	r3, r3, #4
 800367a:	2b04      	cmp	r3, #4
 800367c:	d124      	bne.n	80036c8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003682:	2b03      	cmp	r3, #3
 8003684:	d107      	bne.n	8003696 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003694:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a8:	1c5a      	adds	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b2:	3b01      	subs	r3, #1
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f47f aeb6 	bne.w	800343e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	e000      	b.n	80036f0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80036ee:	2302      	movs	r3, #2
  }
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3728      	adds	r7, #40	@ 0x28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	00010004 	.word	0x00010004

080036fc <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	4608      	mov	r0, r1
 8003706:	4611      	mov	r1, r2
 8003708:	461a      	mov	r2, r3
 800370a:	4603      	mov	r3, r0
 800370c:	817b      	strh	r3, [r7, #10]
 800370e:	460b      	mov	r3, r1
 8003710:	813b      	strh	r3, [r7, #8]
 8003712:	4613      	mov	r3, r2
 8003714:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b20      	cmp	r3, #32
 8003724:	f040 8096 	bne.w	8003854 <HAL_I2C_Mem_Read_IT+0x158>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003728:	4b4e      	ldr	r3, [pc, #312]	@ (8003864 <HAL_I2C_Mem_Read_IT+0x168>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	08db      	lsrs	r3, r3, #3
 800372e:	4a4e      	ldr	r2, [pc, #312]	@ (8003868 <HAL_I2C_Mem_Read_IT+0x16c>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	0a1a      	lsrs	r2, r3, #8
 8003736:	4613      	mov	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4413      	add	r3, r2
 800373c:	009a      	lsls	r2, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	3b01      	subs	r3, #1
 8003746:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d112      	bne.n	8003774 <HAL_I2C_Mem_Read_IT+0x78>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2220      	movs	r2, #32
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	f043 0220 	orr.w	r2, r3, #32
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
 8003772:	e070      	b.n	8003856 <HAL_I2C_Mem_Read_IT+0x15a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	d0df      	beq.n	8003742 <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_I2C_Mem_Read_IT+0x94>
 800378c:	2302      	movs	r3, #2
 800378e:	e062      	b.n	8003856 <HAL_I2C_Mem_Read_IT+0x15a>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d007      	beq.n	80037b6 <HAL_I2C_Mem_Read_IT+0xba>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037c4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2222      	movs	r2, #34	@ 0x22
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2240      	movs	r2, #64	@ 0x40
 80037d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a3a      	ldr	r2, [r7, #32]
 80037e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a1d      	ldr	r2, [pc, #116]	@ (800386c <HAL_I2C_Mem_Read_IT+0x170>)
 80037f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80037f8:	897a      	ldrh	r2, [r7, #10]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80037fe:	893a      	ldrh	r2, [r7, #8]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8003804:	88fa      	ldrh	r2, [r7, #6]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800381e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800382e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if (hi2c->XferSize > 0U)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <HAL_I2C_Mem_Read_IT+0x154>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800384e:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	e000      	b.n	8003856 <HAL_I2C_Mem_Read_IT+0x15a>
  }
  else
  {
    return HAL_BUSY;
 8003854:	2302      	movs	r3, #2
  }
}
 8003856:	4618      	mov	r0, r3
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000000 	.word	0x20000000
 8003868:	14f8b589 	.word	0x14f8b589
 800386c:	ffff0000 	.word	0xffff0000

08003870 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003888:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003890:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003898:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	2b10      	cmp	r3, #16
 800389e:	d003      	beq.n	80038a8 <HAL_I2C_EV_IRQHandler+0x38>
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b40      	cmp	r3, #64	@ 0x40
 80038a4:	f040 80c1 	bne.w	8003a2a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10d      	bne.n	80038de <HAL_I2C_EV_IRQHandler+0x6e>
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80038c8:	d003      	beq.n	80038d2 <HAL_I2C_EV_IRQHandler+0x62>
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80038d0:	d101      	bne.n	80038d6 <HAL_I2C_EV_IRQHandler+0x66>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <HAL_I2C_EV_IRQHandler+0x68>
 80038d6:	2300      	movs	r3, #0
 80038d8:	2b01      	cmp	r3, #1
 80038da:	f000 8132 	beq.w	8003b42 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00c      	beq.n	8003902 <HAL_I2C_EV_IRQHandler+0x92>
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	0a5b      	lsrs	r3, r3, #9
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d006      	beq.n	8003902 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f002 f8c3 	bl	8005a80 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fd91 	bl	8004422 <I2C_Master_SB>
 8003900:	e092      	b.n	8003a28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	08db      	lsrs	r3, r3, #3
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d009      	beq.n	8003922 <HAL_I2C_EV_IRQHandler+0xb2>
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	0a5b      	lsrs	r3, r3, #9
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fe07 	bl	800452e <I2C_Master_ADD10>
 8003920:	e082      	b.n	8003a28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	085b      	lsrs	r3, r3, #1
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_I2C_EV_IRQHandler+0xd2>
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	0a5b      	lsrs	r3, r3, #9
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d003      	beq.n	8003942 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fe21 	bl	8004582 <I2C_Master_ADDR>
 8003940:	e072      	b.n	8003a28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	089b      	lsrs	r3, r3, #2
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d03b      	beq.n	80039c6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003958:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800395c:	f000 80f3 	beq.w	8003b46 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	09db      	lsrs	r3, r3, #7
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00f      	beq.n	800398c <HAL_I2C_EV_IRQHandler+0x11c>
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	0a9b      	lsrs	r3, r3, #10
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d009      	beq.n	800398c <HAL_I2C_EV_IRQHandler+0x11c>
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	089b      	lsrs	r3, r3, #2
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b00      	cmp	r3, #0
 8003982:	d103      	bne.n	800398c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f9e9 	bl	8003d5c <I2C_MasterTransmit_TXE>
 800398a:	e04d      	b.n	8003a28 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	089b      	lsrs	r3, r3, #2
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80d6 	beq.w	8003b46 <HAL_I2C_EV_IRQHandler+0x2d6>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	0a5b      	lsrs	r3, r3, #9
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 80cf 	beq.w	8003b46 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80039a8:	7bbb      	ldrb	r3, [r7, #14]
 80039aa:	2b21      	cmp	r3, #33	@ 0x21
 80039ac:	d103      	bne.n	80039b6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fa70 	bl	8003e94 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039b4:	e0c7      	b.n	8003b46 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	2b40      	cmp	r3, #64	@ 0x40
 80039ba:	f040 80c4 	bne.w	8003b46 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fade 	bl	8003f80 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039c4:	e0bf      	b.n	8003b46 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039d4:	f000 80b7 	beq.w	8003b46 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	099b      	lsrs	r3, r3, #6
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00f      	beq.n	8003a04 <HAL_I2C_EV_IRQHandler+0x194>
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	0a9b      	lsrs	r3, r3, #10
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d009      	beq.n	8003a04 <HAL_I2C_EV_IRQHandler+0x194>
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	089b      	lsrs	r3, r3, #2
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d103      	bne.n	8003a04 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fb57 	bl	80040b0 <I2C_MasterReceive_RXNE>
 8003a02:	e011      	b.n	8003a28 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	089b      	lsrs	r3, r3, #2
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 809a 	beq.w	8003b46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	0a5b      	lsrs	r3, r3, #9
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 8093 	beq.w	8003b46 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fc0d 	bl	8004240 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a26:	e08e      	b.n	8003b46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a28:	e08d      	b.n	8003b46 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d004      	beq.n	8003a3c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	e007      	b.n	8003a4c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	085b      	lsrs	r3, r3, #1
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d012      	beq.n	8003a7e <HAL_I2C_EV_IRQHandler+0x20e>
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	0a5b      	lsrs	r3, r3, #9
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d00c      	beq.n	8003a7e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003a74:	69b9      	ldr	r1, [r7, #24]
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 ffd2 	bl	8004a20 <I2C_Slave_ADDR>
 8003a7c:	e066      	b.n	8003b4c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_I2C_EV_IRQHandler+0x22e>
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	0a5b      	lsrs	r3, r3, #9
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f001 f80c 	bl	8004ab4 <I2C_Slave_STOPF>
 8003a9c:	e056      	b.n	8003b4c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a9e:	7bbb      	ldrb	r3, [r7, #14]
 8003aa0:	2b21      	cmp	r3, #33	@ 0x21
 8003aa2:	d002      	beq.n	8003aaa <HAL_I2C_EV_IRQHandler+0x23a>
 8003aa4:	7bbb      	ldrb	r3, [r7, #14]
 8003aa6:	2b29      	cmp	r3, #41	@ 0x29
 8003aa8:	d125      	bne.n	8003af6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	09db      	lsrs	r3, r3, #7
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00f      	beq.n	8003ad6 <HAL_I2C_EV_IRQHandler+0x266>
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	0a9b      	lsrs	r3, r3, #10
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <HAL_I2C_EV_IRQHandler+0x266>
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	089b      	lsrs	r3, r3, #2
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d103      	bne.n	8003ad6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fee8 	bl	80048a4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ad4:	e039      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	089b      	lsrs	r3, r3, #2
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d033      	beq.n	8003b4a <HAL_I2C_EV_IRQHandler+0x2da>
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	0a5b      	lsrs	r3, r3, #9
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d02d      	beq.n	8003b4a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 ff15 	bl	800491e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003af4:	e029      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	099b      	lsrs	r3, r3, #6
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00f      	beq.n	8003b22 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	0a9b      	lsrs	r3, r3, #10
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	089b      	lsrs	r3, r3, #2
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d103      	bne.n	8003b22 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 ff20 	bl	8004960 <I2C_SlaveReceive_RXNE>
 8003b20:	e014      	b.n	8003b4c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	089b      	lsrs	r3, r3, #2
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00e      	beq.n	8003b4c <HAL_I2C_EV_IRQHandler+0x2dc>
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	0a5b      	lsrs	r3, r3, #9
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d008      	beq.n	8003b4c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 ff4e 	bl	80049dc <I2C_SlaveReceive_BTF>
 8003b40:	e004      	b.n	8003b4c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003b42:	bf00      	nop
 8003b44:	e002      	b.n	8003b4c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b4a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003b4c:	3720      	adds	r7, #32
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b08a      	sub	sp, #40	@ 0x28
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b74:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b76:	6a3b      	ldr	r3, [r7, #32]
 8003b78:	0a1b      	lsrs	r3, r3, #8
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00e      	beq.n	8003ba0 <HAL_I2C_ER_IRQHandler+0x4e>
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	0a1b      	lsrs	r3, r3, #8
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d008      	beq.n	8003ba0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003b9e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	0a5b      	lsrs	r3, r3, #9
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00e      	beq.n	8003bca <HAL_I2C_ER_IRQHandler+0x78>
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	0a1b      	lsrs	r3, r3, #8
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d008      	beq.n	8003bca <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bba:	f043 0302 	orr.w	r3, r3, #2
 8003bbe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003bc8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	0a9b      	lsrs	r3, r3, #10
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d03f      	beq.n	8003c56 <HAL_I2C_ER_IRQHandler+0x104>
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	0a1b      	lsrs	r3, r3, #8
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d039      	beq.n	8003c56 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003be2:	7efb      	ldrb	r3, [r7, #27]
 8003be4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003bfc:	7ebb      	ldrb	r3, [r7, #26]
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d112      	bne.n	8003c28 <HAL_I2C_ER_IRQHandler+0xd6>
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10f      	bne.n	8003c28 <HAL_I2C_ER_IRQHandler+0xd6>
 8003c08:	7cfb      	ldrb	r3, [r7, #19]
 8003c0a:	2b21      	cmp	r3, #33	@ 0x21
 8003c0c:	d008      	beq.n	8003c20 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003c0e:	7cfb      	ldrb	r3, [r7, #19]
 8003c10:	2b29      	cmp	r3, #41	@ 0x29
 8003c12:	d005      	beq.n	8003c20 <HAL_I2C_ER_IRQHandler+0xce>
 8003c14:	7cfb      	ldrb	r3, [r7, #19]
 8003c16:	2b28      	cmp	r3, #40	@ 0x28
 8003c18:	d106      	bne.n	8003c28 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b21      	cmp	r3, #33	@ 0x21
 8003c1e:	d103      	bne.n	8003c28 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f001 f877 	bl	8004d14 <I2C_Slave_AF>
 8003c26:	e016      	b.n	8003c56 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c30:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c34:	f043 0304 	orr.w	r3, r3, #4
 8003c38:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c3a:	7efb      	ldrb	r3, [r7, #27]
 8003c3c:	2b10      	cmp	r3, #16
 8003c3e:	d002      	beq.n	8003c46 <HAL_I2C_ER_IRQHandler+0xf4>
 8003c40:	7efb      	ldrb	r3, [r7, #27]
 8003c42:	2b40      	cmp	r3, #64	@ 0x40
 8003c44:	d107      	bne.n	8003c56 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c54:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	0adb      	lsrs	r3, r3, #11
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00e      	beq.n	8003c80 <HAL_I2C_ER_IRQHandler+0x12e>
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	0a1b      	lsrs	r3, r3, #8
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c70:	f043 0308 	orr.w	r3, r3, #8
 8003c74:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003c7e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f001 f8b2 	bl	8004dfc <I2C_ITError>
  }
}
 8003c98:	bf00      	nop
 8003c9a:	3728      	adds	r7, #40	@ 0x28
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	70fb      	strb	r3, [r7, #3]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d6a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d72:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d78:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d150      	bne.n	8003e24 <I2C_MasterTransmit_TXE+0xc8>
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	2b21      	cmp	r3, #33	@ 0x21
 8003d86:	d14d      	bne.n	8003e24 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d01d      	beq.n	8003dca <I2C_MasterTransmit_TXE+0x6e>
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d01a      	beq.n	8003dca <I2C_MasterTransmit_TXE+0x6e>
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d9a:	d016      	beq.n	8003dca <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003daa:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2211      	movs	r2, #17
 8003db0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff ff6c 	bl	8003ca0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dc8:	e060      	b.n	8003e8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dd8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b40      	cmp	r3, #64	@ 0x40
 8003e02:	d107      	bne.n	8003e14 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff ff87 	bl	8003d20 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e12:	e03b      	b.n	8003e8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff ff3f 	bl	8003ca0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e22:	e033      	b.n	8003e8c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	2b21      	cmp	r3, #33	@ 0x21
 8003e28:	d005      	beq.n	8003e36 <I2C_MasterTransmit_TXE+0xda>
 8003e2a:	7bbb      	ldrb	r3, [r7, #14]
 8003e2c:	2b40      	cmp	r3, #64	@ 0x40
 8003e2e:	d12d      	bne.n	8003e8c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b22      	cmp	r3, #34	@ 0x22
 8003e34:	d12a      	bne.n	8003e8c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d108      	bne.n	8003e52 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e4e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003e50:	e01c      	b.n	8003e8c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b40      	cmp	r3, #64	@ 0x40
 8003e5c:	d103      	bne.n	8003e66 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f88e 	bl	8003f80 <I2C_MemoryTransmit_TXE_BTF>
}
 8003e64:	e012      	b.n	8003e8c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6a:	781a      	ldrb	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e8a:	e7ff      	b.n	8003e8c <I2C_MasterTransmit_TXE+0x130>
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ea0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b21      	cmp	r3, #33	@ 0x21
 8003eac:	d164      	bne.n	8003f78 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d012      	beq.n	8003ede <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	781a      	ldrb	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003edc:	e04c      	b.n	8003f78 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b08      	cmp	r3, #8
 8003ee2:	d01d      	beq.n	8003f20 <I2C_MasterTransmit_BTF+0x8c>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2b20      	cmp	r3, #32
 8003ee8:	d01a      	beq.n	8003f20 <I2C_MasterTransmit_BTF+0x8c>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ef0:	d016      	beq.n	8003f20 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f00:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2211      	movs	r2, #17
 8003f06:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7ff fec1 	bl	8003ca0 <HAL_I2C_MasterTxCpltCallback>
}
 8003f1e:	e02b      	b.n	8003f78 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f2e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f3e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b40      	cmp	r3, #64	@ 0x40
 8003f58:	d107      	bne.n	8003f6a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7ff fedc 	bl	8003d20 <HAL_I2C_MemTxCpltCallback>
}
 8003f68:	e006      	b.n	8003f78 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff fe94 	bl	8003ca0 <HAL_I2C_MasterTxCpltCallback>
}
 8003f78:	bf00      	nop
 8003f7a:	3710      	adds	r7, #16
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f8e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d11d      	bne.n	8003fd4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d10b      	bne.n	8003fb8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb0:	1c9a      	adds	r2, r3, #2
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003fb6:	e077      	b.n	80040a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	121b      	asrs	r3, r3, #8
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003fd2:	e069      	b.n	80040a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d10b      	bne.n	8003ff4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fe0:	b2da      	uxtb	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003ff2:	e059      	b.n	80040a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d152      	bne.n	80040a2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003ffc:	7bfb      	ldrb	r3, [r7, #15]
 8003ffe:	2b22      	cmp	r3, #34	@ 0x22
 8004000:	d10d      	bne.n	800401e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004010:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800401c:	e044      	b.n	80040a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d015      	beq.n	8004054 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	2b21      	cmp	r3, #33	@ 0x21
 800402c:	d112      	bne.n	8004054 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004032:	781a      	ldrb	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	3b01      	subs	r3, #1
 800404c:	b29a      	uxth	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004052:	e029      	b.n	80040a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d124      	bne.n	80040a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800405e:	7bfb      	ldrb	r3, [r7, #15]
 8004060:	2b21      	cmp	r3, #33	@ 0x21
 8004062:	d121      	bne.n	80040a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004072:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004082:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2200      	movs	r2, #0
 8004088:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7ff fe40 	bl	8003d20 <HAL_I2C_MemTxCpltCallback>
}
 80040a0:	e002      	b.n	80040a8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7fe feea 	bl	8002e7c <I2C_Flush_DR>
}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b22      	cmp	r3, #34	@ 0x22
 80040c2:	f040 80b9 	bne.w	8004238 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ca:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d921      	bls.n	800411e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b03      	cmp	r3, #3
 8004108:	f040 8096 	bne.w	8004238 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800411a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800411c:	e08c      	b.n	8004238 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004122:	2b02      	cmp	r3, #2
 8004124:	d07f      	beq.n	8004226 <I2C_MasterReceive_RXNE+0x176>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d002      	beq.n	8004132 <I2C_MasterReceive_RXNE+0x82>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d179      	bne.n	8004226 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f001 fbe6 	bl	8005904 <I2C_WaitOnSTOPRequestThroughIT>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d14c      	bne.n	80041d8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800414c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800415c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b40      	cmp	r3, #64	@ 0x40
 8004196:	d10a      	bne.n	80041ae <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fd f9e0 	bl	800156c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80041ac:	e044      	b.n	8004238 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2b08      	cmp	r3, #8
 80041ba:	d002      	beq.n	80041c2 <I2C_MasterReceive_RXNE+0x112>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2b20      	cmp	r3, #32
 80041c0:	d103      	bne.n	80041ca <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80041c8:	e002      	b.n	80041d0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2212      	movs	r2, #18
 80041ce:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f7ff fd6f 	bl	8003cb4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80041d6:	e02f      	b.n	8004238 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80041e6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fd88 	bl	8003d34 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004224:	e008      	b.n	8004238 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004234:	605a      	str	r2, [r3, #4]
}
 8004236:	e7ff      	b.n	8004238 <I2C_MasterReceive_RXNE+0x188>
 8004238:	bf00      	nop
 800423a:	3710      	adds	r7, #16
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b04      	cmp	r3, #4
 8004256:	d11b      	bne.n	8004290 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004266:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	691a      	ldr	r2, [r3, #16]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800428e:	e0c4      	b.n	800441a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b03      	cmp	r3, #3
 8004298:	d129      	bne.n	80042ee <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042a8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d00a      	beq.n	80042c6 <I2C_MasterReceive_BTF+0x86>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d007      	beq.n	80042c6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042c4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80042ec:	e095      	b.n	800441a <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d17d      	bne.n	80043f4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d002      	beq.n	8004304 <I2C_MasterReceive_BTF+0xc4>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b10      	cmp	r3, #16
 8004302:	d108      	bne.n	8004316 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	e016      	b.n	8004344 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b04      	cmp	r3, #4
 800431a:	d002      	beq.n	8004322 <I2C_MasterReceive_BTF+0xe2>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d108      	bne.n	8004334 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e007      	b.n	8004344 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004342:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	3b01      	subs	r3, #1
 8004364:	b29a      	uxth	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800439e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b40      	cmp	r3, #64	@ 0x40
 80043b2:	d10a      	bne.n	80043ca <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f7fd f8d2 	bl	800156c <HAL_I2C_MemRxCpltCallback>
}
 80043c8:	e027      	b.n	800441a <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d002      	beq.n	80043de <I2C_MasterReceive_BTF+0x19e>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b20      	cmp	r3, #32
 80043dc:	d103      	bne.n	80043e6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80043e4:	e002      	b.n	80043ec <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2212      	movs	r2, #18
 80043ea:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff fc61 	bl	8003cb4 <HAL_I2C_MasterRxCpltCallback>
}
 80043f2:	e012      	b.n	800441a <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	691a      	ldr	r2, [r3, #16]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004406:	1c5a      	adds	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004410:	b29b      	uxth	r3, r3
 8004412:	3b01      	subs	r3, #1
 8004414:	b29a      	uxth	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b40      	cmp	r3, #64	@ 0x40
 8004434:	d117      	bne.n	8004466 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004442:	b2db      	uxtb	r3, r3
 8004444:	461a      	mov	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800444e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004450:	e067      	b.n	8004522 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f043 0301 	orr.w	r3, r3, #1
 800445c:	b2da      	uxtb	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	611a      	str	r2, [r3, #16]
}
 8004464:	e05d      	b.n	8004522 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800446e:	d133      	bne.n	80044d8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b21      	cmp	r3, #33	@ 0x21
 800447a:	d109      	bne.n	8004490 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004480:	b2db      	uxtb	r3, r3
 8004482:	461a      	mov	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800448c:	611a      	str	r2, [r3, #16]
 800448e:	e008      	b.n	80044a2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004494:	b2db      	uxtb	r3, r3
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	b2da      	uxtb	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d004      	beq.n	80044b4 <I2C_Master_SB+0x92>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d108      	bne.n	80044c6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d032      	beq.n	8004522 <I2C_Master_SB+0x100>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d02d      	beq.n	8004522 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044d4:	605a      	str	r2, [r3, #4]
}
 80044d6:	e024      	b.n	8004522 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10e      	bne.n	80044fe <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	11db      	asrs	r3, r3, #7
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	f003 0306 	and.w	r3, r3, #6
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f063 030f 	orn	r3, r3, #15
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	611a      	str	r2, [r3, #16]
}
 80044fc:	e011      	b.n	8004522 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004502:	2b01      	cmp	r3, #1
 8004504:	d10d      	bne.n	8004522 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450a:	b29b      	uxth	r3, r3
 800450c:	11db      	asrs	r3, r3, #7
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f003 0306 	and.w	r3, r3, #6
 8004514:	b2db      	uxtb	r3, r3
 8004516:	f063 030e 	orn	r3, r3, #14
 800451a:	b2da      	uxtb	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	611a      	str	r2, [r3, #16]
}
 8004522:	bf00      	nop
 8004524:	370c      	adds	r7, #12
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453a:	b2da      	uxtb	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004546:	2b00      	cmp	r3, #0
 8004548:	d004      	beq.n	8004554 <I2C_Master_ADD10+0x26>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800454e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d108      	bne.n	8004566 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00c      	beq.n	8004576 <I2C_Master_ADD10+0x48>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004574:	605a      	str	r2, [r3, #4]
  }
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004582:	b480      	push	{r7}
 8004584:	b091      	sub	sp, #68	@ 0x44
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004590:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004598:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b22      	cmp	r3, #34	@ 0x22
 80045aa:	f040 8169 	bne.w	8004880 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10f      	bne.n	80045d6 <I2C_Master_ADDR+0x54>
 80045b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80045ba:	2b40      	cmp	r3, #64	@ 0x40
 80045bc:	d10b      	bne.n	80045d6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045be:	2300      	movs	r3, #0
 80045c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80045d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d4:	e160      	b.n	8004898 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d11d      	bne.n	800461a <I2C_Master_ADDR+0x98>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80045e6:	d118      	bne.n	800461a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e8:	2300      	movs	r3, #0
 80045ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800460c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	651a      	str	r2, [r3, #80]	@ 0x50
 8004618:	e13e      	b.n	8004898 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800461e:	b29b      	uxth	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d113      	bne.n	800464c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004624:	2300      	movs	r3, #0
 8004626:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004638:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	e115      	b.n	8004878 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b01      	cmp	r3, #1
 8004654:	f040 808a 	bne.w	800476c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800465e:	d137      	bne.n	80046d0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800466e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800467a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800467e:	d113      	bne.n	80046a8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800468e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004690:	2300      	movs	r3, #0
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	627b      	str	r3, [r7, #36]	@ 0x24
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80046a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a6:	e0e7      	b.n	8004878 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a8:	2300      	movs	r3, #0
 80046aa:	623b      	str	r3, [r7, #32]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	623b      	str	r3, [r7, #32]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	623b      	str	r3, [r7, #32]
 80046bc:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	e0d3      	b.n	8004878 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80046d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d02e      	beq.n	8004734 <I2C_Master_ADDR+0x1b2>
 80046d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d02b      	beq.n	8004734 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80046dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046de:	2b12      	cmp	r3, #18
 80046e0:	d102      	bne.n	80046e8 <I2C_Master_ADDR+0x166>
 80046e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d125      	bne.n	8004734 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80046e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d00e      	beq.n	800470c <I2C_Master_ADDR+0x18a>
 80046ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d00b      	beq.n	800470c <I2C_Master_ADDR+0x18a>
 80046f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f6:	2b10      	cmp	r3, #16
 80046f8:	d008      	beq.n	800470c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	e007      	b.n	800471c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800471a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800471c:	2300      	movs	r3, #0
 800471e:	61fb      	str	r3, [r7, #28]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	61fb      	str	r3, [r7, #28]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	e0a1      	b.n	8004878 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004742:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004744:	2300      	movs	r3, #0
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	61bb      	str	r3, [r7, #24]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	61bb      	str	r3, [r7, #24]
 8004758:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e085      	b.n	8004878 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d14d      	bne.n	8004812 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004778:	2b04      	cmp	r3, #4
 800477a:	d016      	beq.n	80047aa <I2C_Master_ADDR+0x228>
 800477c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800477e:	2b02      	cmp	r3, #2
 8004780:	d013      	beq.n	80047aa <I2C_Master_ADDR+0x228>
 8004782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004784:	2b10      	cmp	r3, #16
 8004786:	d010      	beq.n	80047aa <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004796:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	e007      	b.n	80047ba <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047b8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047c8:	d117      	bne.n	80047fa <I2C_Master_ADDR+0x278>
 80047ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047d0:	d00b      	beq.n	80047ea <I2C_Master_ADDR+0x268>
 80047d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d008      	beq.n	80047ea <I2C_Master_ADDR+0x268>
 80047d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d005      	beq.n	80047ea <I2C_Master_ADDR+0x268>
 80047de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d002      	beq.n	80047ea <I2C_Master_ADDR+0x268>
 80047e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d107      	bne.n	80047fa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	e032      	b.n	8004878 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004820:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800482c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004830:	d117      	bne.n	8004862 <I2C_Master_ADDR+0x2e0>
 8004832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004834:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004838:	d00b      	beq.n	8004852 <I2C_Master_ADDR+0x2d0>
 800483a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483c:	2b01      	cmp	r3, #1
 800483e:	d008      	beq.n	8004852 <I2C_Master_ADDR+0x2d0>
 8004840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004842:	2b08      	cmp	r3, #8
 8004844:	d005      	beq.n	8004852 <I2C_Master_ADDR+0x2d0>
 8004846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004848:	2b10      	cmp	r3, #16
 800484a:	d002      	beq.n	8004852 <I2C_Master_ADDR+0x2d0>
 800484c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800484e:	2b20      	cmp	r3, #32
 8004850:	d107      	bne.n	8004862 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004860:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004862:	2300      	movs	r3, #0
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800487e:	e00b      	b.n	8004898 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	60fb      	str	r3, [r7, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
}
 8004896:	e7ff      	b.n	8004898 <I2C_Master_ADDR+0x316>
 8004898:	bf00      	nop
 800489a:	3744      	adds	r7, #68	@ 0x44
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048b2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d02b      	beq.n	8004916 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	781a      	ldrb	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d114      	bne.n	8004916 <I2C_SlaveTransmit_TXE+0x72>
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
 80048ee:	2b29      	cmp	r3, #41	@ 0x29
 80048f0:	d111      	bne.n	8004916 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004900:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2221      	movs	r2, #33	@ 0x21
 8004906:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2228      	movs	r2, #40	@ 0x28
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff f9d9 	bl	8003cc8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004916:	bf00      	nop
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492a:	b29b      	uxth	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d011      	beq.n	8004954 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	781a      	ldrb	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800496e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d02c      	beq.n	80049d4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498c:	1c5a      	adds	r2, r3, #1
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004996:	b29b      	uxth	r3, r3
 8004998:	3b01      	subs	r3, #1
 800499a:	b29a      	uxth	r2, r3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d114      	bne.n	80049d4 <I2C_SlaveReceive_RXNE+0x74>
 80049aa:	7bfb      	ldrb	r3, [r7, #15]
 80049ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80049ae:	d111      	bne.n	80049d4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049be:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2222      	movs	r2, #34	@ 0x22
 80049c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2228      	movs	r2, #40	@ 0x28
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff f984 	bl	8003cdc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80049d4:	bf00      	nop
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d012      	beq.n	8004a14 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	1c5a      	adds	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a3a:	2b28      	cmp	r3, #40	@ 0x28
 8004a3c:	d127      	bne.n	8004a8e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a4c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	089b      	lsrs	r3, r3, #2
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	09db      	lsrs	r3, r3, #7
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d103      	bne.n	8004a72 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	81bb      	strh	r3, [r7, #12]
 8004a70:	e002      	b.n	8004a78 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004a80:	89ba      	ldrh	r2, [r7, #12]
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	4619      	mov	r1, r3
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff f932 	bl	8003cf0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a8c:	e00e      	b.n	8004aac <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60bb      	str	r3, [r7, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ac2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ad2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f042 0201 	orr.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b00:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b10:	d172      	bne.n	8004bf8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
 8004b14:	2b22      	cmp	r3, #34	@ 0x22
 8004b16:	d002      	beq.n	8004b1e <I2C_Slave_STOPF+0x6a>
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b1c:	d135      	bne.n	8004b8a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d005      	beq.n	8004b42 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3a:	f043 0204 	orr.w	r2, r3, #4
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fd fe77 	bl	800284a <HAL_DMA_GetState>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d049      	beq.n	8004bf6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b66:	4a69      	ldr	r2, [pc, #420]	@ (8004d0c <I2C_Slave_STOPF+0x258>)
 8004b68:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fd fe49 	bl	8002806 <HAL_DMA_Abort_IT>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d03d      	beq.n	8004bf6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b84:	4610      	mov	r0, r2
 8004b86:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b88:	e035      	b.n	8004bf6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d005      	beq.n	8004bae <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba6:	f043 0204 	orr.w	r2, r3, #4
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bbc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fd fe41 	bl	800284a <HAL_DMA_GetState>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d014      	beq.n	8004bf8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd2:	4a4e      	ldr	r2, [pc, #312]	@ (8004d0c <I2C_Slave_STOPF+0x258>)
 8004bd4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7fd fe13 	bl	8002806 <HAL_DMA_Abort_IT>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d008      	beq.n	8004bf8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004bf0:	4610      	mov	r0, r2
 8004bf2:	4798      	blx	r3
 8004bf4:	e000      	b.n	8004bf8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bf6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d03e      	beq.n	8004c80 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d112      	bne.n	8004c36 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c40:	2b40      	cmp	r3, #64	@ 0x40
 8004c42:	d112      	bne.n	8004c6a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691a      	ldr	r2, [r3, #16]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d005      	beq.n	8004c80 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c78:	f043 0204 	orr.w	r2, r3, #4
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f8b7 	bl	8004dfc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004c8e:	e039      	b.n	8004d04 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c94:	d109      	bne.n	8004caa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2228      	movs	r2, #40	@ 0x28
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff f819 	bl	8003cdc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b28      	cmp	r3, #40	@ 0x28
 8004cb4:	d111      	bne.n	8004cda <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a15      	ldr	r2, [pc, #84]	@ (8004d10 <I2C_Slave_STOPF+0x25c>)
 8004cba:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff f81a 	bl	8003d0c <HAL_I2C_ListenCpltCallback>
}
 8004cd8:	e014      	b.n	8004d04 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cde:	2b22      	cmp	r3, #34	@ 0x22
 8004ce0:	d002      	beq.n	8004ce8 <I2C_Slave_STOPF+0x234>
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
 8004ce4:	2b22      	cmp	r3, #34	@ 0x22
 8004ce6:	d10d      	bne.n	8004d04 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fe ffec 	bl	8003cdc <HAL_I2C_SlaveRxCpltCallback>
}
 8004d04:	bf00      	nop
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	08005461 	.word	0x08005461
 8004d10:	ffff0000 	.word	0xffff0000

08004d14 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d22:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d28:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d002      	beq.n	8004d36 <I2C_Slave_AF+0x22>
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b20      	cmp	r3, #32
 8004d34:	d129      	bne.n	8004d8a <I2C_Slave_AF+0x76>
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	2b28      	cmp	r3, #40	@ 0x28
 8004d3a:	d126      	bne.n	8004d8a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8004df8 <I2C_Slave_AF+0xe4>)
 8004d40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d50:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004d5a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d6a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fe ffc2 	bl	8003d0c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004d88:	e031      	b.n	8004dee <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004d8a:	7bfb      	ldrb	r3, [r7, #15]
 8004d8c:	2b21      	cmp	r3, #33	@ 0x21
 8004d8e:	d129      	bne.n	8004de4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a19      	ldr	r2, [pc, #100]	@ (8004df8 <I2C_Slave_AF+0xe4>)
 8004d94:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2221      	movs	r2, #33	@ 0x21
 8004d9a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dba:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004dc4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dd4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fe f850 	bl	8002e7c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7fe ff73 	bl	8003cc8 <HAL_I2C_SlaveTxCpltCallback>
}
 8004de2:	e004      	b.n	8004dee <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004dec:	615a      	str	r2, [r3, #20]
}
 8004dee:	bf00      	nop
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	ffff0000 	.word	0xffff0000

08004dfc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004e14:	7bbb      	ldrb	r3, [r7, #14]
 8004e16:	2b10      	cmp	r3, #16
 8004e18:	d002      	beq.n	8004e20 <I2C_ITError+0x24>
 8004e1a:	7bbb      	ldrb	r3, [r7, #14]
 8004e1c:	2b40      	cmp	r3, #64	@ 0x40
 8004e1e:	d10a      	bne.n	8004e36 <I2C_ITError+0x3a>
 8004e20:	7bfb      	ldrb	r3, [r7, #15]
 8004e22:	2b22      	cmp	r3, #34	@ 0x22
 8004e24:	d107      	bne.n	8004e36 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e34:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004e3c:	2b28      	cmp	r3, #40	@ 0x28
 8004e3e:	d107      	bne.n	8004e50 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2228      	movs	r2, #40	@ 0x28
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004e4e:	e015      	b.n	8004e7c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e5e:	d00a      	beq.n	8004e76 <I2C_ITError+0x7a>
 8004e60:	7bfb      	ldrb	r3, [r7, #15]
 8004e62:	2b60      	cmp	r3, #96	@ 0x60
 8004e64:	d007      	beq.n	8004e76 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e8a:	d162      	bne.n	8004f52 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e9a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d020      	beq.n	8004eec <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eae:	4a6a      	ldr	r2, [pc, #424]	@ (8005058 <I2C_ITError+0x25c>)
 8004eb0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fd fca5 	bl	8002806 <HAL_DMA_Abort_IT>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f000 8089 	beq.w	8004fd6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0201 	bic.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	4798      	blx	r3
 8004eea:	e074      	b.n	8004fd6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef0:	4a59      	ldr	r2, [pc, #356]	@ (8005058 <I2C_ITError+0x25c>)
 8004ef2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fd fc84 	bl	8002806 <HAL_DMA_Abort_IT>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d068      	beq.n	8004fd6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0e:	2b40      	cmp	r3, #64	@ 0x40
 8004f10:	d10b      	bne.n	8004f2a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	691a      	ldr	r2, [r3, #16]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1c:	b2d2      	uxtb	r2, r2
 8004f1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0201 	bic.w	r2, r2, #1
 8004f38:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	4798      	blx	r3
 8004f50:	e041      	b.n	8004fd6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	2b60      	cmp	r3, #96	@ 0x60
 8004f5c:	d125      	bne.n	8004faa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2220      	movs	r2, #32
 8004f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f76:	2b40      	cmp	r3, #64	@ 0x40
 8004f78:	d10b      	bne.n	8004f92 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f022 0201 	bic.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fe fed0 	bl	8003d48 <HAL_I2C_AbortCpltCallback>
 8004fa8:	e015      	b.n	8004fd6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fb4:	2b40      	cmp	r3, #64	@ 0x40
 8004fb6:	d10b      	bne.n	8004fd0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fca:	1c5a      	adds	r2, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7fe feaf 	bl	8003d34 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fda:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10e      	bne.n	8005004 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d109      	bne.n	8005004 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d104      	bne.n	8005004 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005000:	2b00      	cmp	r3, #0
 8005002:	d007      	beq.n	8005014 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005012:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800501a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b04      	cmp	r3, #4
 8005026:	d113      	bne.n	8005050 <I2C_ITError+0x254>
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	2b28      	cmp	r3, #40	@ 0x28
 800502c:	d110      	bne.n	8005050 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a0a      	ldr	r2, [pc, #40]	@ (800505c <I2C_ITError+0x260>)
 8005032:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2220      	movs	r2, #32
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fe fe5e 	bl	8003d0c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005050:	bf00      	nop
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	08005461 	.word	0x08005461
 800505c:	ffff0000 	.word	0xffff0000

08005060 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af02      	add	r7, sp, #8
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	607a      	str	r2, [r7, #4]
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	460b      	mov	r3, r1
 800506e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005074:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2b08      	cmp	r3, #8
 800507a:	d006      	beq.n	800508a <I2C_MasterRequestWrite+0x2a>
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d003      	beq.n	800508a <I2C_MasterRequestWrite+0x2a>
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005088:	d108      	bne.n	800509c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	e00b      	b.n	80050b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a0:	2b12      	cmp	r3, #18
 80050a2:	d107      	bne.n	80050b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f000 fa75 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00d      	beq.n	80050e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050da:	d103      	bne.n	80050e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e035      	b.n	8005154 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050f0:	d108      	bne.n	8005104 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050f2:	897b      	ldrh	r3, [r7, #10]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005100:	611a      	str	r2, [r3, #16]
 8005102:	e01b      	b.n	800513c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005104:	897b      	ldrh	r3, [r7, #10]
 8005106:	11db      	asrs	r3, r3, #7
 8005108:	b2db      	uxtb	r3, r3
 800510a:	f003 0306 	and.w	r3, r3, #6
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f063 030f 	orn	r3, r3, #15
 8005114:	b2da      	uxtb	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	490e      	ldr	r1, [pc, #56]	@ (800515c <I2C_MasterRequestWrite+0xfc>)
 8005122:	68f8      	ldr	r0, [r7, #12]
 8005124:	f000 fabe 	bl	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e010      	b.n	8005154 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005132:	897b      	ldrh	r3, [r7, #10]
 8005134:	b2da      	uxtb	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	4907      	ldr	r1, [pc, #28]	@ (8005160 <I2C_MasterRequestWrite+0x100>)
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 faae 	bl	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	00010008 	.word	0x00010008
 8005160:	00010002 	.word	0x00010002

08005164 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af02      	add	r7, sp, #8
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	4608      	mov	r0, r1
 800516e:	4611      	mov	r1, r2
 8005170:	461a      	mov	r2, r3
 8005172:	4603      	mov	r3, r0
 8005174:	817b      	strh	r3, [r7, #10]
 8005176:	460b      	mov	r3, r1
 8005178:	813b      	strh	r3, [r7, #8]
 800517a:	4613      	mov	r3, r2
 800517c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800518c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	2200      	movs	r2, #0
 8005196:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 fa08 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00d      	beq.n	80051c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051b4:	d103      	bne.n	80051be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e05f      	b.n	8005282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051c2:	897b      	ldrh	r3, [r7, #10]
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	461a      	mov	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d4:	6a3a      	ldr	r2, [r7, #32]
 80051d6:	492d      	ldr	r1, [pc, #180]	@ (800528c <I2C_RequestMemoryWrite+0x128>)
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 fa63 	bl	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d001      	beq.n	80051e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e04c      	b.n	8005282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e8:	2300      	movs	r3, #0
 80051ea:	617b      	str	r3, [r7, #20]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	617b      	str	r3, [r7, #20]
 80051fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005200:	6a39      	ldr	r1, [r7, #32]
 8005202:	68f8      	ldr	r0, [r7, #12]
 8005204:	f000 faee 	bl	80057e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00d      	beq.n	800522a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	2b04      	cmp	r3, #4
 8005214:	d107      	bne.n	8005226 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005224:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e02b      	b.n	8005282 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800522a:	88fb      	ldrh	r3, [r7, #6]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d105      	bne.n	800523c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005230:	893b      	ldrh	r3, [r7, #8]
 8005232:	b2da      	uxtb	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	611a      	str	r2, [r3, #16]
 800523a:	e021      	b.n	8005280 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800523c:	893b      	ldrh	r3, [r7, #8]
 800523e:	0a1b      	lsrs	r3, r3, #8
 8005240:	b29b      	uxth	r3, r3
 8005242:	b2da      	uxtb	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800524a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800524c:	6a39      	ldr	r1, [r7, #32]
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fac8 	bl	80057e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00d      	beq.n	8005276 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525e:	2b04      	cmp	r3, #4
 8005260:	d107      	bne.n	8005272 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005270:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e005      	b.n	8005282 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005276:	893b      	ldrh	r3, [r7, #8]
 8005278:	b2da      	uxtb	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	00010002 	.word	0x00010002

08005290 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af02      	add	r7, sp, #8
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	4608      	mov	r0, r1
 800529a:	4611      	mov	r1, r2
 800529c:	461a      	mov	r2, r3
 800529e:	4603      	mov	r3, r0
 80052a0:	817b      	strh	r3, [r7, #10]
 80052a2:	460b      	mov	r3, r1
 80052a4:	813b      	strh	r3, [r7, #8]
 80052a6:	4613      	mov	r3, r2
 80052a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f96a 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00d      	beq.n	80052fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052f0:	d103      	bne.n	80052fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e0aa      	b.n	8005454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052fe:	897b      	ldrh	r3, [r7, #10]
 8005300:	b2db      	uxtb	r3, r3
 8005302:	461a      	mov	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800530c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	6a3a      	ldr	r2, [r7, #32]
 8005312:	4952      	ldr	r1, [pc, #328]	@ (800545c <I2C_RequestMemoryRead+0x1cc>)
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f9c5 	bl	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e097      	b.n	8005454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005324:	2300      	movs	r3, #0
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800533a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800533c:	6a39      	ldr	r1, [r7, #32]
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 fa50 	bl	80057e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00d      	beq.n	8005366 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	2b04      	cmp	r3, #4
 8005350:	d107      	bne.n	8005362 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005360:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e076      	b.n	8005454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d105      	bne.n	8005378 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800536c:	893b      	ldrh	r3, [r7, #8]
 800536e:	b2da      	uxtb	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	611a      	str	r2, [r3, #16]
 8005376:	e021      	b.n	80053bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005378:	893b      	ldrh	r3, [r7, #8]
 800537a:	0a1b      	lsrs	r3, r3, #8
 800537c:	b29b      	uxth	r3, r3
 800537e:	b2da      	uxtb	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005388:	6a39      	ldr	r1, [r7, #32]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fa2a 	bl	80057e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00d      	beq.n	80053b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539a:	2b04      	cmp	r3, #4
 800539c:	d107      	bne.n	80053ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e050      	b.n	8005454 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053b2:	893b      	ldrh	r3, [r7, #8]
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053be:	6a39      	ldr	r1, [r7, #32]
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f000 fa0f 	bl	80057e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00d      	beq.n	80053e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d0:	2b04      	cmp	r3, #4
 80053d2:	d107      	bne.n	80053e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e035      	b.n	8005454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	6a3b      	ldr	r3, [r7, #32]
 80053fe:	2200      	movs	r2, #0
 8005400:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f8d3 	bl	80055b0 <I2C_WaitOnFlagUntilTimeout>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00d      	beq.n	800542c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800541e:	d103      	bne.n	8005428 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005426:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e013      	b.n	8005454 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800542c:	897b      	ldrh	r3, [r7, #10]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	f043 0301 	orr.w	r3, r3, #1
 8005434:	b2da      	uxtb	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800543c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543e:	6a3a      	ldr	r2, [r7, #32]
 8005440:	4906      	ldr	r1, [pc, #24]	@ (800545c <I2C_RequestMemoryRead+0x1cc>)
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f92e 	bl	80056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d001      	beq.n	8005452 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e000      	b.n	8005454 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3718      	adds	r7, #24
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	00010002 	.word	0x00010002

08005460 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005470:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005478:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800547a:	4b4b      	ldr	r3, [pc, #300]	@ (80055a8 <I2C_DMAAbort+0x148>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	08db      	lsrs	r3, r3, #3
 8005480:	4a4a      	ldr	r2, [pc, #296]	@ (80055ac <I2C_DMAAbort+0x14c>)
 8005482:	fba2 2303 	umull	r2, r3, r2, r3
 8005486:	0a1a      	lsrs	r2, r3, #8
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	00da      	lsls	r2, r3, #3
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549e:	f043 0220 	orr.w	r2, r3, #32
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80054a6:	e00a      	b.n	80054be <I2C_DMAAbort+0x5e>
    }
    count--;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054bc:	d0ea      	beq.n	8005494 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d003      	beq.n	80054ce <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ca:	2200      	movs	r2, #0
 80054cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054da:	2200      	movs	r2, #0
 80054dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ec:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	2200      	movs	r2, #0
 80054f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005500:	2200      	movs	r2, #0
 8005502:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005510:	2200      	movs	r2, #0
 8005512:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0201 	bic.w	r2, r2, #1
 8005522:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800552a:	b2db      	uxtb	r3, r3
 800552c:	2b60      	cmp	r3, #96	@ 0x60
 800552e:	d10e      	bne.n	800554e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2200      	movs	r2, #0
 8005544:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005546:	6978      	ldr	r0, [r7, #20]
 8005548:	f7fe fbfe 	bl	8003d48 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800554c:	e027      	b.n	800559e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800554e:	7cfb      	ldrb	r3, [r7, #19]
 8005550:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005554:	2b28      	cmp	r3, #40	@ 0x28
 8005556:	d117      	bne.n	8005588 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0201 	orr.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005576:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	2200      	movs	r2, #0
 800557c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2228      	movs	r2, #40	@ 0x28
 8005582:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005586:	e007      	b.n	8005598 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005598:	6978      	ldr	r0, [r7, #20]
 800559a:	f7fe fbcb 	bl	8003d34 <HAL_I2C_ErrorCallback>
}
 800559e:	bf00      	nop
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	20000000 	.word	0x20000000
 80055ac:	14f8b589 	.word	0x14f8b589

080055b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	4613      	mov	r3, r2
 80055be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055c0:	e048      	b.n	8005654 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c8:	d044      	beq.n	8005654 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055ca:	f7fc ffdb 	bl	8002584 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d302      	bcc.n	80055e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d139      	bne.n	8005654 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	0c1b      	lsrs	r3, r3, #16
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d10d      	bne.n	8005606 <I2C_WaitOnFlagUntilTimeout+0x56>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695b      	ldr	r3, [r3, #20]
 80055f0:	43da      	mvns	r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	4013      	ands	r3, r2
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	bf0c      	ite	eq
 80055fc:	2301      	moveq	r3, #1
 80055fe:	2300      	movne	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	461a      	mov	r2, r3
 8005604:	e00c      	b.n	8005620 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	43da      	mvns	r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4013      	ands	r3, r2
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	bf0c      	ite	eq
 8005618:	2301      	moveq	r3, #1
 800561a:	2300      	movne	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	461a      	mov	r2, r3
 8005620:	79fb      	ldrb	r3, [r7, #7]
 8005622:	429a      	cmp	r2, r3
 8005624:	d116      	bne.n	8005654 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005640:	f043 0220 	orr.w	r2, r3, #32
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e023      	b.n	800569c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	0c1b      	lsrs	r3, r3, #16
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b01      	cmp	r3, #1
 800565c:	d10d      	bne.n	800567a <I2C_WaitOnFlagUntilTimeout+0xca>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	43da      	mvns	r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	4013      	ands	r3, r2
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	bf0c      	ite	eq
 8005670:	2301      	moveq	r3, #1
 8005672:	2300      	movne	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	e00c      	b.n	8005694 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	43da      	mvns	r2, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	4013      	ands	r3, r2
 8005686:	b29b      	uxth	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	bf0c      	ite	eq
 800568c:	2301      	moveq	r3, #1
 800568e:	2300      	movne	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	461a      	mov	r2, r3
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	429a      	cmp	r2, r3
 8005698:	d093      	beq.n	80055c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056b2:	e071      	b.n	8005798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056c2:	d123      	bne.n	800570c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f8:	f043 0204 	orr.w	r2, r3, #4
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e067      	b.n	80057dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005712:	d041      	beq.n	8005798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005714:	f7fc ff36 	bl	8002584 <HAL_GetTick>
 8005718:	4602      	mov	r2, r0
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	d302      	bcc.n	800572a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d136      	bne.n	8005798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	0c1b      	lsrs	r3, r3, #16
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	d10c      	bne.n	800574e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	43da      	mvns	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4013      	ands	r3, r2
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	bf14      	ite	ne
 8005746:	2301      	movne	r3, #1
 8005748:	2300      	moveq	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	e00b      	b.n	8005766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	43da      	mvns	r2, r3
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	4013      	ands	r3, r2
 800575a:	b29b      	uxth	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	bf14      	ite	ne
 8005760:	2301      	movne	r3, #1
 8005762:	2300      	moveq	r3, #0
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d016      	beq.n	8005798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005784:	f043 0220 	orr.w	r2, r3, #32
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e021      	b.n	80057dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	0c1b      	lsrs	r3, r3, #16
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d10c      	bne.n	80057bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	43da      	mvns	r2, r3
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4013      	ands	r3, r2
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	bf14      	ite	ne
 80057b4:	2301      	movne	r3, #1
 80057b6:	2300      	moveq	r3, #0
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	e00b      	b.n	80057d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	43da      	mvns	r2, r3
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	4013      	ands	r3, r2
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bf14      	ite	ne
 80057ce:	2301      	movne	r3, #1
 80057d0:	2300      	moveq	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f47f af6d 	bne.w	80056b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3710      	adds	r7, #16
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057f0:	e034      	b.n	800585c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 f915 	bl	8005a22 <I2C_IsAcknowledgeFailed>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e034      	b.n	800586c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005808:	d028      	beq.n	800585c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800580a:	f7fc febb 	bl	8002584 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	429a      	cmp	r2, r3
 8005818:	d302      	bcc.n	8005820 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d11d      	bne.n	800585c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800582a:	2b80      	cmp	r3, #128	@ 0x80
 800582c:	d016      	beq.n	800585c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005848:	f043 0220 	orr.w	r2, r3, #32
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e007      	b.n	800586c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005866:	2b80      	cmp	r3, #128	@ 0x80
 8005868:	d1c3      	bne.n	80057f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	60f8      	str	r0, [r7, #12]
 800587c:	60b9      	str	r1, [r7, #8]
 800587e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005880:	e034      	b.n	80058ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 f8cd 	bl	8005a22 <I2C_IsAcknowledgeFailed>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e034      	b.n	80058fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005898:	d028      	beq.n	80058ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800589a:	f7fc fe73 	bl	8002584 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d302      	bcc.n	80058b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d11d      	bne.n	80058ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d016      	beq.n	80058ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d8:	f043 0220 	orr.w	r2, r3, #32
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e007      	b.n	80058fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f003 0304 	and.w	r3, r3, #4
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	d1c3      	bne.n	8005882 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005910:	4b13      	ldr	r3, [pc, #76]	@ (8005960 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	08db      	lsrs	r3, r3, #3
 8005916:	4a13      	ldr	r2, [pc, #76]	@ (8005964 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005918:	fba2 2303 	umull	r2, r3, r2, r3
 800591c:	0a1a      	lsrs	r2, r3, #8
 800591e:	4613      	mov	r3, r2
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	4413      	add	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3b01      	subs	r3, #1
 800592a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d107      	bne.n	8005942 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005936:	f043 0220 	orr.w	r2, r3, #32
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e008      	b.n	8005954 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800594c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005950:	d0e9      	beq.n	8005926 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	20000000 	.word	0x20000000
 8005964:	14f8b589 	.word	0x14f8b589

08005968 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005974:	e049      	b.n	8005a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	2b10      	cmp	r3, #16
 8005982:	d119      	bne.n	80059b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0210 	mvn.w	r2, #16
 800598c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e030      	b.n	8005a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059b8:	f7fc fde4 	bl	8002584 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d302      	bcc.n	80059ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d11d      	bne.n	8005a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d8:	2b40      	cmp	r3, #64	@ 0x40
 80059da:	d016      	beq.n	8005a0a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2220      	movs	r2, #32
 80059e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f6:	f043 0220 	orr.w	r2, r3, #32
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e007      	b.n	8005a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a14:	2b40      	cmp	r3, #64	@ 0x40
 8005a16:	d1ae      	bne.n	8005976 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3710      	adds	r7, #16
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a38:	d11b      	bne.n	8005a72 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a42:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5e:	f043 0204 	orr.w	r2, r3, #4
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005a90:	d103      	bne.n	8005a9a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a98:	e007      	b.n	8005aaa <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a9e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005aa2:	d102      	bne.n	8005aaa <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2208      	movs	r2, #8
 8005aa8:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005aaa:	bf00      	nop
 8005aac:	370c      	adds	r7, #12
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b20      	cmp	r3, #32
 8005aca:	d129      	bne.n	8005b20 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2224      	movs	r2, #36	@ 0x24
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0201 	bic.w	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0210 	bic.w	r2, r2, #16
 8005af2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	681a      	ldr	r2, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f042 0201 	orr.w	r2, r2, #1
 8005b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e000      	b.n	8005b22 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005b20:	2302      	movs	r3, #2
  }
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	370c      	adds	r7, #12
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b20      	cmp	r3, #32
 8005b46:	d12a      	bne.n	8005b9e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2224      	movs	r2, #36	@ 0x24
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0201 	bic.w	r2, r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b66:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005b68:	89fb      	ldrh	r3, [r7, #14]
 8005b6a:	f023 030f 	bic.w	r3, r3, #15
 8005b6e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	89fb      	ldrh	r3, [r7, #14]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	89fa      	ldrh	r2, [r7, #14]
 8005b80:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f042 0201 	orr.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2220      	movs	r2, #32
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e000      	b.n	8005ba0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005b9e:	2302      	movs	r3, #2
  }
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3714      	adds	r7, #20
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	603b      	str	r3, [r7, #0]
 8005bba:	4b20      	ldr	r3, [pc, #128]	@ (8005c3c <HAL_PWREx_EnableOverDrive+0x90>)
 8005bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8005c3c <HAL_PWREx_EnableOverDrive+0x90>)
 8005bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c3c <HAL_PWREx_EnableOverDrive+0x90>)
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bce:	603b      	str	r3, [r7, #0]
 8005bd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c40 <HAL_PWREx_EnableOverDrive+0x94>)
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005bd8:	f7fc fcd4 	bl	8002584 <HAL_GetTick>
 8005bdc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005bde:	e009      	b.n	8005bf4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005be0:	f7fc fcd0 	bl	8002584 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005bee:	d901      	bls.n	8005bf4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e01f      	b.n	8005c34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005bf4:	4b13      	ldr	r3, [pc, #76]	@ (8005c44 <HAL_PWREx_EnableOverDrive+0x98>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c00:	d1ee      	bne.n	8005be0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005c02:	4b11      	ldr	r3, [pc, #68]	@ (8005c48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005c04:	2201      	movs	r2, #1
 8005c06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c08:	f7fc fcbc 	bl	8002584 <HAL_GetTick>
 8005c0c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c0e:	e009      	b.n	8005c24 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005c10:	f7fc fcb8 	bl	8002584 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c1e:	d901      	bls.n	8005c24 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e007      	b.n	8005c34 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005c24:	4b07      	ldr	r3, [pc, #28]	@ (8005c44 <HAL_PWREx_EnableOverDrive+0x98>)
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c30:	d1ee      	bne.n	8005c10 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	420e0040 	.word	0x420e0040
 8005c44:	40007000 	.word	0x40007000
 8005c48:	420e0044 	.word	0x420e0044

08005c4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e267      	b.n	800612e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d075      	beq.n	8005d56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c6a:	4b88      	ldr	r3, [pc, #544]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f003 030c 	and.w	r3, r3, #12
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d00c      	beq.n	8005c90 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c76:	4b85      	ldr	r3, [pc, #532]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d112      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c82:	4b82      	ldr	r3, [pc, #520]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c8e:	d10b      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c90:	4b7e      	ldr	r3, [pc, #504]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d05b      	beq.n	8005d54 <HAL_RCC_OscConfig+0x108>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d157      	bne.n	8005d54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e242      	b.n	800612e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cb0:	d106      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x74>
 8005cb2:	4b76      	ldr	r3, [pc, #472]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a75      	ldr	r2, [pc, #468]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	e01d      	b.n	8005cfc <HAL_RCC_OscConfig+0xb0>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cc8:	d10c      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x98>
 8005cca:	4b70      	ldr	r3, [pc, #448]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a6f      	ldr	r2, [pc, #444]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005cd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005cd4:	6013      	str	r3, [r2, #0]
 8005cd6:	4b6d      	ldr	r3, [pc, #436]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a6c      	ldr	r2, [pc, #432]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	e00b      	b.n	8005cfc <HAL_RCC_OscConfig+0xb0>
 8005ce4:	4b69      	ldr	r3, [pc, #420]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a68      	ldr	r2, [pc, #416]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005cea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	4b66      	ldr	r3, [pc, #408]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a65      	ldr	r2, [pc, #404]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005cf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d013      	beq.n	8005d2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d04:	f7fc fc3e 	bl	8002584 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d0c:	f7fc fc3a 	bl	8002584 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b64      	cmp	r3, #100	@ 0x64
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e207      	b.n	800612e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d1e:	4b5b      	ldr	r3, [pc, #364]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0f0      	beq.n	8005d0c <HAL_RCC_OscConfig+0xc0>
 8005d2a:	e014      	b.n	8005d56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2c:	f7fc fc2a 	bl	8002584 <HAL_GetTick>
 8005d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d32:	e008      	b.n	8005d46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d34:	f7fc fc26 	bl	8002584 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b64      	cmp	r3, #100	@ 0x64
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e1f3      	b.n	800612e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d46:	4b51      	ldr	r3, [pc, #324]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1f0      	bne.n	8005d34 <HAL_RCC_OscConfig+0xe8>
 8005d52:	e000      	b.n	8005d56 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0302 	and.w	r3, r3, #2
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d063      	beq.n	8005e2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d62:	4b4a      	ldr	r3, [pc, #296]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 030c 	and.w	r3, r3, #12
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00b      	beq.n	8005d86 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d6e:	4b47      	ldr	r3, [pc, #284]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005d76:	2b08      	cmp	r3, #8
 8005d78:	d11c      	bne.n	8005db4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d7a:	4b44      	ldr	r3, [pc, #272]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d116      	bne.n	8005db4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d86:	4b41      	ldr	r3, [pc, #260]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d005      	beq.n	8005d9e <HAL_RCC_OscConfig+0x152>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d001      	beq.n	8005d9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e1c7      	b.n	800612e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	691b      	ldr	r3, [r3, #16]
 8005daa:	00db      	lsls	r3, r3, #3
 8005dac:	4937      	ldr	r1, [pc, #220]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005dae:	4313      	orrs	r3, r2
 8005db0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005db2:	e03a      	b.n	8005e2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d020      	beq.n	8005dfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dbc:	4b34      	ldr	r3, [pc, #208]	@ (8005e90 <HAL_RCC_OscConfig+0x244>)
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc2:	f7fc fbdf 	bl	8002584 <HAL_GetTick>
 8005dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc8:	e008      	b.n	8005ddc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dca:	f7fc fbdb 	bl	8002584 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e1a8      	b.n	800612e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0f0      	beq.n	8005dca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005de8:	4b28      	ldr	r3, [pc, #160]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	4925      	ldr	r1, [pc, #148]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	600b      	str	r3, [r1, #0]
 8005dfc:	e015      	b.n	8005e2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dfe:	4b24      	ldr	r3, [pc, #144]	@ (8005e90 <HAL_RCC_OscConfig+0x244>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e04:	f7fc fbbe 	bl	8002584 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e0a:	e008      	b.n	8005e1e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e0c:	f7fc fbba 	bl	8002584 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e187      	b.n	800612e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1f0      	bne.n	8005e0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d036      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d016      	beq.n	8005e6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e3e:	4b15      	ldr	r3, [pc, #84]	@ (8005e94 <HAL_RCC_OscConfig+0x248>)
 8005e40:	2201      	movs	r2, #1
 8005e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e44:	f7fc fb9e 	bl	8002584 <HAL_GetTick>
 8005e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e4a:	e008      	b.n	8005e5e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e4c:	f7fc fb9a 	bl	8002584 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d901      	bls.n	8005e5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e167      	b.n	800612e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e8c <HAL_RCC_OscConfig+0x240>)
 8005e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0f0      	beq.n	8005e4c <HAL_RCC_OscConfig+0x200>
 8005e6a:	e01b      	b.n	8005ea4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e6c:	4b09      	ldr	r3, [pc, #36]	@ (8005e94 <HAL_RCC_OscConfig+0x248>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e72:	f7fc fb87 	bl	8002584 <HAL_GetTick>
 8005e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e78:	e00e      	b.n	8005e98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e7a:	f7fc fb83 	bl	8002584 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d907      	bls.n	8005e98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e150      	b.n	800612e <HAL_RCC_OscConfig+0x4e2>
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	42470000 	.word	0x42470000
 8005e94:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e98:	4b88      	ldr	r3, [pc, #544]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005e9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1ea      	bne.n	8005e7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 8097 	beq.w	8005fe0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eb6:	4b81      	ldr	r3, [pc, #516]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10f      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	60bb      	str	r3, [r7, #8]
 8005ec6:	4b7d      	ldr	r3, [pc, #500]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eca:	4a7c      	ldr	r2, [pc, #496]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ed2:	4b7a      	ldr	r3, [pc, #488]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005eda:	60bb      	str	r3, [r7, #8]
 8005edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee2:	4b77      	ldr	r3, [pc, #476]	@ (80060c0 <HAL_RCC_OscConfig+0x474>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d118      	bne.n	8005f20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eee:	4b74      	ldr	r3, [pc, #464]	@ (80060c0 <HAL_RCC_OscConfig+0x474>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a73      	ldr	r2, [pc, #460]	@ (80060c0 <HAL_RCC_OscConfig+0x474>)
 8005ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005efa:	f7fc fb43 	bl	8002584 <HAL_GetTick>
 8005efe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f00:	e008      	b.n	8005f14 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f02:	f7fc fb3f 	bl	8002584 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d901      	bls.n	8005f14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e10c      	b.n	800612e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f14:	4b6a      	ldr	r3, [pc, #424]	@ (80060c0 <HAL_RCC_OscConfig+0x474>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0f0      	beq.n	8005f02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d106      	bne.n	8005f36 <HAL_RCC_OscConfig+0x2ea>
 8005f28:	4b64      	ldr	r3, [pc, #400]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2c:	4a63      	ldr	r2, [pc, #396]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005f2e:	f043 0301 	orr.w	r3, r3, #1
 8005f32:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f34:	e01c      	b.n	8005f70 <HAL_RCC_OscConfig+0x324>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	2b05      	cmp	r3, #5
 8005f3c:	d10c      	bne.n	8005f58 <HAL_RCC_OscConfig+0x30c>
 8005f3e:	4b5f      	ldr	r3, [pc, #380]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f42:	4a5e      	ldr	r2, [pc, #376]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005f44:	f043 0304 	orr.w	r3, r3, #4
 8005f48:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f4a:	4b5c      	ldr	r3, [pc, #368]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f4e:	4a5b      	ldr	r2, [pc, #364]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005f50:	f043 0301 	orr.w	r3, r3, #1
 8005f54:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f56:	e00b      	b.n	8005f70 <HAL_RCC_OscConfig+0x324>
 8005f58:	4b58      	ldr	r3, [pc, #352]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5c:	4a57      	ldr	r2, [pc, #348]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005f5e:	f023 0301 	bic.w	r3, r3, #1
 8005f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f64:	4b55      	ldr	r3, [pc, #340]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005f66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f68:	4a54      	ldr	r2, [pc, #336]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005f6a:	f023 0304 	bic.w	r3, r3, #4
 8005f6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d015      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f78:	f7fc fb04 	bl	8002584 <HAL_GetTick>
 8005f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f7e:	e00a      	b.n	8005f96 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f80:	f7fc fb00 	bl	8002584 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e0cb      	b.n	800612e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f96:	4b49      	ldr	r3, [pc, #292]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0ee      	beq.n	8005f80 <HAL_RCC_OscConfig+0x334>
 8005fa2:	e014      	b.n	8005fce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fa4:	f7fc faee 	bl	8002584 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005faa:	e00a      	b.n	8005fc2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fac:	f7fc faea 	bl	8002584 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d901      	bls.n	8005fc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e0b5      	b.n	800612e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1ee      	bne.n	8005fac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fce:	7dfb      	ldrb	r3, [r7, #23]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d105      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fd4:	4b39      	ldr	r3, [pc, #228]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd8:	4a38      	ldr	r2, [pc, #224]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005fda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fde:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f000 80a1 	beq.w	800612c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fea:	4b34      	ldr	r3, [pc, #208]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 030c 	and.w	r3, r3, #12
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d05c      	beq.n	80060b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d141      	bne.n	8006082 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ffe:	4b31      	ldr	r3, [pc, #196]	@ (80060c4 <HAL_RCC_OscConfig+0x478>)
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006004:	f7fc fabe 	bl	8002584 <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800600c:	f7fc faba 	bl	8002584 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e087      	b.n	800612e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800601e:	4b27      	ldr	r3, [pc, #156]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1f0      	bne.n	800600c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69da      	ldr	r2, [r3, #28]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006038:	019b      	lsls	r3, r3, #6
 800603a:	431a      	orrs	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006040:	085b      	lsrs	r3, r3, #1
 8006042:	3b01      	subs	r3, #1
 8006044:	041b      	lsls	r3, r3, #16
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800604c:	061b      	lsls	r3, r3, #24
 800604e:	491b      	ldr	r1, [pc, #108]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8006050:	4313      	orrs	r3, r2
 8006052:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006054:	4b1b      	ldr	r3, [pc, #108]	@ (80060c4 <HAL_RCC_OscConfig+0x478>)
 8006056:	2201      	movs	r2, #1
 8006058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800605a:	f7fc fa93 	bl	8002584 <HAL_GetTick>
 800605e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006060:	e008      	b.n	8006074 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006062:	f7fc fa8f 	bl	8002584 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d901      	bls.n	8006074 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e05c      	b.n	800612e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006074:	4b11      	ldr	r3, [pc, #68]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d0f0      	beq.n	8006062 <HAL_RCC_OscConfig+0x416>
 8006080:	e054      	b.n	800612c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006082:	4b10      	ldr	r3, [pc, #64]	@ (80060c4 <HAL_RCC_OscConfig+0x478>)
 8006084:	2200      	movs	r2, #0
 8006086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006088:	f7fc fa7c 	bl	8002584 <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006090:	f7fc fa78 	bl	8002584 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e045      	b.n	800612e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a2:	4b06      	ldr	r3, [pc, #24]	@ (80060bc <HAL_RCC_OscConfig+0x470>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1f0      	bne.n	8006090 <HAL_RCC_OscConfig+0x444>
 80060ae:	e03d      	b.n	800612c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d107      	bne.n	80060c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e038      	b.n	800612e <HAL_RCC_OscConfig+0x4e2>
 80060bc:	40023800 	.word	0x40023800
 80060c0:	40007000 	.word	0x40007000
 80060c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80060c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006138 <HAL_RCC_OscConfig+0x4ec>)
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d028      	beq.n	8006128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d121      	bne.n	8006128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d11a      	bne.n	8006128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80060f8:	4013      	ands	r3, r2
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006100:	4293      	cmp	r3, r2
 8006102:	d111      	bne.n	8006128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800610e:	085b      	lsrs	r3, r3, #1
 8006110:	3b01      	subs	r3, #1
 8006112:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006114:	429a      	cmp	r2, r3
 8006116:	d107      	bne.n	8006128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006122:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006124:	429a      	cmp	r2, r3
 8006126:	d001      	beq.n	800612c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e000      	b.n	800612e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	40023800 	.word	0x40023800

0800613c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e0cc      	b.n	80062ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006150:	4b68      	ldr	r3, [pc, #416]	@ (80062f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 030f 	and.w	r3, r3, #15
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	429a      	cmp	r2, r3
 800615c:	d90c      	bls.n	8006178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800615e:	4b65      	ldr	r3, [pc, #404]	@ (80062f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006166:	4b63      	ldr	r3, [pc, #396]	@ (80062f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d001      	beq.n	8006178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e0b8      	b.n	80062ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0302 	and.w	r3, r3, #2
 8006180:	2b00      	cmp	r3, #0
 8006182:	d020      	beq.n	80061c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b00      	cmp	r3, #0
 800618e:	d005      	beq.n	800619c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006190:	4b59      	ldr	r3, [pc, #356]	@ (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	4a58      	ldr	r2, [pc, #352]	@ (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006196:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800619a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061a8:	4b53      	ldr	r3, [pc, #332]	@ (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	4a52      	ldr	r2, [pc, #328]	@ (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80061ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80061b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061b4:	4b50      	ldr	r3, [pc, #320]	@ (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	494d      	ldr	r1, [pc, #308]	@ (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d044      	beq.n	800625c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d107      	bne.n	80061ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061da:	4b47      	ldr	r3, [pc, #284]	@ (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d119      	bne.n	800621a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e07f      	b.n	80062ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d003      	beq.n	80061fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d107      	bne.n	800620a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061fa:	4b3f      	ldr	r3, [pc, #252]	@ (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d109      	bne.n	800621a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e06f      	b.n	80062ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800620a:	4b3b      	ldr	r3, [pc, #236]	@ (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e067      	b.n	80062ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800621a:	4b37      	ldr	r3, [pc, #220]	@ (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	f023 0203 	bic.w	r2, r3, #3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	4934      	ldr	r1, [pc, #208]	@ (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006228:	4313      	orrs	r3, r2
 800622a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800622c:	f7fc f9aa 	bl	8002584 <HAL_GetTick>
 8006230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006232:	e00a      	b.n	800624a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006234:	f7fc f9a6 	bl	8002584 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006242:	4293      	cmp	r3, r2
 8006244:	d901      	bls.n	800624a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e04f      	b.n	80062ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800624a:	4b2b      	ldr	r3, [pc, #172]	@ (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f003 020c 	and.w	r2, r3, #12
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	429a      	cmp	r2, r3
 800625a:	d1eb      	bne.n	8006234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800625c:	4b25      	ldr	r3, [pc, #148]	@ (80062f4 <HAL_RCC_ClockConfig+0x1b8>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	429a      	cmp	r2, r3
 8006268:	d20c      	bcs.n	8006284 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800626a:	4b22      	ldr	r3, [pc, #136]	@ (80062f4 <HAL_RCC_ClockConfig+0x1b8>)
 800626c:	683a      	ldr	r2, [r7, #0]
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006272:	4b20      	ldr	r3, [pc, #128]	@ (80062f4 <HAL_RCC_ClockConfig+0x1b8>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d001      	beq.n	8006284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e032      	b.n	80062ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d008      	beq.n	80062a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006290:	4b19      	ldr	r3, [pc, #100]	@ (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	4916      	ldr	r1, [pc, #88]	@ (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d009      	beq.n	80062c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062ae:	4b12      	ldr	r3, [pc, #72]	@ (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	490e      	ldr	r1, [pc, #56]	@ (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80062be:	4313      	orrs	r3, r2
 80062c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062c2:	f000 f821 	bl	8006308 <HAL_RCC_GetSysClockFreq>
 80062c6:	4602      	mov	r2, r0
 80062c8:	4b0b      	ldr	r3, [pc, #44]	@ (80062f8 <HAL_RCC_ClockConfig+0x1bc>)
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	091b      	lsrs	r3, r3, #4
 80062ce:	f003 030f 	and.w	r3, r3, #15
 80062d2:	490a      	ldr	r1, [pc, #40]	@ (80062fc <HAL_RCC_ClockConfig+0x1c0>)
 80062d4:	5ccb      	ldrb	r3, [r1, r3]
 80062d6:	fa22 f303 	lsr.w	r3, r2, r3
 80062da:	4a09      	ldr	r2, [pc, #36]	@ (8006300 <HAL_RCC_ClockConfig+0x1c4>)
 80062dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80062de:	4b09      	ldr	r3, [pc, #36]	@ (8006304 <HAL_RCC_ClockConfig+0x1c8>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fc f90a 	bl	80024fc <HAL_InitTick>

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	40023c00 	.word	0x40023c00
 80062f8:	40023800 	.word	0x40023800
 80062fc:	0800e46c 	.word	0x0800e46c
 8006300:	20000000 	.word	0x20000000
 8006304:	20000004 	.word	0x20000004

08006308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800630c:	b094      	sub	sp, #80	@ 0x50
 800630e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006310:	2300      	movs	r3, #0
 8006312:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006318:	2300      	movs	r3, #0
 800631a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800631c:	2300      	movs	r3, #0
 800631e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006320:	4b79      	ldr	r3, [pc, #484]	@ (8006508 <HAL_RCC_GetSysClockFreq+0x200>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f003 030c 	and.w	r3, r3, #12
 8006328:	2b08      	cmp	r3, #8
 800632a:	d00d      	beq.n	8006348 <HAL_RCC_GetSysClockFreq+0x40>
 800632c:	2b08      	cmp	r3, #8
 800632e:	f200 80e1 	bhi.w	80064f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <HAL_RCC_GetSysClockFreq+0x34>
 8006336:	2b04      	cmp	r3, #4
 8006338:	d003      	beq.n	8006342 <HAL_RCC_GetSysClockFreq+0x3a>
 800633a:	e0db      	b.n	80064f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800633c:	4b73      	ldr	r3, [pc, #460]	@ (800650c <HAL_RCC_GetSysClockFreq+0x204>)
 800633e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006340:	e0db      	b.n	80064fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006342:	4b73      	ldr	r3, [pc, #460]	@ (8006510 <HAL_RCC_GetSysClockFreq+0x208>)
 8006344:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006346:	e0d8      	b.n	80064fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006348:	4b6f      	ldr	r3, [pc, #444]	@ (8006508 <HAL_RCC_GetSysClockFreq+0x200>)
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006350:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006352:	4b6d      	ldr	r3, [pc, #436]	@ (8006508 <HAL_RCC_GetSysClockFreq+0x200>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d063      	beq.n	8006426 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800635e:	4b6a      	ldr	r3, [pc, #424]	@ (8006508 <HAL_RCC_GetSysClockFreq+0x200>)
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	099b      	lsrs	r3, r3, #6
 8006364:	2200      	movs	r2, #0
 8006366:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006368:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800636a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006370:	633b      	str	r3, [r7, #48]	@ 0x30
 8006372:	2300      	movs	r3, #0
 8006374:	637b      	str	r3, [r7, #52]	@ 0x34
 8006376:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800637a:	4622      	mov	r2, r4
 800637c:	462b      	mov	r3, r5
 800637e:	f04f 0000 	mov.w	r0, #0
 8006382:	f04f 0100 	mov.w	r1, #0
 8006386:	0159      	lsls	r1, r3, #5
 8006388:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800638c:	0150      	lsls	r0, r2, #5
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	4621      	mov	r1, r4
 8006394:	1a51      	subs	r1, r2, r1
 8006396:	6139      	str	r1, [r7, #16]
 8006398:	4629      	mov	r1, r5
 800639a:	eb63 0301 	sbc.w	r3, r3, r1
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	f04f 0200 	mov.w	r2, #0
 80063a4:	f04f 0300 	mov.w	r3, #0
 80063a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063ac:	4659      	mov	r1, fp
 80063ae:	018b      	lsls	r3, r1, #6
 80063b0:	4651      	mov	r1, sl
 80063b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063b6:	4651      	mov	r1, sl
 80063b8:	018a      	lsls	r2, r1, #6
 80063ba:	4651      	mov	r1, sl
 80063bc:	ebb2 0801 	subs.w	r8, r2, r1
 80063c0:	4659      	mov	r1, fp
 80063c2:	eb63 0901 	sbc.w	r9, r3, r1
 80063c6:	f04f 0200 	mov.w	r2, #0
 80063ca:	f04f 0300 	mov.w	r3, #0
 80063ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063da:	4690      	mov	r8, r2
 80063dc:	4699      	mov	r9, r3
 80063de:	4623      	mov	r3, r4
 80063e0:	eb18 0303 	adds.w	r3, r8, r3
 80063e4:	60bb      	str	r3, [r7, #8]
 80063e6:	462b      	mov	r3, r5
 80063e8:	eb49 0303 	adc.w	r3, r9, r3
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80063fa:	4629      	mov	r1, r5
 80063fc:	024b      	lsls	r3, r1, #9
 80063fe:	4621      	mov	r1, r4
 8006400:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006404:	4621      	mov	r1, r4
 8006406:	024a      	lsls	r2, r1, #9
 8006408:	4610      	mov	r0, r2
 800640a:	4619      	mov	r1, r3
 800640c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800640e:	2200      	movs	r2, #0
 8006410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006412:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006414:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006418:	f7fa fc46 	bl	8000ca8 <__aeabi_uldivmod>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4613      	mov	r3, r2
 8006422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006424:	e058      	b.n	80064d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006426:	4b38      	ldr	r3, [pc, #224]	@ (8006508 <HAL_RCC_GetSysClockFreq+0x200>)
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	099b      	lsrs	r3, r3, #6
 800642c:	2200      	movs	r2, #0
 800642e:	4618      	mov	r0, r3
 8006430:	4611      	mov	r1, r2
 8006432:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006436:	623b      	str	r3, [r7, #32]
 8006438:	2300      	movs	r3, #0
 800643a:	627b      	str	r3, [r7, #36]	@ 0x24
 800643c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006440:	4642      	mov	r2, r8
 8006442:	464b      	mov	r3, r9
 8006444:	f04f 0000 	mov.w	r0, #0
 8006448:	f04f 0100 	mov.w	r1, #0
 800644c:	0159      	lsls	r1, r3, #5
 800644e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006452:	0150      	lsls	r0, r2, #5
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4641      	mov	r1, r8
 800645a:	ebb2 0a01 	subs.w	sl, r2, r1
 800645e:	4649      	mov	r1, r9
 8006460:	eb63 0b01 	sbc.w	fp, r3, r1
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	f04f 0300 	mov.w	r3, #0
 800646c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006470:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006474:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006478:	ebb2 040a 	subs.w	r4, r2, sl
 800647c:	eb63 050b 	sbc.w	r5, r3, fp
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	00eb      	lsls	r3, r5, #3
 800648a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800648e:	00e2      	lsls	r2, r4, #3
 8006490:	4614      	mov	r4, r2
 8006492:	461d      	mov	r5, r3
 8006494:	4643      	mov	r3, r8
 8006496:	18e3      	adds	r3, r4, r3
 8006498:	603b      	str	r3, [r7, #0]
 800649a:	464b      	mov	r3, r9
 800649c:	eb45 0303 	adc.w	r3, r5, r3
 80064a0:	607b      	str	r3, [r7, #4]
 80064a2:	f04f 0200 	mov.w	r2, #0
 80064a6:	f04f 0300 	mov.w	r3, #0
 80064aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064ae:	4629      	mov	r1, r5
 80064b0:	028b      	lsls	r3, r1, #10
 80064b2:	4621      	mov	r1, r4
 80064b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064b8:	4621      	mov	r1, r4
 80064ba:	028a      	lsls	r2, r1, #10
 80064bc:	4610      	mov	r0, r2
 80064be:	4619      	mov	r1, r3
 80064c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064c2:	2200      	movs	r2, #0
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	61fa      	str	r2, [r7, #28]
 80064c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064cc:	f7fa fbec 	bl	8000ca8 <__aeabi_uldivmod>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4613      	mov	r3, r2
 80064d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80064d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006508 <HAL_RCC_GetSysClockFreq+0x200>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	0c1b      	lsrs	r3, r3, #16
 80064de:	f003 0303 	and.w	r3, r3, #3
 80064e2:	3301      	adds	r3, #1
 80064e4:	005b      	lsls	r3, r3, #1
 80064e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80064e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80064ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064f2:	e002      	b.n	80064fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80064f4:	4b05      	ldr	r3, [pc, #20]	@ (800650c <HAL_RCC_GetSysClockFreq+0x204>)
 80064f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80064f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80064fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3750      	adds	r7, #80	@ 0x50
 8006500:	46bd      	mov	sp, r7
 8006502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006506:	bf00      	nop
 8006508:	40023800 	.word	0x40023800
 800650c:	00f42400 	.word	0x00f42400
 8006510:	007a1200 	.word	0x007a1200

08006514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006518:	4b03      	ldr	r3, [pc, #12]	@ (8006528 <HAL_RCC_GetHCLKFreq+0x14>)
 800651a:	681b      	ldr	r3, [r3, #0]
}
 800651c:	4618      	mov	r0, r3
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	20000000 	.word	0x20000000

0800652c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006530:	f7ff fff0 	bl	8006514 <HAL_RCC_GetHCLKFreq>
 8006534:	4602      	mov	r2, r0
 8006536:	4b05      	ldr	r3, [pc, #20]	@ (800654c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	0a9b      	lsrs	r3, r3, #10
 800653c:	f003 0307 	and.w	r3, r3, #7
 8006540:	4903      	ldr	r1, [pc, #12]	@ (8006550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006542:	5ccb      	ldrb	r3, [r1, r3]
 8006544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006548:	4618      	mov	r0, r3
 800654a:	bd80      	pop	{r7, pc}
 800654c:	40023800 	.word	0x40023800
 8006550:	0800e47c 	.word	0x0800e47c

08006554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006558:	f7ff ffdc 	bl	8006514 <HAL_RCC_GetHCLKFreq>
 800655c:	4602      	mov	r2, r0
 800655e:	4b05      	ldr	r3, [pc, #20]	@ (8006574 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	0b5b      	lsrs	r3, r3, #13
 8006564:	f003 0307 	and.w	r3, r3, #7
 8006568:	4903      	ldr	r1, [pc, #12]	@ (8006578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800656a:	5ccb      	ldrb	r3, [r1, r3]
 800656c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006570:	4618      	mov	r0, r3
 8006572:	bd80      	pop	{r7, pc}
 8006574:	40023800 	.word	0x40023800
 8006578:	0800e47c 	.word	0x0800e47c

0800657c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e041      	b.n	8006612 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fb fd58 	bl	8002058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2202      	movs	r2, #2
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3304      	adds	r3, #4
 80065b8:	4619      	mov	r1, r3
 80065ba:	4610      	mov	r0, r2
 80065bc:	f000 fd8a 	bl	80070d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b082      	sub	sp, #8
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d101      	bne.n	800662c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e041      	b.n	80066b0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b00      	cmp	r3, #0
 8006636:	d106      	bne.n	8006646 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f839 	bl	80066b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2202      	movs	r2, #2
 800664a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3304      	adds	r3, #4
 8006656:	4619      	mov	r1, r3
 8006658:	4610      	mov	r0, r2
 800665a:	f000 fd3b 	bl	80070d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	e041      	b.n	8006762 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d106      	bne.n	80066f8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f839 	bl	800676a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	3304      	adds	r3, #4
 8006708:	4619      	mov	r1, r3
 800670a:	4610      	mov	r0, r2
 800670c:	f000 fce2 	bl	80070d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800676a:	b480      	push	{r7}
 800676c:	b083      	sub	sp, #12
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006772:	bf00      	nop
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
	...

08006780 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d104      	bne.n	800679e <HAL_TIM_IC_Start_IT+0x1e>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800679a:	b2db      	uxtb	r3, r3
 800679c:	e013      	b.n	80067c6 <HAL_TIM_IC_Start_IT+0x46>
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d104      	bne.n	80067ae <HAL_TIM_IC_Start_IT+0x2e>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	e00b      	b.n	80067c6 <HAL_TIM_IC_Start_IT+0x46>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d104      	bne.n	80067be <HAL_TIM_IC_Start_IT+0x3e>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	e003      	b.n	80067c6 <HAL_TIM_IC_Start_IT+0x46>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d104      	bne.n	80067d8 <HAL_TIM_IC_Start_IT+0x58>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	e013      	b.n	8006800 <HAL_TIM_IC_Start_IT+0x80>
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d104      	bne.n	80067e8 <HAL_TIM_IC_Start_IT+0x68>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	e00b      	b.n	8006800 <HAL_TIM_IC_Start_IT+0x80>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d104      	bne.n	80067f8 <HAL_TIM_IC_Start_IT+0x78>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	e003      	b.n	8006800 <HAL_TIM_IC_Start_IT+0x80>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006802:	7bbb      	ldrb	r3, [r7, #14]
 8006804:	2b01      	cmp	r3, #1
 8006806:	d102      	bne.n	800680e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006808:	7b7b      	ldrb	r3, [r7, #13]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d001      	beq.n	8006812 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e0cc      	b.n	80069ac <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d104      	bne.n	8006822 <HAL_TIM_IC_Start_IT+0xa2>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006820:	e013      	b.n	800684a <HAL_TIM_IC_Start_IT+0xca>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b04      	cmp	r3, #4
 8006826:	d104      	bne.n	8006832 <HAL_TIM_IC_Start_IT+0xb2>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006830:	e00b      	b.n	800684a <HAL_TIM_IC_Start_IT+0xca>
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b08      	cmp	r3, #8
 8006836:	d104      	bne.n	8006842 <HAL_TIM_IC_Start_IT+0xc2>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006840:	e003      	b.n	800684a <HAL_TIM_IC_Start_IT+0xca>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2202      	movs	r2, #2
 8006846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d104      	bne.n	800685a <HAL_TIM_IC_Start_IT+0xda>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2202      	movs	r2, #2
 8006854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006858:	e013      	b.n	8006882 <HAL_TIM_IC_Start_IT+0x102>
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b04      	cmp	r3, #4
 800685e:	d104      	bne.n	800686a <HAL_TIM_IC_Start_IT+0xea>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2202      	movs	r2, #2
 8006864:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006868:	e00b      	b.n	8006882 <HAL_TIM_IC_Start_IT+0x102>
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b08      	cmp	r3, #8
 800686e:	d104      	bne.n	800687a <HAL_TIM_IC_Start_IT+0xfa>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006878:	e003      	b.n	8006882 <HAL_TIM_IC_Start_IT+0x102>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2202      	movs	r2, #2
 800687e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b0c      	cmp	r3, #12
 8006886:	d841      	bhi.n	800690c <HAL_TIM_IC_Start_IT+0x18c>
 8006888:	a201      	add	r2, pc, #4	@ (adr r2, 8006890 <HAL_TIM_IC_Start_IT+0x110>)
 800688a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688e:	bf00      	nop
 8006890:	080068c5 	.word	0x080068c5
 8006894:	0800690d 	.word	0x0800690d
 8006898:	0800690d 	.word	0x0800690d
 800689c:	0800690d 	.word	0x0800690d
 80068a0:	080068d7 	.word	0x080068d7
 80068a4:	0800690d 	.word	0x0800690d
 80068a8:	0800690d 	.word	0x0800690d
 80068ac:	0800690d 	.word	0x0800690d
 80068b0:	080068e9 	.word	0x080068e9
 80068b4:	0800690d 	.word	0x0800690d
 80068b8:	0800690d 	.word	0x0800690d
 80068bc:	0800690d 	.word	0x0800690d
 80068c0:	080068fb 	.word	0x080068fb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f042 0202 	orr.w	r2, r2, #2
 80068d2:	60da      	str	r2, [r3, #12]
      break;
 80068d4:	e01d      	b.n	8006912 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68da      	ldr	r2, [r3, #12]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f042 0204 	orr.w	r2, r2, #4
 80068e4:	60da      	str	r2, [r3, #12]
      break;
 80068e6:	e014      	b.n	8006912 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0208 	orr.w	r2, r2, #8
 80068f6:	60da      	str	r2, [r3, #12]
      break;
 80068f8:	e00b      	b.n	8006912 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68da      	ldr	r2, [r3, #12]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f042 0210 	orr.w	r2, r2, #16
 8006908:	60da      	str	r2, [r3, #12]
      break;
 800690a:	e002      	b.n	8006912 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	73fb      	strb	r3, [r7, #15]
      break;
 8006910:	bf00      	nop
  }

  if (status == HAL_OK)
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d148      	bne.n	80069aa <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2201      	movs	r2, #1
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	4618      	mov	r0, r3
 8006922:	f000 fff1 	bl	8007908 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a22      	ldr	r2, [pc, #136]	@ (80069b4 <HAL_TIM_IC_Start_IT+0x234>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d022      	beq.n	8006976 <HAL_TIM_IC_Start_IT+0x1f6>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006938:	d01d      	beq.n	8006976 <HAL_TIM_IC_Start_IT+0x1f6>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a1e      	ldr	r2, [pc, #120]	@ (80069b8 <HAL_TIM_IC_Start_IT+0x238>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d018      	beq.n	8006976 <HAL_TIM_IC_Start_IT+0x1f6>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a1c      	ldr	r2, [pc, #112]	@ (80069bc <HAL_TIM_IC_Start_IT+0x23c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d013      	beq.n	8006976 <HAL_TIM_IC_Start_IT+0x1f6>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1b      	ldr	r2, [pc, #108]	@ (80069c0 <HAL_TIM_IC_Start_IT+0x240>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00e      	beq.n	8006976 <HAL_TIM_IC_Start_IT+0x1f6>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a19      	ldr	r2, [pc, #100]	@ (80069c4 <HAL_TIM_IC_Start_IT+0x244>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d009      	beq.n	8006976 <HAL_TIM_IC_Start_IT+0x1f6>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a18      	ldr	r2, [pc, #96]	@ (80069c8 <HAL_TIM_IC_Start_IT+0x248>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d004      	beq.n	8006976 <HAL_TIM_IC_Start_IT+0x1f6>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a16      	ldr	r2, [pc, #88]	@ (80069cc <HAL_TIM_IC_Start_IT+0x24c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d111      	bne.n	800699a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f003 0307 	and.w	r3, r3, #7
 8006980:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b06      	cmp	r3, #6
 8006986:	d010      	beq.n	80069aa <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006998:	e007      	b.n	80069aa <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f042 0201 	orr.w	r2, r2, #1
 80069a8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	40010000 	.word	0x40010000
 80069b8:	40000400 	.word	0x40000400
 80069bc:	40000800 	.word	0x40000800
 80069c0:	40000c00 	.word	0x40000c00
 80069c4:	40010400 	.word	0x40010400
 80069c8:	40014000 	.word	0x40014000
 80069cc:	40001800 	.word	0x40001800

080069d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	f003 0302 	and.w	r3, r3, #2
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d020      	beq.n	8006a34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d01b      	beq.n	8006a34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f06f 0202 	mvn.w	r2, #2
 8006a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d003      	beq.n	8006a22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fa fdc8 	bl	80015b0 <HAL_TIM_IC_CaptureCallback>
 8006a20:	e005      	b.n	8006a2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fb38 	bl	8007098 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fb3f 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d020      	beq.n	8006a80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f003 0304 	and.w	r3, r3, #4
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d01b      	beq.n	8006a80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f06f 0204 	mvn.w	r2, #4
 8006a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2202      	movs	r2, #2
 8006a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d003      	beq.n	8006a6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7fa fda2 	bl	80015b0 <HAL_TIM_IC_CaptureCallback>
 8006a6c:	e005      	b.n	8006a7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fb12 	bl	8007098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fb19 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d020      	beq.n	8006acc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f003 0308 	and.w	r3, r3, #8
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d01b      	beq.n	8006acc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f06f 0208 	mvn.w	r2, #8
 8006a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2204      	movs	r2, #4
 8006aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69db      	ldr	r3, [r3, #28]
 8006aaa:	f003 0303 	and.w	r3, r3, #3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fa fd7c 	bl	80015b0 <HAL_TIM_IC_CaptureCallback>
 8006ab8:	e005      	b.n	8006ac6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 faec 	bl	8007098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 faf3 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f003 0310 	and.w	r3, r3, #16
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d020      	beq.n	8006b18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f003 0310 	and.w	r3, r3, #16
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d01b      	beq.n	8006b18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f06f 0210 	mvn.w	r2, #16
 8006ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2208      	movs	r2, #8
 8006aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d003      	beq.n	8006b06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7fa fd56 	bl	80015b0 <HAL_TIM_IC_CaptureCallback>
 8006b04:	e005      	b.n	8006b12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fac6 	bl	8007098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 facd 	bl	80070ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00c      	beq.n	8006b3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d007      	beq.n	8006b3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f06f 0201 	mvn.w	r2, #1
 8006b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 faa4 	bl	8007084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00c      	beq.n	8006b60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d007      	beq.n	8006b60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 ffd2 	bl	8007b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00c      	beq.n	8006b84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d007      	beq.n	8006b84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fa9e 	bl	80070c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f003 0320 	and.w	r3, r3, #32
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00c      	beq.n	8006ba8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f003 0320 	and.w	r3, r3, #32
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d007      	beq.n	8006ba8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f06f 0220 	mvn.w	r2, #32
 8006ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 ffa4 	bl	8007af0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <HAL_TIM_IC_ConfigChannel+0x1e>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e088      	b.n	8006ce0 <HAL_TIM_IC_ConfigChannel+0x130>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d11b      	bne.n	8006c14 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006bec:	f000 fcc8 	bl	8007580 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f022 020c 	bic.w	r2, r2, #12
 8006bfe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6999      	ldr	r1, [r3, #24]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	619a      	str	r2, [r3, #24]
 8006c12:	e060      	b.n	8006cd6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d11c      	bne.n	8006c54 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006c2a:	f000 fd4c 	bl	80076c6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	699a      	ldr	r2, [r3, #24]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006c3c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6999      	ldr	r1, [r3, #24]
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	021a      	lsls	r2, r3, #8
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	619a      	str	r2, [r3, #24]
 8006c52:	e040      	b.n	8006cd6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b08      	cmp	r3, #8
 8006c58:	d11b      	bne.n	8006c92 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006c6a:	f000 fd99 	bl	80077a0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 020c 	bic.w	r2, r2, #12
 8006c7c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69d9      	ldr	r1, [r3, #28]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	61da      	str	r2, [r3, #28]
 8006c90:	e021      	b.n	8006cd6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b0c      	cmp	r3, #12
 8006c96:	d11c      	bne.n	8006cd2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006ca8:	f000 fdb6 	bl	8007818 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	69da      	ldr	r2, [r3, #28]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006cba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	69d9      	ldr	r1, [r3, #28]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	021a      	lsls	r2, r3, #8
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	61da      	str	r2, [r3, #28]
 8006cd0:	e001      	b.n	8006cd6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3718      	adds	r7, #24
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d101      	bne.n	8006d06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d02:	2302      	movs	r3, #2
 8006d04:	e0ae      	b.n	8006e64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b0c      	cmp	r3, #12
 8006d12:	f200 809f 	bhi.w	8006e54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d16:	a201      	add	r2, pc, #4	@ (adr r2, 8006d1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1c:	08006d51 	.word	0x08006d51
 8006d20:	08006e55 	.word	0x08006e55
 8006d24:	08006e55 	.word	0x08006e55
 8006d28:	08006e55 	.word	0x08006e55
 8006d2c:	08006d91 	.word	0x08006d91
 8006d30:	08006e55 	.word	0x08006e55
 8006d34:	08006e55 	.word	0x08006e55
 8006d38:	08006e55 	.word	0x08006e55
 8006d3c:	08006dd3 	.word	0x08006dd3
 8006d40:	08006e55 	.word	0x08006e55
 8006d44:	08006e55 	.word	0x08006e55
 8006d48:	08006e55 	.word	0x08006e55
 8006d4c:	08006e13 	.word	0x08006e13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68b9      	ldr	r1, [r7, #8]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fa62 	bl	8007220 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	699a      	ldr	r2, [r3, #24]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0208 	orr.w	r2, r2, #8
 8006d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	699a      	ldr	r2, [r3, #24]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0204 	bic.w	r2, r2, #4
 8006d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	6999      	ldr	r1, [r3, #24]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	691a      	ldr	r2, [r3, #16]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	619a      	str	r2, [r3, #24]
      break;
 8006d8e:	e064      	b.n	8006e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68b9      	ldr	r1, [r7, #8]
 8006d96:	4618      	mov	r0, r3
 8006d98:	f000 fab2 	bl	8007300 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	699a      	ldr	r2, [r3, #24]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	6999      	ldr	r1, [r3, #24]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	691b      	ldr	r3, [r3, #16]
 8006dc6:	021a      	lsls	r2, r3, #8
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	619a      	str	r2, [r3, #24]
      break;
 8006dd0:	e043      	b.n	8006e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68b9      	ldr	r1, [r7, #8]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fb07 	bl	80073ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	69da      	ldr	r2, [r3, #28]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f042 0208 	orr.w	r2, r2, #8
 8006dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	69da      	ldr	r2, [r3, #28]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 0204 	bic.w	r2, r2, #4
 8006dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69d9      	ldr	r1, [r3, #28]
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	61da      	str	r2, [r3, #28]
      break;
 8006e10:	e023      	b.n	8006e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68b9      	ldr	r1, [r7, #8]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f000 fb5b 	bl	80074d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	69da      	ldr	r2, [r3, #28]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	69da      	ldr	r2, [r3, #28]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	69d9      	ldr	r1, [r3, #28]
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	021a      	lsls	r2, r3, #8
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	430a      	orrs	r2, r1
 8006e50:	61da      	str	r2, [r3, #28]
      break;
 8006e52:	e002      	b.n	8006e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	75fb      	strb	r3, [r7, #23]
      break;
 8006e58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <HAL_TIM_ConfigClockSource+0x1c>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e0b4      	b.n	8006ff2 <HAL_TIM_ConfigClockSource+0x186>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006eae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ec0:	d03e      	beq.n	8006f40 <HAL_TIM_ConfigClockSource+0xd4>
 8006ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ec6:	f200 8087 	bhi.w	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ece:	f000 8086 	beq.w	8006fde <HAL_TIM_ConfigClockSource+0x172>
 8006ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ed6:	d87f      	bhi.n	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ed8:	2b70      	cmp	r3, #112	@ 0x70
 8006eda:	d01a      	beq.n	8006f12 <HAL_TIM_ConfigClockSource+0xa6>
 8006edc:	2b70      	cmp	r3, #112	@ 0x70
 8006ede:	d87b      	bhi.n	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee0:	2b60      	cmp	r3, #96	@ 0x60
 8006ee2:	d050      	beq.n	8006f86 <HAL_TIM_ConfigClockSource+0x11a>
 8006ee4:	2b60      	cmp	r3, #96	@ 0x60
 8006ee6:	d877      	bhi.n	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee8:	2b50      	cmp	r3, #80	@ 0x50
 8006eea:	d03c      	beq.n	8006f66 <HAL_TIM_ConfigClockSource+0xfa>
 8006eec:	2b50      	cmp	r3, #80	@ 0x50
 8006eee:	d873      	bhi.n	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef0:	2b40      	cmp	r3, #64	@ 0x40
 8006ef2:	d058      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x13a>
 8006ef4:	2b40      	cmp	r3, #64	@ 0x40
 8006ef6:	d86f      	bhi.n	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef8:	2b30      	cmp	r3, #48	@ 0x30
 8006efa:	d064      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006efc:	2b30      	cmp	r3, #48	@ 0x30
 8006efe:	d86b      	bhi.n	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006f00:	2b20      	cmp	r3, #32
 8006f02:	d060      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	d867      	bhi.n	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d05c      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f0c:	2b10      	cmp	r3, #16
 8006f0e:	d05a      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f10:	e062      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f22:	f000 fcd1 	bl	80078c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	609a      	str	r2, [r3, #8]
      break;
 8006f3e:	e04f      	b.n	8006fe0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f50:	f000 fcba 	bl	80078c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689a      	ldr	r2, [r3, #8]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f62:	609a      	str	r2, [r3, #8]
      break;
 8006f64:	e03c      	b.n	8006fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f72:	461a      	mov	r2, r3
 8006f74:	f000 fb78 	bl	8007668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2150      	movs	r1, #80	@ 0x50
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f000 fc87 	bl	8007892 <TIM_ITRx_SetConfig>
      break;
 8006f84:	e02c      	b.n	8006fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f92:	461a      	mov	r2, r3
 8006f94:	f000 fbd4 	bl	8007740 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2160      	movs	r1, #96	@ 0x60
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fc77 	bl	8007892 <TIM_ITRx_SetConfig>
      break;
 8006fa4:	e01c      	b.n	8006fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f000 fb58 	bl	8007668 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2140      	movs	r1, #64	@ 0x40
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 fc67 	bl	8007892 <TIM_ITRx_SetConfig>
      break;
 8006fc4:	e00c      	b.n	8006fe0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	f000 fc5e 	bl	8007892 <TIM_ITRx_SetConfig>
      break;
 8006fd6:	e003      	b.n	8006fe0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	73fb      	strb	r3, [r7, #15]
      break;
 8006fdc:	e000      	b.n	8006fe0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b0c      	cmp	r3, #12
 800700e:	d831      	bhi.n	8007074 <HAL_TIM_ReadCapturedValue+0x78>
 8007010:	a201      	add	r2, pc, #4	@ (adr r2, 8007018 <HAL_TIM_ReadCapturedValue+0x1c>)
 8007012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007016:	bf00      	nop
 8007018:	0800704d 	.word	0x0800704d
 800701c:	08007075 	.word	0x08007075
 8007020:	08007075 	.word	0x08007075
 8007024:	08007075 	.word	0x08007075
 8007028:	08007057 	.word	0x08007057
 800702c:	08007075 	.word	0x08007075
 8007030:	08007075 	.word	0x08007075
 8007034:	08007075 	.word	0x08007075
 8007038:	08007061 	.word	0x08007061
 800703c:	08007075 	.word	0x08007075
 8007040:	08007075 	.word	0x08007075
 8007044:	08007075 	.word	0x08007075
 8007048:	0800706b 	.word	0x0800706b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007052:	60fb      	str	r3, [r7, #12]

      break;
 8007054:	e00f      	b.n	8007076 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705c:	60fb      	str	r3, [r7, #12]

      break;
 800705e:	e00a      	b.n	8007076 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007066:	60fb      	str	r3, [r7, #12]

      break;
 8007068:	e005      	b.n	8007076 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007070:	60fb      	str	r3, [r7, #12]

      break;
 8007072:	e000      	b.n	8007076 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007074:	bf00      	nop
  }

  return tmpreg;
 8007076:	68fb      	ldr	r3, [r7, #12]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a43      	ldr	r2, [pc, #268]	@ (80071f4 <TIM_Base_SetConfig+0x120>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d013      	beq.n	8007114 <TIM_Base_SetConfig+0x40>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f2:	d00f      	beq.n	8007114 <TIM_Base_SetConfig+0x40>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a40      	ldr	r2, [pc, #256]	@ (80071f8 <TIM_Base_SetConfig+0x124>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d00b      	beq.n	8007114 <TIM_Base_SetConfig+0x40>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a3f      	ldr	r2, [pc, #252]	@ (80071fc <TIM_Base_SetConfig+0x128>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d007      	beq.n	8007114 <TIM_Base_SetConfig+0x40>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a3e      	ldr	r2, [pc, #248]	@ (8007200 <TIM_Base_SetConfig+0x12c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d003      	beq.n	8007114 <TIM_Base_SetConfig+0x40>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a3d      	ldr	r2, [pc, #244]	@ (8007204 <TIM_Base_SetConfig+0x130>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d108      	bne.n	8007126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800711a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a32      	ldr	r2, [pc, #200]	@ (80071f4 <TIM_Base_SetConfig+0x120>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d02b      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007134:	d027      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a2f      	ldr	r2, [pc, #188]	@ (80071f8 <TIM_Base_SetConfig+0x124>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d023      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a2e      	ldr	r2, [pc, #184]	@ (80071fc <TIM_Base_SetConfig+0x128>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d01f      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a2d      	ldr	r2, [pc, #180]	@ (8007200 <TIM_Base_SetConfig+0x12c>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d01b      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a2c      	ldr	r2, [pc, #176]	@ (8007204 <TIM_Base_SetConfig+0x130>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d017      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a2b      	ldr	r2, [pc, #172]	@ (8007208 <TIM_Base_SetConfig+0x134>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d013      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a2a      	ldr	r2, [pc, #168]	@ (800720c <TIM_Base_SetConfig+0x138>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d00f      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a29      	ldr	r2, [pc, #164]	@ (8007210 <TIM_Base_SetConfig+0x13c>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d00b      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a28      	ldr	r2, [pc, #160]	@ (8007214 <TIM_Base_SetConfig+0x140>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d007      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a27      	ldr	r2, [pc, #156]	@ (8007218 <TIM_Base_SetConfig+0x144>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d003      	beq.n	8007186 <TIM_Base_SetConfig+0xb2>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a26      	ldr	r2, [pc, #152]	@ (800721c <TIM_Base_SetConfig+0x148>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d108      	bne.n	8007198 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800718c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	68fa      	ldr	r2, [r7, #12]
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	695b      	ldr	r3, [r3, #20]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	689a      	ldr	r2, [r3, #8]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a0e      	ldr	r2, [pc, #56]	@ (80071f4 <TIM_Base_SetConfig+0x120>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d003      	beq.n	80071c6 <TIM_Base_SetConfig+0xf2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a10      	ldr	r2, [pc, #64]	@ (8007204 <TIM_Base_SetConfig+0x130>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d103      	bne.n	80071ce <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	691a      	ldr	r2, [r3, #16]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f043 0204 	orr.w	r2, r3, #4
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	601a      	str	r2, [r3, #0]
}
 80071e6:	bf00      	nop
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	40010000 	.word	0x40010000
 80071f8:	40000400 	.word	0x40000400
 80071fc:	40000800 	.word	0x40000800
 8007200:	40000c00 	.word	0x40000c00
 8007204:	40010400 	.word	0x40010400
 8007208:	40014000 	.word	0x40014000
 800720c:	40014400 	.word	0x40014400
 8007210:	40014800 	.word	0x40014800
 8007214:	40001800 	.word	0x40001800
 8007218:	40001c00 	.word	0x40001c00
 800721c:	40002000 	.word	0x40002000

08007220 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	f023 0201 	bic.w	r2, r3, #1
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	699b      	ldr	r3, [r3, #24]
 8007246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800724e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f023 0303 	bic.w	r3, r3, #3
 8007256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f023 0302 	bic.w	r3, r3, #2
 8007268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4313      	orrs	r3, r2
 8007272:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	4a20      	ldr	r2, [pc, #128]	@ (80072f8 <TIM_OC1_SetConfig+0xd8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d003      	beq.n	8007284 <TIM_OC1_SetConfig+0x64>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	4a1f      	ldr	r2, [pc, #124]	@ (80072fc <TIM_OC1_SetConfig+0xdc>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d10c      	bne.n	800729e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f023 0308 	bic.w	r3, r3, #8
 800728a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	4313      	orrs	r3, r2
 8007294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f023 0304 	bic.w	r3, r3, #4
 800729c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a15      	ldr	r2, [pc, #84]	@ (80072f8 <TIM_OC1_SetConfig+0xd8>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d003      	beq.n	80072ae <TIM_OC1_SetConfig+0x8e>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a14      	ldr	r2, [pc, #80]	@ (80072fc <TIM_OC1_SetConfig+0xdc>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d111      	bne.n	80072d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	621a      	str	r2, [r3, #32]
}
 80072ec:	bf00      	nop
 80072ee:	371c      	adds	r7, #28
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	40010000 	.word	0x40010000
 80072fc:	40010400 	.word	0x40010400

08007300 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007300:	b480      	push	{r7}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a1b      	ldr	r3, [r3, #32]
 8007314:	f023 0210 	bic.w	r2, r3, #16
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800732e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	021b      	lsls	r3, r3, #8
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4313      	orrs	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f023 0320 	bic.w	r3, r3, #32
 800734a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	011b      	lsls	r3, r3, #4
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a22      	ldr	r2, [pc, #136]	@ (80073e4 <TIM_OC2_SetConfig+0xe4>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d003      	beq.n	8007368 <TIM_OC2_SetConfig+0x68>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a21      	ldr	r2, [pc, #132]	@ (80073e8 <TIM_OC2_SetConfig+0xe8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d10d      	bne.n	8007384 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800736e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	011b      	lsls	r3, r3, #4
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	4313      	orrs	r3, r2
 800737a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007382:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a17      	ldr	r2, [pc, #92]	@ (80073e4 <TIM_OC2_SetConfig+0xe4>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d003      	beq.n	8007394 <TIM_OC2_SetConfig+0x94>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a16      	ldr	r2, [pc, #88]	@ (80073e8 <TIM_OC2_SetConfig+0xe8>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d113      	bne.n	80073bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800739a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80073a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	695b      	ldr	r3, [r3, #20]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	621a      	str	r2, [r3, #32]
}
 80073d6:	bf00      	nop
 80073d8:	371c      	adds	r7, #28
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40010000 	.word	0x40010000
 80073e8:	40010400 	.word	0x40010400

080073ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800741a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 0303 	bic.w	r3, r3, #3
 8007422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	021b      	lsls	r3, r3, #8
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	4313      	orrs	r3, r2
 8007440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a21      	ldr	r2, [pc, #132]	@ (80074cc <TIM_OC3_SetConfig+0xe0>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d003      	beq.n	8007452 <TIM_OC3_SetConfig+0x66>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a20      	ldr	r2, [pc, #128]	@ (80074d0 <TIM_OC3_SetConfig+0xe4>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d10d      	bne.n	800746e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	021b      	lsls	r3, r3, #8
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	4313      	orrs	r3, r2
 8007464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800746c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a16      	ldr	r2, [pc, #88]	@ (80074cc <TIM_OC3_SetConfig+0xe0>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d003      	beq.n	800747e <TIM_OC3_SetConfig+0x92>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a15      	ldr	r2, [pc, #84]	@ (80074d0 <TIM_OC3_SetConfig+0xe4>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d113      	bne.n	80074a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800748c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	4313      	orrs	r3, r2
 8007498:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	621a      	str	r2, [r3, #32]
}
 80074c0:	bf00      	nop
 80074c2:	371c      	adds	r7, #28
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	40010000 	.word	0x40010000
 80074d0:	40010400 	.word	0x40010400

080074d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a1b      	ldr	r3, [r3, #32]
 80074e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800750a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	021b      	lsls	r3, r3, #8
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	4313      	orrs	r3, r2
 8007516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800751e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	031b      	lsls	r3, r3, #12
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	4313      	orrs	r3, r2
 800752a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a12      	ldr	r2, [pc, #72]	@ (8007578 <TIM_OC4_SetConfig+0xa4>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d003      	beq.n	800753c <TIM_OC4_SetConfig+0x68>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a11      	ldr	r2, [pc, #68]	@ (800757c <TIM_OC4_SetConfig+0xa8>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d109      	bne.n	8007550 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007542:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	695b      	ldr	r3, [r3, #20]
 8007548:	019b      	lsls	r3, r3, #6
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	4313      	orrs	r3, r2
 800754e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	685a      	ldr	r2, [r3, #4]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	693a      	ldr	r2, [r7, #16]
 8007568:	621a      	str	r2, [r3, #32]
}
 800756a:	bf00      	nop
 800756c:	371c      	adds	r7, #28
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	40010000 	.word	0x40010000
 800757c:	40010400 	.word	0x40010400

08007580 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
 800758c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6a1b      	ldr	r3, [r3, #32]
 8007598:	f023 0201 	bic.w	r2, r3, #1
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	4a28      	ldr	r2, [pc, #160]	@ (800764c <TIM_TI1_SetConfig+0xcc>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d01b      	beq.n	80075e6 <TIM_TI1_SetConfig+0x66>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075b4:	d017      	beq.n	80075e6 <TIM_TI1_SetConfig+0x66>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4a25      	ldr	r2, [pc, #148]	@ (8007650 <TIM_TI1_SetConfig+0xd0>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d013      	beq.n	80075e6 <TIM_TI1_SetConfig+0x66>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4a24      	ldr	r2, [pc, #144]	@ (8007654 <TIM_TI1_SetConfig+0xd4>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d00f      	beq.n	80075e6 <TIM_TI1_SetConfig+0x66>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	4a23      	ldr	r2, [pc, #140]	@ (8007658 <TIM_TI1_SetConfig+0xd8>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d00b      	beq.n	80075e6 <TIM_TI1_SetConfig+0x66>
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	4a22      	ldr	r2, [pc, #136]	@ (800765c <TIM_TI1_SetConfig+0xdc>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d007      	beq.n	80075e6 <TIM_TI1_SetConfig+0x66>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	4a21      	ldr	r2, [pc, #132]	@ (8007660 <TIM_TI1_SetConfig+0xe0>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d003      	beq.n	80075e6 <TIM_TI1_SetConfig+0x66>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	4a20      	ldr	r2, [pc, #128]	@ (8007664 <TIM_TI1_SetConfig+0xe4>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d101      	bne.n	80075ea <TIM_TI1_SetConfig+0x6a>
 80075e6:	2301      	movs	r3, #1
 80075e8:	e000      	b.n	80075ec <TIM_TI1_SetConfig+0x6c>
 80075ea:	2300      	movs	r3, #0
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d008      	beq.n	8007602 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f023 0303 	bic.w	r3, r3, #3
 80075f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	617b      	str	r3, [r7, #20]
 8007600:	e003      	b.n	800760a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f043 0301 	orr.w	r3, r3, #1
 8007608:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007610:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	011b      	lsls	r3, r3, #4
 8007616:	b2db      	uxtb	r3, r3
 8007618:	697a      	ldr	r2, [r7, #20]
 800761a:	4313      	orrs	r3, r2
 800761c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	f023 030a 	bic.w	r3, r3, #10
 8007624:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f003 030a 	and.w	r3, r3, #10
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	4313      	orrs	r3, r2
 8007630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	621a      	str	r2, [r3, #32]
}
 800763e:	bf00      	nop
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	40010000 	.word	0x40010000
 8007650:	40000400 	.word	0x40000400
 8007654:	40000800 	.word	0x40000800
 8007658:	40000c00 	.word	0x40000c00
 800765c:	40010400 	.word	0x40010400
 8007660:	40014000 	.word	0x40014000
 8007664:	40001800 	.word	0x40001800

08007668 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007668:	b480      	push	{r7}
 800766a:	b087      	sub	sp, #28
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	f023 0201 	bic.w	r2, r3, #1
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007692:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	011b      	lsls	r3, r3, #4
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	4313      	orrs	r3, r2
 800769c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f023 030a 	bic.w	r3, r3, #10
 80076a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	621a      	str	r2, [r3, #32]
}
 80076ba:	bf00      	nop
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b087      	sub	sp, #28
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60f8      	str	r0, [r7, #12]
 80076ce:	60b9      	str	r1, [r7, #8]
 80076d0:	607a      	str	r2, [r7, #4]
 80076d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	f023 0210 	bic.w	r2, r3, #16
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	021b      	lsls	r3, r3, #8
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007704:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	031b      	lsls	r3, r3, #12
 800770a:	b29b      	uxth	r3, r3
 800770c:	693a      	ldr	r2, [r7, #16]
 800770e:	4313      	orrs	r3, r2
 8007710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007718:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	4313      	orrs	r3, r2
 8007726:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	621a      	str	r2, [r3, #32]
}
 8007734:	bf00      	nop
 8007736:	371c      	adds	r7, #28
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007740:	b480      	push	{r7}
 8007742:	b087      	sub	sp, #28
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6a1b      	ldr	r3, [r3, #32]
 8007750:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	f023 0210 	bic.w	r2, r3, #16
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	699b      	ldr	r3, [r3, #24]
 8007762:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800776a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	031b      	lsls	r3, r3, #12
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	4313      	orrs	r3, r2
 8007774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800777c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	011b      	lsls	r3, r3, #4
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	4313      	orrs	r3, r2
 8007786:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	621a      	str	r2, [r3, #32]
}
 8007794:	bf00      	nop
 8007796:	371c      	adds	r7, #28
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
 80077ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6a1b      	ldr	r3, [r3, #32]
 80077b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f023 0303 	bic.w	r3, r3, #3
 80077cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	011b      	lsls	r3, r3, #4
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80077f0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	021b      	lsls	r3, r3, #8
 80077f6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	621a      	str	r2, [r3, #32]
}
 800780c:	bf00      	nop
 800780e:	371c      	adds	r7, #28
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007818:	b480      	push	{r7}
 800781a:	b087      	sub	sp, #28
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007844:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	021b      	lsls	r3, r3, #8
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	4313      	orrs	r3, r2
 800784e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007856:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	031b      	lsls	r3, r3, #12
 800785c:	b29b      	uxth	r3, r3
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	4313      	orrs	r3, r2
 8007862:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800786a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	031b      	lsls	r3, r3, #12
 8007870:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	4313      	orrs	r3, r2
 8007878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	621a      	str	r2, [r3, #32]
}
 8007886:	bf00      	nop
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007892:	b480      	push	{r7}
 8007894:	b085      	sub	sp, #20
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	f043 0307 	orr.w	r3, r3, #7
 80078b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	609a      	str	r2, [r3, #8]
}
 80078bc:	bf00      	nop
 80078be:	3714      	adds	r7, #20
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
 80078d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80078e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	021a      	lsls	r2, r3, #8
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	431a      	orrs	r2, r3
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	697a      	ldr	r2, [r7, #20]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	609a      	str	r2, [r3, #8]
}
 80078fc:	bf00      	nop
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007908:	b480      	push	{r7}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	f003 031f 	and.w	r3, r3, #31
 800791a:	2201      	movs	r2, #1
 800791c:	fa02 f303 	lsl.w	r3, r2, r3
 8007920:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6a1a      	ldr	r2, [r3, #32]
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	43db      	mvns	r3, r3
 800792a:	401a      	ands	r2, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6a1a      	ldr	r2, [r3, #32]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f003 031f 	and.w	r3, r3, #31
 800793a:	6879      	ldr	r1, [r7, #4]
 800793c:	fa01 f303 	lsl.w	r3, r1, r3
 8007940:	431a      	orrs	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	621a      	str	r2, [r3, #32]
}
 8007946:	bf00      	nop
 8007948:	371c      	adds	r7, #28
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
	...

08007954 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007964:	2b01      	cmp	r3, #1
 8007966:	d101      	bne.n	800796c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007968:	2302      	movs	r3, #2
 800796a:	e05a      	b.n	8007a22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007992:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	4313      	orrs	r3, r2
 800799c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a21      	ldr	r2, [pc, #132]	@ (8007a30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d022      	beq.n	80079f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079b8:	d01d      	beq.n	80079f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a1d      	ldr	r2, [pc, #116]	@ (8007a34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d018      	beq.n	80079f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007a38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d013      	beq.n	80079f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a1a      	ldr	r2, [pc, #104]	@ (8007a3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d00e      	beq.n	80079f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a18      	ldr	r2, [pc, #96]	@ (8007a40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d009      	beq.n	80079f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a17      	ldr	r2, [pc, #92]	@ (8007a44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d004      	beq.n	80079f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a15      	ldr	r2, [pc, #84]	@ (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d10c      	bne.n	8007a10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68ba      	ldr	r2, [r7, #8]
 8007a0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3714      	adds	r7, #20
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	40010000 	.word	0x40010000
 8007a34:	40000400 	.word	0x40000400
 8007a38:	40000800 	.word	0x40000800
 8007a3c:	40000c00 	.word	0x40000c00
 8007a40:	40010400 	.word	0x40010400
 8007a44:	40014000 	.word	0x40014000
 8007a48:	40001800 	.word	0x40001800

08007a4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d101      	bne.n	8007a68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a64:	2302      	movs	r3, #2
 8007a66:	e03d      	b.n	8007ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	695b      	ldr	r3, [r3, #20]
 8007ac0:	4313      	orrs	r3, r2
 8007ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d101      	bne.n	8007b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e042      	b.n	8007bb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d106      	bne.n	8007b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7fa fb2a 	bl	8002198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2224      	movs	r2, #36	@ 0x24
 8007b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f973 	bl	8007e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	691a      	ldr	r2, [r3, #16]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	695a      	ldr	r2, [r3, #20]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68da      	ldr	r2, [r3, #12]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b08a      	sub	sp, #40	@ 0x28
 8007bbc:	af02      	add	r7, sp, #8
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	603b      	str	r3, [r7, #0]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b20      	cmp	r3, #32
 8007bd6:	d175      	bne.n	8007cc4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d002      	beq.n	8007be4 <HAL_UART_Transmit+0x2c>
 8007bde:	88fb      	ldrh	r3, [r7, #6]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d101      	bne.n	8007be8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e06e      	b.n	8007cc6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2221      	movs	r2, #33	@ 0x21
 8007bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bf6:	f7fa fcc5 	bl	8002584 <HAL_GetTick>
 8007bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	88fa      	ldrh	r2, [r7, #6]
 8007c00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	88fa      	ldrh	r2, [r7, #6]
 8007c06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c10:	d108      	bne.n	8007c24 <HAL_UART_Transmit+0x6c>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d104      	bne.n	8007c24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	61bb      	str	r3, [r7, #24]
 8007c22:	e003      	b.n	8007c2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c2c:	e02e      	b.n	8007c8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	2200      	movs	r2, #0
 8007c36:	2180      	movs	r1, #128	@ 0x80
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f000 f848 	bl	8007cce <UART_WaitOnFlagUntilTimeout>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d005      	beq.n	8007c50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e03a      	b.n	8007cc6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10b      	bne.n	8007c6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	881b      	ldrh	r3, [r3, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007c66:	69bb      	ldr	r3, [r7, #24]
 8007c68:	3302      	adds	r3, #2
 8007c6a:	61bb      	str	r3, [r7, #24]
 8007c6c:	e007      	b.n	8007c7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c6e:	69fb      	ldr	r3, [r7, #28]
 8007c70:	781a      	ldrb	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	3b01      	subs	r3, #1
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1cb      	bne.n	8007c2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2140      	movs	r1, #64	@ 0x40
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 f814 	bl	8007cce <UART_WaitOnFlagUntilTimeout>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d005      	beq.n	8007cb8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e006      	b.n	8007cc6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2220      	movs	r2, #32
 8007cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	e000      	b.n	8007cc6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007cc4:	2302      	movs	r3, #2
  }
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3720      	adds	r7, #32
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b086      	sub	sp, #24
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	60f8      	str	r0, [r7, #12]
 8007cd6:	60b9      	str	r1, [r7, #8]
 8007cd8:	603b      	str	r3, [r7, #0]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cde:	e03b      	b.n	8007d58 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce6:	d037      	beq.n	8007d58 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ce8:	f7fa fc4c 	bl	8002584 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	6a3a      	ldr	r2, [r7, #32]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d302      	bcc.n	8007cfe <UART_WaitOnFlagUntilTimeout+0x30>
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e03a      	b.n	8007d78 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d023      	beq.n	8007d58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	2b80      	cmp	r3, #128	@ 0x80
 8007d14:	d020      	beq.n	8007d58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	2b40      	cmp	r3, #64	@ 0x40
 8007d1a:	d01d      	beq.n	8007d58 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 0308 	and.w	r3, r3, #8
 8007d26:	2b08      	cmp	r3, #8
 8007d28:	d116      	bne.n	8007d58 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	617b      	str	r3, [r7, #20]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	617b      	str	r3, [r7, #20]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	617b      	str	r3, [r7, #20]
 8007d3e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 f81d 	bl	8007d80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2208      	movs	r2, #8
 8007d4a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e00f      	b.n	8007d78 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	4013      	ands	r3, r2
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	bf0c      	ite	eq
 8007d68:	2301      	moveq	r3, #1
 8007d6a:	2300      	movne	r3, #0
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	461a      	mov	r2, r3
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d0b4      	beq.n	8007ce0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3718      	adds	r7, #24
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b095      	sub	sp, #84	@ 0x54
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	330c      	adds	r3, #12
 8007d8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d92:	e853 3f00 	ldrex	r3, [r3]
 8007d96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007d9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	330c      	adds	r3, #12
 8007da6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007da8:	643a      	str	r2, [r7, #64]	@ 0x40
 8007daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007dae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007db0:	e841 2300 	strex	r3, r2, [r1]
 8007db4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e5      	bne.n	8007d88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3314      	adds	r3, #20
 8007dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	e853 3f00 	ldrex	r3, [r3]
 8007dca:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	f023 0301 	bic.w	r3, r3, #1
 8007dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3314      	adds	r3, #20
 8007dda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ddc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007dde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007de2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e5      	bne.n	8007dbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d119      	bne.n	8007e2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	330c      	adds	r3, #12
 8007dfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	e853 3f00 	ldrex	r3, [r3]
 8007e06:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f023 0310 	bic.w	r3, r3, #16
 8007e0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	330c      	adds	r3, #12
 8007e16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e18:	61ba      	str	r2, [r7, #24]
 8007e1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1c:	6979      	ldr	r1, [r7, #20]
 8007e1e:	69ba      	ldr	r2, [r7, #24]
 8007e20:	e841 2300 	strex	r3, r2, [r1]
 8007e24:	613b      	str	r3, [r7, #16]
   return(result);
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1e5      	bne.n	8007df8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2220      	movs	r2, #32
 8007e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007e3a:	bf00      	nop
 8007e3c:	3754      	adds	r7, #84	@ 0x54
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
	...

08007e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e4c:	b0c0      	sub	sp, #256	@ 0x100
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e64:	68d9      	ldr	r1, [r3, #12]
 8007e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	ea40 0301 	orr.w	r3, r0, r1
 8007e70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e76:	689a      	ldr	r2, [r3, #8]
 8007e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	431a      	orrs	r2, r3
 8007e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e84:	695b      	ldr	r3, [r3, #20]
 8007e86:	431a      	orrs	r2, r3
 8007e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007ea0:	f021 010c 	bic.w	r1, r1, #12
 8007ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007eae:	430b      	orrs	r3, r1
 8007eb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ec2:	6999      	ldr	r1, [r3, #24]
 8007ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	ea40 0301 	orr.w	r3, r0, r1
 8007ece:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	4b8f      	ldr	r3, [pc, #572]	@ (8008114 <UART_SetConfig+0x2cc>)
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d005      	beq.n	8007ee8 <UART_SetConfig+0xa0>
 8007edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	4b8d      	ldr	r3, [pc, #564]	@ (8008118 <UART_SetConfig+0x2d0>)
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d104      	bne.n	8007ef2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ee8:	f7fe fb34 	bl	8006554 <HAL_RCC_GetPCLK2Freq>
 8007eec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007ef0:	e003      	b.n	8007efa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ef2:	f7fe fb1b 	bl	800652c <HAL_RCC_GetPCLK1Freq>
 8007ef6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007efe:	69db      	ldr	r3, [r3, #28]
 8007f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f04:	f040 810c 	bne.w	8008120 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007f16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007f1a:	4622      	mov	r2, r4
 8007f1c:	462b      	mov	r3, r5
 8007f1e:	1891      	adds	r1, r2, r2
 8007f20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007f22:	415b      	adcs	r3, r3
 8007f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	eb12 0801 	adds.w	r8, r2, r1
 8007f30:	4629      	mov	r1, r5
 8007f32:	eb43 0901 	adc.w	r9, r3, r1
 8007f36:	f04f 0200 	mov.w	r2, #0
 8007f3a:	f04f 0300 	mov.w	r3, #0
 8007f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f4a:	4690      	mov	r8, r2
 8007f4c:	4699      	mov	r9, r3
 8007f4e:	4623      	mov	r3, r4
 8007f50:	eb18 0303 	adds.w	r3, r8, r3
 8007f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f58:	462b      	mov	r3, r5
 8007f5a:	eb49 0303 	adc.w	r3, r9, r3
 8007f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007f72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007f76:	460b      	mov	r3, r1
 8007f78:	18db      	adds	r3, r3, r3
 8007f7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	eb42 0303 	adc.w	r3, r2, r3
 8007f82:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007f88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007f8c:	f7f8 fe8c 	bl	8000ca8 <__aeabi_uldivmod>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4b61      	ldr	r3, [pc, #388]	@ (800811c <UART_SetConfig+0x2d4>)
 8007f96:	fba3 2302 	umull	r2, r3, r3, r2
 8007f9a:	095b      	lsrs	r3, r3, #5
 8007f9c:	011c      	lsls	r4, r3, #4
 8007f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fa8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007fac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	464b      	mov	r3, r9
 8007fb4:	1891      	adds	r1, r2, r2
 8007fb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007fb8:	415b      	adcs	r3, r3
 8007fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007fc0:	4641      	mov	r1, r8
 8007fc2:	eb12 0a01 	adds.w	sl, r2, r1
 8007fc6:	4649      	mov	r1, r9
 8007fc8:	eb43 0b01 	adc.w	fp, r3, r1
 8007fcc:	f04f 0200 	mov.w	r2, #0
 8007fd0:	f04f 0300 	mov.w	r3, #0
 8007fd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007fd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fe0:	4692      	mov	sl, r2
 8007fe2:	469b      	mov	fp, r3
 8007fe4:	4643      	mov	r3, r8
 8007fe6:	eb1a 0303 	adds.w	r3, sl, r3
 8007fea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007fee:	464b      	mov	r3, r9
 8007ff0:	eb4b 0303 	adc.w	r3, fp, r3
 8007ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008004:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008008:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800800c:	460b      	mov	r3, r1
 800800e:	18db      	adds	r3, r3, r3
 8008010:	643b      	str	r3, [r7, #64]	@ 0x40
 8008012:	4613      	mov	r3, r2
 8008014:	eb42 0303 	adc.w	r3, r2, r3
 8008018:	647b      	str	r3, [r7, #68]	@ 0x44
 800801a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800801e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008022:	f7f8 fe41 	bl	8000ca8 <__aeabi_uldivmod>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	4611      	mov	r1, r2
 800802c:	4b3b      	ldr	r3, [pc, #236]	@ (800811c <UART_SetConfig+0x2d4>)
 800802e:	fba3 2301 	umull	r2, r3, r3, r1
 8008032:	095b      	lsrs	r3, r3, #5
 8008034:	2264      	movs	r2, #100	@ 0x64
 8008036:	fb02 f303 	mul.w	r3, r2, r3
 800803a:	1acb      	subs	r3, r1, r3
 800803c:	00db      	lsls	r3, r3, #3
 800803e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008042:	4b36      	ldr	r3, [pc, #216]	@ (800811c <UART_SetConfig+0x2d4>)
 8008044:	fba3 2302 	umull	r2, r3, r3, r2
 8008048:	095b      	lsrs	r3, r3, #5
 800804a:	005b      	lsls	r3, r3, #1
 800804c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008050:	441c      	add	r4, r3
 8008052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008056:	2200      	movs	r2, #0
 8008058:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800805c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008060:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008064:	4642      	mov	r2, r8
 8008066:	464b      	mov	r3, r9
 8008068:	1891      	adds	r1, r2, r2
 800806a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800806c:	415b      	adcs	r3, r3
 800806e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008070:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008074:	4641      	mov	r1, r8
 8008076:	1851      	adds	r1, r2, r1
 8008078:	6339      	str	r1, [r7, #48]	@ 0x30
 800807a:	4649      	mov	r1, r9
 800807c:	414b      	adcs	r3, r1
 800807e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008080:	f04f 0200 	mov.w	r2, #0
 8008084:	f04f 0300 	mov.w	r3, #0
 8008088:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800808c:	4659      	mov	r1, fp
 800808e:	00cb      	lsls	r3, r1, #3
 8008090:	4651      	mov	r1, sl
 8008092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008096:	4651      	mov	r1, sl
 8008098:	00ca      	lsls	r2, r1, #3
 800809a:	4610      	mov	r0, r2
 800809c:	4619      	mov	r1, r3
 800809e:	4603      	mov	r3, r0
 80080a0:	4642      	mov	r2, r8
 80080a2:	189b      	adds	r3, r3, r2
 80080a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080a8:	464b      	mov	r3, r9
 80080aa:	460a      	mov	r2, r1
 80080ac:	eb42 0303 	adc.w	r3, r2, r3
 80080b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80080c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80080c8:	460b      	mov	r3, r1
 80080ca:	18db      	adds	r3, r3, r3
 80080cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080ce:	4613      	mov	r3, r2
 80080d0:	eb42 0303 	adc.w	r3, r2, r3
 80080d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80080da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80080de:	f7f8 fde3 	bl	8000ca8 <__aeabi_uldivmod>
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	4b0d      	ldr	r3, [pc, #52]	@ (800811c <UART_SetConfig+0x2d4>)
 80080e8:	fba3 1302 	umull	r1, r3, r3, r2
 80080ec:	095b      	lsrs	r3, r3, #5
 80080ee:	2164      	movs	r1, #100	@ 0x64
 80080f0:	fb01 f303 	mul.w	r3, r1, r3
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	3332      	adds	r3, #50	@ 0x32
 80080fa:	4a08      	ldr	r2, [pc, #32]	@ (800811c <UART_SetConfig+0x2d4>)
 80080fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008100:	095b      	lsrs	r3, r3, #5
 8008102:	f003 0207 	and.w	r2, r3, #7
 8008106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4422      	add	r2, r4
 800810e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008110:	e106      	b.n	8008320 <UART_SetConfig+0x4d8>
 8008112:	bf00      	nop
 8008114:	40011000 	.word	0x40011000
 8008118:	40011400 	.word	0x40011400
 800811c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008124:	2200      	movs	r2, #0
 8008126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800812a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800812e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008132:	4642      	mov	r2, r8
 8008134:	464b      	mov	r3, r9
 8008136:	1891      	adds	r1, r2, r2
 8008138:	6239      	str	r1, [r7, #32]
 800813a:	415b      	adcs	r3, r3
 800813c:	627b      	str	r3, [r7, #36]	@ 0x24
 800813e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008142:	4641      	mov	r1, r8
 8008144:	1854      	adds	r4, r2, r1
 8008146:	4649      	mov	r1, r9
 8008148:	eb43 0501 	adc.w	r5, r3, r1
 800814c:	f04f 0200 	mov.w	r2, #0
 8008150:	f04f 0300 	mov.w	r3, #0
 8008154:	00eb      	lsls	r3, r5, #3
 8008156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800815a:	00e2      	lsls	r2, r4, #3
 800815c:	4614      	mov	r4, r2
 800815e:	461d      	mov	r5, r3
 8008160:	4643      	mov	r3, r8
 8008162:	18e3      	adds	r3, r4, r3
 8008164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008168:	464b      	mov	r3, r9
 800816a:	eb45 0303 	adc.w	r3, r5, r3
 800816e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800817e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008182:	f04f 0200 	mov.w	r2, #0
 8008186:	f04f 0300 	mov.w	r3, #0
 800818a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800818e:	4629      	mov	r1, r5
 8008190:	008b      	lsls	r3, r1, #2
 8008192:	4621      	mov	r1, r4
 8008194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008198:	4621      	mov	r1, r4
 800819a:	008a      	lsls	r2, r1, #2
 800819c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80081a0:	f7f8 fd82 	bl	8000ca8 <__aeabi_uldivmod>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	4b60      	ldr	r3, [pc, #384]	@ (800832c <UART_SetConfig+0x4e4>)
 80081aa:	fba3 2302 	umull	r2, r3, r3, r2
 80081ae:	095b      	lsrs	r3, r3, #5
 80081b0:	011c      	lsls	r4, r3, #4
 80081b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80081c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80081c4:	4642      	mov	r2, r8
 80081c6:	464b      	mov	r3, r9
 80081c8:	1891      	adds	r1, r2, r2
 80081ca:	61b9      	str	r1, [r7, #24]
 80081cc:	415b      	adcs	r3, r3
 80081ce:	61fb      	str	r3, [r7, #28]
 80081d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081d4:	4641      	mov	r1, r8
 80081d6:	1851      	adds	r1, r2, r1
 80081d8:	6139      	str	r1, [r7, #16]
 80081da:	4649      	mov	r1, r9
 80081dc:	414b      	adcs	r3, r1
 80081de:	617b      	str	r3, [r7, #20]
 80081e0:	f04f 0200 	mov.w	r2, #0
 80081e4:	f04f 0300 	mov.w	r3, #0
 80081e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081ec:	4659      	mov	r1, fp
 80081ee:	00cb      	lsls	r3, r1, #3
 80081f0:	4651      	mov	r1, sl
 80081f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081f6:	4651      	mov	r1, sl
 80081f8:	00ca      	lsls	r2, r1, #3
 80081fa:	4610      	mov	r0, r2
 80081fc:	4619      	mov	r1, r3
 80081fe:	4603      	mov	r3, r0
 8008200:	4642      	mov	r2, r8
 8008202:	189b      	adds	r3, r3, r2
 8008204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008208:	464b      	mov	r3, r9
 800820a:	460a      	mov	r2, r1
 800820c:	eb42 0303 	adc.w	r3, r2, r3
 8008210:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800821e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008220:	f04f 0200 	mov.w	r2, #0
 8008224:	f04f 0300 	mov.w	r3, #0
 8008228:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800822c:	4649      	mov	r1, r9
 800822e:	008b      	lsls	r3, r1, #2
 8008230:	4641      	mov	r1, r8
 8008232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008236:	4641      	mov	r1, r8
 8008238:	008a      	lsls	r2, r1, #2
 800823a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800823e:	f7f8 fd33 	bl	8000ca8 <__aeabi_uldivmod>
 8008242:	4602      	mov	r2, r0
 8008244:	460b      	mov	r3, r1
 8008246:	4611      	mov	r1, r2
 8008248:	4b38      	ldr	r3, [pc, #224]	@ (800832c <UART_SetConfig+0x4e4>)
 800824a:	fba3 2301 	umull	r2, r3, r3, r1
 800824e:	095b      	lsrs	r3, r3, #5
 8008250:	2264      	movs	r2, #100	@ 0x64
 8008252:	fb02 f303 	mul.w	r3, r2, r3
 8008256:	1acb      	subs	r3, r1, r3
 8008258:	011b      	lsls	r3, r3, #4
 800825a:	3332      	adds	r3, #50	@ 0x32
 800825c:	4a33      	ldr	r2, [pc, #204]	@ (800832c <UART_SetConfig+0x4e4>)
 800825e:	fba2 2303 	umull	r2, r3, r2, r3
 8008262:	095b      	lsrs	r3, r3, #5
 8008264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008268:	441c      	add	r4, r3
 800826a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800826e:	2200      	movs	r2, #0
 8008270:	673b      	str	r3, [r7, #112]	@ 0x70
 8008272:	677a      	str	r2, [r7, #116]	@ 0x74
 8008274:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008278:	4642      	mov	r2, r8
 800827a:	464b      	mov	r3, r9
 800827c:	1891      	adds	r1, r2, r2
 800827e:	60b9      	str	r1, [r7, #8]
 8008280:	415b      	adcs	r3, r3
 8008282:	60fb      	str	r3, [r7, #12]
 8008284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008288:	4641      	mov	r1, r8
 800828a:	1851      	adds	r1, r2, r1
 800828c:	6039      	str	r1, [r7, #0]
 800828e:	4649      	mov	r1, r9
 8008290:	414b      	adcs	r3, r1
 8008292:	607b      	str	r3, [r7, #4]
 8008294:	f04f 0200 	mov.w	r2, #0
 8008298:	f04f 0300 	mov.w	r3, #0
 800829c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80082a0:	4659      	mov	r1, fp
 80082a2:	00cb      	lsls	r3, r1, #3
 80082a4:	4651      	mov	r1, sl
 80082a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082aa:	4651      	mov	r1, sl
 80082ac:	00ca      	lsls	r2, r1, #3
 80082ae:	4610      	mov	r0, r2
 80082b0:	4619      	mov	r1, r3
 80082b2:	4603      	mov	r3, r0
 80082b4:	4642      	mov	r2, r8
 80082b6:	189b      	adds	r3, r3, r2
 80082b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082ba:	464b      	mov	r3, r9
 80082bc:	460a      	mov	r2, r1
 80082be:	eb42 0303 	adc.w	r3, r2, r3
 80082c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80082ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80082d0:	f04f 0200 	mov.w	r2, #0
 80082d4:	f04f 0300 	mov.w	r3, #0
 80082d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80082dc:	4649      	mov	r1, r9
 80082de:	008b      	lsls	r3, r1, #2
 80082e0:	4641      	mov	r1, r8
 80082e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082e6:	4641      	mov	r1, r8
 80082e8:	008a      	lsls	r2, r1, #2
 80082ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80082ee:	f7f8 fcdb 	bl	8000ca8 <__aeabi_uldivmod>
 80082f2:	4602      	mov	r2, r0
 80082f4:	460b      	mov	r3, r1
 80082f6:	4b0d      	ldr	r3, [pc, #52]	@ (800832c <UART_SetConfig+0x4e4>)
 80082f8:	fba3 1302 	umull	r1, r3, r3, r2
 80082fc:	095b      	lsrs	r3, r3, #5
 80082fe:	2164      	movs	r1, #100	@ 0x64
 8008300:	fb01 f303 	mul.w	r3, r1, r3
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	011b      	lsls	r3, r3, #4
 8008308:	3332      	adds	r3, #50	@ 0x32
 800830a:	4a08      	ldr	r2, [pc, #32]	@ (800832c <UART_SetConfig+0x4e4>)
 800830c:	fba2 2303 	umull	r2, r3, r2, r3
 8008310:	095b      	lsrs	r3, r3, #5
 8008312:	f003 020f 	and.w	r2, r3, #15
 8008316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4422      	add	r2, r4
 800831e:	609a      	str	r2, [r3, #8]
}
 8008320:	bf00      	nop
 8008322:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008326:	46bd      	mov	sp, r7
 8008328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800832c:	51eb851f 	.word	0x51eb851f

08008330 <__NVIC_SetPriority>:
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	4603      	mov	r3, r0
 8008338:	6039      	str	r1, [r7, #0]
 800833a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800833c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008340:	2b00      	cmp	r3, #0
 8008342:	db0a      	blt.n	800835a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	b2da      	uxtb	r2, r3
 8008348:	490c      	ldr	r1, [pc, #48]	@ (800837c <__NVIC_SetPriority+0x4c>)
 800834a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800834e:	0112      	lsls	r2, r2, #4
 8008350:	b2d2      	uxtb	r2, r2
 8008352:	440b      	add	r3, r1
 8008354:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008358:	e00a      	b.n	8008370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	b2da      	uxtb	r2, r3
 800835e:	4908      	ldr	r1, [pc, #32]	@ (8008380 <__NVIC_SetPriority+0x50>)
 8008360:	79fb      	ldrb	r3, [r7, #7]
 8008362:	f003 030f 	and.w	r3, r3, #15
 8008366:	3b04      	subs	r3, #4
 8008368:	0112      	lsls	r2, r2, #4
 800836a:	b2d2      	uxtb	r2, r2
 800836c:	440b      	add	r3, r1
 800836e:	761a      	strb	r2, [r3, #24]
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	e000e100 	.word	0xe000e100
 8008380:	e000ed00 	.word	0xe000ed00

08008384 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008388:	2100      	movs	r1, #0
 800838a:	f06f 0004 	mvn.w	r0, #4
 800838e:	f7ff ffcf 	bl	8008330 <__NVIC_SetPriority>
#endif
}
 8008392:	bf00      	nop
 8008394:	bd80      	pop	{r7, pc}
	...

08008398 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800839e:	f3ef 8305 	mrs	r3, IPSR
 80083a2:	603b      	str	r3, [r7, #0]
  return(result);
 80083a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80083aa:	f06f 0305 	mvn.w	r3, #5
 80083ae:	607b      	str	r3, [r7, #4]
 80083b0:	e00c      	b.n	80083cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80083b2:	4b0a      	ldr	r3, [pc, #40]	@ (80083dc <osKernelInitialize+0x44>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d105      	bne.n	80083c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80083ba:	4b08      	ldr	r3, [pc, #32]	@ (80083dc <osKernelInitialize+0x44>)
 80083bc:	2201      	movs	r2, #1
 80083be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80083c0:	2300      	movs	r3, #0
 80083c2:	607b      	str	r3, [r7, #4]
 80083c4:	e002      	b.n	80083cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80083c6:	f04f 33ff 	mov.w	r3, #4294967295
 80083ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80083cc:	687b      	ldr	r3, [r7, #4]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	20000508 	.word	0x20000508

080083e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083e6:	f3ef 8305 	mrs	r3, IPSR
 80083ea:	603b      	str	r3, [r7, #0]
  return(result);
 80083ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80083f2:	f06f 0305 	mvn.w	r3, #5
 80083f6:	607b      	str	r3, [r7, #4]
 80083f8:	e010      	b.n	800841c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80083fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008428 <osKernelStart+0x48>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d109      	bne.n	8008416 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008402:	f7ff ffbf 	bl	8008384 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008406:	4b08      	ldr	r3, [pc, #32]	@ (8008428 <osKernelStart+0x48>)
 8008408:	2202      	movs	r2, #2
 800840a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800840c:	f001 f928 	bl	8009660 <vTaskStartScheduler>
      stat = osOK;
 8008410:	2300      	movs	r3, #0
 8008412:	607b      	str	r3, [r7, #4]
 8008414:	e002      	b.n	800841c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008416:	f04f 33ff 	mov.w	r3, #4294967295
 800841a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800841c:	687b      	ldr	r3, [r7, #4]
}
 800841e:	4618      	mov	r0, r3
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20000508 	.word	0x20000508

0800842c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800842c:	b580      	push	{r7, lr}
 800842e:	b08e      	sub	sp, #56	@ 0x38
 8008430:	af04      	add	r7, sp, #16
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008438:	2300      	movs	r3, #0
 800843a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800843c:	f3ef 8305 	mrs	r3, IPSR
 8008440:	617b      	str	r3, [r7, #20]
  return(result);
 8008442:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008444:	2b00      	cmp	r3, #0
 8008446:	d17e      	bne.n	8008546 <osThreadNew+0x11a>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d07b      	beq.n	8008546 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800844e:	2380      	movs	r3, #128	@ 0x80
 8008450:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008452:	2318      	movs	r3, #24
 8008454:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008456:	2300      	movs	r3, #0
 8008458:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800845a:	f04f 33ff 	mov.w	r3, #4294967295
 800845e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d045      	beq.n	80084f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <osThreadNew+0x48>
        name = attr->name;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d002      	beq.n	8008482 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008482:	69fb      	ldr	r3, [r7, #28]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d008      	beq.n	800849a <osThreadNew+0x6e>
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	2b38      	cmp	r3, #56	@ 0x38
 800848c:	d805      	bhi.n	800849a <osThreadNew+0x6e>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <osThreadNew+0x72>
        return (NULL);
 800849a:	2300      	movs	r3, #0
 800849c:	e054      	b.n	8008548 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	695b      	ldr	r3, [r3, #20]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d003      	beq.n	80084ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	695b      	ldr	r3, [r3, #20]
 80084aa:	089b      	lsrs	r3, r3, #2
 80084ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00e      	beq.n	80084d4 <osThreadNew+0xa8>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	2b5b      	cmp	r3, #91	@ 0x5b
 80084bc:	d90a      	bls.n	80084d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d006      	beq.n	80084d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d002      	beq.n	80084d4 <osThreadNew+0xa8>
        mem = 1;
 80084ce:	2301      	movs	r3, #1
 80084d0:	61bb      	str	r3, [r7, #24]
 80084d2:	e010      	b.n	80084f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10c      	bne.n	80084f6 <osThreadNew+0xca>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d108      	bne.n	80084f6 <osThreadNew+0xca>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	691b      	ldr	r3, [r3, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d104      	bne.n	80084f6 <osThreadNew+0xca>
          mem = 0;
 80084ec:	2300      	movs	r3, #0
 80084ee:	61bb      	str	r3, [r7, #24]
 80084f0:	e001      	b.n	80084f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d110      	bne.n	800851e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008504:	9202      	str	r2, [sp, #8]
 8008506:	9301      	str	r3, [sp, #4]
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	6a3a      	ldr	r2, [r7, #32]
 8008510:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f000 fec8 	bl	80092a8 <xTaskCreateStatic>
 8008518:	4603      	mov	r3, r0
 800851a:	613b      	str	r3, [r7, #16]
 800851c:	e013      	b.n	8008546 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d110      	bne.n	8008546 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008524:	6a3b      	ldr	r3, [r7, #32]
 8008526:	b29a      	uxth	r2, r3
 8008528:	f107 0310 	add.w	r3, r7, #16
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f000 ff16 	bl	8009368 <xTaskCreate>
 800853c:	4603      	mov	r3, r0
 800853e:	2b01      	cmp	r3, #1
 8008540:	d001      	beq.n	8008546 <osThreadNew+0x11a>
            hTask = NULL;
 8008542:	2300      	movs	r3, #0
 8008544:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008546:	693b      	ldr	r3, [r7, #16]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3728      	adds	r7, #40	@ 0x28
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008558:	f3ef 8305 	mrs	r3, IPSR
 800855c:	60bb      	str	r3, [r7, #8]
  return(result);
 800855e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <osDelay+0x1c>
    stat = osErrorISR;
 8008564:	f06f 0305 	mvn.w	r3, #5
 8008568:	60fb      	str	r3, [r7, #12]
 800856a:	e007      	b.n	800857c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800856c:	2300      	movs	r3, #0
 800856e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <osDelay+0x2c>
      vTaskDelay(ticks);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 f83c 	bl	80095f4 <vTaskDelay>
    }
  }

  return (stat);
 800857c:	68fb      	ldr	r3, [r7, #12]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008586:	b580      	push	{r7, lr}
 8008588:	b08a      	sub	sp, #40	@ 0x28
 800858a:	af02      	add	r7, sp, #8
 800858c:	60f8      	str	r0, [r7, #12]
 800858e:	60b9      	str	r1, [r7, #8]
 8008590:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008592:	2300      	movs	r3, #0
 8008594:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008596:	f3ef 8305 	mrs	r3, IPSR
 800859a:	613b      	str	r3, [r7, #16]
  return(result);
 800859c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d15f      	bne.n	8008662 <osMessageQueueNew+0xdc>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d05c      	beq.n	8008662 <osMessageQueueNew+0xdc>
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d059      	beq.n	8008662 <osMessageQueueNew+0xdc>
    mem = -1;
 80085ae:	f04f 33ff 	mov.w	r3, #4294967295
 80085b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d029      	beq.n	800860e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d012      	beq.n	80085e8 <osMessageQueueNew+0x62>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	68db      	ldr	r3, [r3, #12]
 80085c6:	2b4f      	cmp	r3, #79	@ 0x4f
 80085c8:	d90e      	bls.n	80085e8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00a      	beq.n	80085e8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	695a      	ldr	r2, [r3, #20]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	68b9      	ldr	r1, [r7, #8]
 80085da:	fb01 f303 	mul.w	r3, r1, r3
 80085de:	429a      	cmp	r2, r3
 80085e0:	d302      	bcc.n	80085e8 <osMessageQueueNew+0x62>
        mem = 1;
 80085e2:	2301      	movs	r3, #1
 80085e4:	61bb      	str	r3, [r7, #24]
 80085e6:	e014      	b.n	8008612 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d110      	bne.n	8008612 <osMessageQueueNew+0x8c>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10c      	bne.n	8008612 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d108      	bne.n	8008612 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	695b      	ldr	r3, [r3, #20]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d104      	bne.n	8008612 <osMessageQueueNew+0x8c>
          mem = 0;
 8008608:	2300      	movs	r3, #0
 800860a:	61bb      	str	r3, [r7, #24]
 800860c:	e001      	b.n	8008612 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800860e:	2300      	movs	r3, #0
 8008610:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d10b      	bne.n	8008630 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691a      	ldr	r2, [r3, #16]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	2100      	movs	r1, #0
 8008622:	9100      	str	r1, [sp, #0]
 8008624:	68b9      	ldr	r1, [r7, #8]
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f000 f972 	bl	8008910 <xQueueGenericCreateStatic>
 800862c:	61f8      	str	r0, [r7, #28]
 800862e:	e008      	b.n	8008642 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d105      	bne.n	8008642 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008636:	2200      	movs	r2, #0
 8008638:	68b9      	ldr	r1, [r7, #8]
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f000 f9e5 	bl	8008a0a <xQueueGenericCreate>
 8008640:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00c      	beq.n	8008662 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <osMessageQueueNew+0xd0>
        name = attr->name;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	617b      	str	r3, [r7, #20]
 8008654:	e001      	b.n	800865a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008656:	2300      	movs	r3, #0
 8008658:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800865a:	6979      	ldr	r1, [r7, #20]
 800865c:	69f8      	ldr	r0, [r7, #28]
 800865e:	f000 fdc5 	bl	80091ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008662:	69fb      	ldr	r3, [r7, #28]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3720      	adds	r7, #32
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4a07      	ldr	r2, [pc, #28]	@ (8008698 <vApplicationGetIdleTaskMemory+0x2c>)
 800867c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800867e:	68bb      	ldr	r3, [r7, #8]
 8008680:	4a06      	ldr	r2, [pc, #24]	@ (800869c <vApplicationGetIdleTaskMemory+0x30>)
 8008682:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2280      	movs	r2, #128	@ 0x80
 8008688:	601a      	str	r2, [r3, #0]
}
 800868a:	bf00      	nop
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	2000050c 	.word	0x2000050c
 800869c:	20000568 	.word	0x20000568

080086a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4a07      	ldr	r2, [pc, #28]	@ (80086cc <vApplicationGetTimerTaskMemory+0x2c>)
 80086b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	4a06      	ldr	r2, [pc, #24]	@ (80086d0 <vApplicationGetTimerTaskMemory+0x30>)
 80086b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80086be:	601a      	str	r2, [r3, #0]
}
 80086c0:	bf00      	nop
 80086c2:	3714      	adds	r7, #20
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	20000768 	.word	0x20000768
 80086d0:	200007c4 	.word	0x200007c4

080086d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f103 0208 	add.w	r2, r3, #8
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f04f 32ff 	mov.w	r2, #4294967295
 80086ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f103 0208 	add.w	r2, r3, #8
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f103 0208 	add.w	r2, r3, #8
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008722:	bf00      	nop
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800872e:	b480      	push	{r7}
 8008730:	b085      	sub	sp, #20
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	689a      	ldr	r2, [r3, #8]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	683a      	ldr	r2, [r7, #0]
 8008752:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	1c5a      	adds	r2, r3, #1
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	601a      	str	r2, [r3, #0]
}
 800876a:	bf00      	nop
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008776:	b480      	push	{r7}
 8008778:	b085      	sub	sp, #20
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800878c:	d103      	bne.n	8008796 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	691b      	ldr	r3, [r3, #16]
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	e00c      	b.n	80087b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	3308      	adds	r3, #8
 800879a:	60fb      	str	r3, [r7, #12]
 800879c:	e002      	b.n	80087a4 <vListInsert+0x2e>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	60fb      	str	r3, [r7, #12]
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d2f6      	bcs.n	800879e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	683a      	ldr	r2, [r7, #0]
 80087be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	683a      	ldr	r2, [r7, #0]
 80087ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	1c5a      	adds	r2, r3, #1
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	601a      	str	r2, [r3, #0]
}
 80087dc:	bf00      	nop
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	6892      	ldr	r2, [r2, #8]
 80087fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	6852      	ldr	r2, [r2, #4]
 8008808:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	429a      	cmp	r2, r3
 8008812:	d103      	bne.n	800881c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	689a      	ldr	r2, [r3, #8]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2200      	movs	r2, #0
 8008820:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	1e5a      	subs	r2, r3, #1
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10b      	bne.n	8008868 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008862:	bf00      	nop
 8008864:	bf00      	nop
 8008866:	e7fd      	b.n	8008864 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008868:	f002 f8b6 	bl	800a9d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008874:	68f9      	ldr	r1, [r7, #12]
 8008876:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008878:	fb01 f303 	mul.w	r3, r1, r3
 800887c:	441a      	add	r2, r3
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2200      	movs	r2, #0
 8008886:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681a      	ldr	r2, [r3, #0]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008898:	3b01      	subs	r3, #1
 800889a:	68f9      	ldr	r1, [r7, #12]
 800889c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800889e:	fb01 f303 	mul.w	r3, r1, r3
 80088a2:	441a      	add	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	22ff      	movs	r2, #255	@ 0xff
 80088ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	22ff      	movs	r2, #255	@ 0xff
 80088b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d114      	bne.n	80088e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01a      	beq.n	80088fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3310      	adds	r3, #16
 80088ca:	4618      	mov	r0, r3
 80088cc:	f001 f956 	bl	8009b7c <xTaskRemoveFromEventList>
 80088d0:	4603      	mov	r3, r0
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d012      	beq.n	80088fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80088d6:	4b0d      	ldr	r3, [pc, #52]	@ (800890c <xQueueGenericReset+0xd0>)
 80088d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	e009      	b.n	80088fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	3310      	adds	r3, #16
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7ff fef1 	bl	80086d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	3324      	adds	r3, #36	@ 0x24
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff feec 	bl	80086d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80088fc:	f002 f89e 	bl	800aa3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008900:	2301      	movs	r3, #1
}
 8008902:	4618      	mov	r0, r3
 8008904:	3710      	adds	r7, #16
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	e000ed04 	.word	0xe000ed04

08008910 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008910:	b580      	push	{r7, lr}
 8008912:	b08e      	sub	sp, #56	@ 0x38
 8008914:	af02      	add	r7, sp, #8
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
 800891c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10b      	bne.n	800893c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008928:	f383 8811 	msr	BASEPRI, r3
 800892c:	f3bf 8f6f 	isb	sy
 8008930:	f3bf 8f4f 	dsb	sy
 8008934:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008936:	bf00      	nop
 8008938:	bf00      	nop
 800893a:	e7fd      	b.n	8008938 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d10b      	bne.n	800895a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008954:	bf00      	nop
 8008956:	bf00      	nop
 8008958:	e7fd      	b.n	8008956 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d002      	beq.n	8008966 <xQueueGenericCreateStatic+0x56>
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <xQueueGenericCreateStatic+0x5a>
 8008966:	2301      	movs	r3, #1
 8008968:	e000      	b.n	800896c <xQueueGenericCreateStatic+0x5c>
 800896a:	2300      	movs	r3, #0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10b      	bne.n	8008988 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008974:	f383 8811 	msr	BASEPRI, r3
 8008978:	f3bf 8f6f 	isb	sy
 800897c:	f3bf 8f4f 	dsb	sy
 8008980:	623b      	str	r3, [r7, #32]
}
 8008982:	bf00      	nop
 8008984:	bf00      	nop
 8008986:	e7fd      	b.n	8008984 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d102      	bne.n	8008994 <xQueueGenericCreateStatic+0x84>
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <xQueueGenericCreateStatic+0x88>
 8008994:	2301      	movs	r3, #1
 8008996:	e000      	b.n	800899a <xQueueGenericCreateStatic+0x8a>
 8008998:	2300      	movs	r3, #0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10b      	bne.n	80089b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	61fb      	str	r3, [r7, #28]
}
 80089b0:	bf00      	nop
 80089b2:	bf00      	nop
 80089b4:	e7fd      	b.n	80089b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80089b6:	2350      	movs	r3, #80	@ 0x50
 80089b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	2b50      	cmp	r3, #80	@ 0x50
 80089be:	d00b      	beq.n	80089d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	61bb      	str	r3, [r7, #24]
}
 80089d2:	bf00      	nop
 80089d4:	bf00      	nop
 80089d6:	e7fd      	b.n	80089d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80089d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80089de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00d      	beq.n	8008a00 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80089e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089e6:	2201      	movs	r2, #1
 80089e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80089ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80089f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089f2:	9300      	str	r3, [sp, #0]
 80089f4:	4613      	mov	r3, r2
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	68b9      	ldr	r1, [r7, #8]
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f000 f840 	bl	8008a80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3730      	adds	r7, #48	@ 0x30
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b08a      	sub	sp, #40	@ 0x28
 8008a0e:	af02      	add	r7, sp, #8
 8008a10:	60f8      	str	r0, [r7, #12]
 8008a12:	60b9      	str	r1, [r7, #8]
 8008a14:	4613      	mov	r3, r2
 8008a16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10b      	bne.n	8008a36 <xQueueGenericCreate+0x2c>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a22:	f383 8811 	msr	BASEPRI, r3
 8008a26:	f3bf 8f6f 	isb	sy
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	613b      	str	r3, [r7, #16]
}
 8008a30:	bf00      	nop
 8008a32:	bf00      	nop
 8008a34:	e7fd      	b.n	8008a32 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	fb02 f303 	mul.w	r3, r2, r3
 8008a3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	3350      	adds	r3, #80	@ 0x50
 8008a44:	4618      	mov	r0, r3
 8008a46:	f002 f8e9 	bl	800ac1c <pvPortMalloc>
 8008a4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d011      	beq.n	8008a76 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	3350      	adds	r3, #80	@ 0x50
 8008a5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008a64:	79fa      	ldrb	r2, [r7, #7]
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	4613      	mov	r3, r2
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	68b9      	ldr	r1, [r7, #8]
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 f805 	bl	8008a80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008a76:	69bb      	ldr	r3, [r7, #24]
	}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3720      	adds	r7, #32
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
 8008a8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d103      	bne.n	8008a9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	601a      	str	r2, [r3, #0]
 8008a9a:	e002      	b.n	8008aa2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008aae:	2101      	movs	r1, #1
 8008ab0:	69b8      	ldr	r0, [r7, #24]
 8008ab2:	f7ff fec3 	bl	800883c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	78fa      	ldrb	r2, [r7, #3]
 8008aba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008abe:	bf00      	nop
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
	...

08008ac8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b08e      	sub	sp, #56	@ 0x38
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
 8008ad4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10b      	bne.n	8008afc <xQueueGenericSend+0x34>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008af6:	bf00      	nop
 8008af8:	bf00      	nop
 8008afa:	e7fd      	b.n	8008af8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d103      	bne.n	8008b0a <xQueueGenericSend+0x42>
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <xQueueGenericSend+0x46>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e000      	b.n	8008b10 <xQueueGenericSend+0x48>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d10b      	bne.n	8008b2c <xQueueGenericSend+0x64>
	__asm volatile
 8008b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008b26:	bf00      	nop
 8008b28:	bf00      	nop
 8008b2a:	e7fd      	b.n	8008b28 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d103      	bne.n	8008b3a <xQueueGenericSend+0x72>
 8008b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d101      	bne.n	8008b3e <xQueueGenericSend+0x76>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e000      	b.n	8008b40 <xQueueGenericSend+0x78>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10b      	bne.n	8008b5c <xQueueGenericSend+0x94>
	__asm volatile
 8008b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b48:	f383 8811 	msr	BASEPRI, r3
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f3bf 8f4f 	dsb	sy
 8008b54:	623b      	str	r3, [r7, #32]
}
 8008b56:	bf00      	nop
 8008b58:	bf00      	nop
 8008b5a:	e7fd      	b.n	8008b58 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b5c:	f001 f9ce 	bl	8009efc <xTaskGetSchedulerState>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d102      	bne.n	8008b6c <xQueueGenericSend+0xa4>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d101      	bne.n	8008b70 <xQueueGenericSend+0xa8>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e000      	b.n	8008b72 <xQueueGenericSend+0xaa>
 8008b70:	2300      	movs	r3, #0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d10b      	bne.n	8008b8e <xQueueGenericSend+0xc6>
	__asm volatile
 8008b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7a:	f383 8811 	msr	BASEPRI, r3
 8008b7e:	f3bf 8f6f 	isb	sy
 8008b82:	f3bf 8f4f 	dsb	sy
 8008b86:	61fb      	str	r3, [r7, #28]
}
 8008b88:	bf00      	nop
 8008b8a:	bf00      	nop
 8008b8c:	e7fd      	b.n	8008b8a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b8e:	f001 ff23 	bl	800a9d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d302      	bcc.n	8008ba4 <xQueueGenericSend+0xdc>
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d129      	bne.n	8008bf8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ba4:	683a      	ldr	r2, [r7, #0]
 8008ba6:	68b9      	ldr	r1, [r7, #8]
 8008ba8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008baa:	f000 fa0f 	bl	8008fcc <prvCopyDataToQueue>
 8008bae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d010      	beq.n	8008bda <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bba:	3324      	adds	r3, #36	@ 0x24
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f000 ffdd 	bl	8009b7c <xTaskRemoveFromEventList>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d013      	beq.n	8008bf0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008bc8:	4b3f      	ldr	r3, [pc, #252]	@ (8008cc8 <xQueueGenericSend+0x200>)
 8008bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bce:	601a      	str	r2, [r3, #0]
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	e00a      	b.n	8008bf0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d007      	beq.n	8008bf0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008be0:	4b39      	ldr	r3, [pc, #228]	@ (8008cc8 <xQueueGenericSend+0x200>)
 8008be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008be6:	601a      	str	r2, [r3, #0]
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008bf0:	f001 ff24 	bl	800aa3c <vPortExitCritical>
				return pdPASS;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	e063      	b.n	8008cc0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d103      	bne.n	8008c06 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008bfe:	f001 ff1d 	bl	800aa3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008c02:	2300      	movs	r3, #0
 8008c04:	e05c      	b.n	8008cc0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d106      	bne.n	8008c1a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c0c:	f107 0314 	add.w	r3, r7, #20
 8008c10:	4618      	mov	r0, r3
 8008c12:	f001 f817 	bl	8009c44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c16:	2301      	movs	r3, #1
 8008c18:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c1a:	f001 ff0f 	bl	800aa3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c1e:	f000 fd87 	bl	8009730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c22:	f001 fed9 	bl	800a9d8 <vPortEnterCritical>
 8008c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c2c:	b25b      	sxtb	r3, r3
 8008c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c32:	d103      	bne.n	8008c3c <xQueueGenericSend+0x174>
 8008c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c36:	2200      	movs	r2, #0
 8008c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c42:	b25b      	sxtb	r3, r3
 8008c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c48:	d103      	bne.n	8008c52 <xQueueGenericSend+0x18a>
 8008c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c52:	f001 fef3 	bl	800aa3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008c56:	1d3a      	adds	r2, r7, #4
 8008c58:	f107 0314 	add.w	r3, r7, #20
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f001 f806 	bl	8009c70 <xTaskCheckForTimeOut>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d124      	bne.n	8008cb4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008c6a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c6c:	f000 faa6 	bl	80091bc <prvIsQueueFull>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d018      	beq.n	8008ca8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c78:	3310      	adds	r3, #16
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f000 ff2a 	bl	8009ad8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c86:	f000 fa31 	bl	80090ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c8a:	f000 fd5f 	bl	800974c <xTaskResumeAll>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f47f af7c 	bne.w	8008b8e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008c96:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc8 <xQueueGenericSend+0x200>)
 8008c98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c9c:	601a      	str	r2, [r3, #0]
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	e772      	b.n	8008b8e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ca8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008caa:	f000 fa1f 	bl	80090ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cae:	f000 fd4d 	bl	800974c <xTaskResumeAll>
 8008cb2:	e76c      	b.n	8008b8e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008cb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008cb6:	f000 fa19 	bl	80090ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008cba:	f000 fd47 	bl	800974c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008cbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3738      	adds	r7, #56	@ 0x38
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	e000ed04 	.word	0xe000ed04

08008ccc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b090      	sub	sp, #64	@ 0x40
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10b      	bne.n	8008cfc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008cf6:	bf00      	nop
 8008cf8:	bf00      	nop
 8008cfa:	e7fd      	b.n	8008cf8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d103      	bne.n	8008d0a <xQueueGenericSendFromISR+0x3e>
 8008d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <xQueueGenericSendFromISR+0x42>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e000      	b.n	8008d10 <xQueueGenericSendFromISR+0x44>
 8008d0e:	2300      	movs	r3, #0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10b      	bne.n	8008d2c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008d26:	bf00      	nop
 8008d28:	bf00      	nop
 8008d2a:	e7fd      	b.n	8008d28 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d103      	bne.n	8008d3a <xQueueGenericSendFromISR+0x6e>
 8008d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d101      	bne.n	8008d3e <xQueueGenericSendFromISR+0x72>
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e000      	b.n	8008d40 <xQueueGenericSendFromISR+0x74>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10b      	bne.n	8008d5c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d48:	f383 8811 	msr	BASEPRI, r3
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	623b      	str	r3, [r7, #32]
}
 8008d56:	bf00      	nop
 8008d58:	bf00      	nop
 8008d5a:	e7fd      	b.n	8008d58 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d5c:	f001 ff1c 	bl	800ab98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008d60:	f3ef 8211 	mrs	r2, BASEPRI
 8008d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d68:	f383 8811 	msr	BASEPRI, r3
 8008d6c:	f3bf 8f6f 	isb	sy
 8008d70:	f3bf 8f4f 	dsb	sy
 8008d74:	61fa      	str	r2, [r7, #28]
 8008d76:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008d78:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008d7a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d302      	bcc.n	8008d8e <xQueueGenericSendFromISR+0xc2>
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d12f      	bne.n	8008dee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d90:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d9e:	683a      	ldr	r2, [r7, #0]
 8008da0:	68b9      	ldr	r1, [r7, #8]
 8008da2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008da4:	f000 f912 	bl	8008fcc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008da8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008db0:	d112      	bne.n	8008dd8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d016      	beq.n	8008de8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dbc:	3324      	adds	r3, #36	@ 0x24
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 fedc 	bl	8009b7c <xTaskRemoveFromEventList>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00e      	beq.n	8008de8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00b      	beq.n	8008de8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	601a      	str	r2, [r3, #0]
 8008dd6:	e007      	b.n	8008de8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008dd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008ddc:	3301      	adds	r3, #1
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	b25a      	sxtb	r2, r3
 8008de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008de4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008de8:	2301      	movs	r3, #1
 8008dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008dec:	e001      	b.n	8008df2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008dee:	2300      	movs	r3, #0
 8008df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008dfc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3740      	adds	r7, #64	@ 0x40
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08c      	sub	sp, #48	@ 0x30
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e14:	2300      	movs	r3, #0
 8008e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10b      	bne.n	8008e3a <xQueueReceive+0x32>
	__asm volatile
 8008e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e26:	f383 8811 	msr	BASEPRI, r3
 8008e2a:	f3bf 8f6f 	isb	sy
 8008e2e:	f3bf 8f4f 	dsb	sy
 8008e32:	623b      	str	r3, [r7, #32]
}
 8008e34:	bf00      	nop
 8008e36:	bf00      	nop
 8008e38:	e7fd      	b.n	8008e36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d103      	bne.n	8008e48 <xQueueReceive+0x40>
 8008e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d101      	bne.n	8008e4c <xQueueReceive+0x44>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e000      	b.n	8008e4e <xQueueReceive+0x46>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d10b      	bne.n	8008e6a <xQueueReceive+0x62>
	__asm volatile
 8008e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	61fb      	str	r3, [r7, #28]
}
 8008e64:	bf00      	nop
 8008e66:	bf00      	nop
 8008e68:	e7fd      	b.n	8008e66 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e6a:	f001 f847 	bl	8009efc <xTaskGetSchedulerState>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d102      	bne.n	8008e7a <xQueueReceive+0x72>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d101      	bne.n	8008e7e <xQueueReceive+0x76>
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e000      	b.n	8008e80 <xQueueReceive+0x78>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d10b      	bne.n	8008e9c <xQueueReceive+0x94>
	__asm volatile
 8008e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e88:	f383 8811 	msr	BASEPRI, r3
 8008e8c:	f3bf 8f6f 	isb	sy
 8008e90:	f3bf 8f4f 	dsb	sy
 8008e94:	61bb      	str	r3, [r7, #24]
}
 8008e96:	bf00      	nop
 8008e98:	bf00      	nop
 8008e9a:	e7fd      	b.n	8008e98 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e9c:	f001 fd9c 	bl	800a9d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d01f      	beq.n	8008eec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008eac:	68b9      	ldr	r1, [r7, #8]
 8008eae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008eb0:	f000 f8f6 	bl	80090a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb6:	1e5a      	subs	r2, r3, #1
 8008eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00f      	beq.n	8008ee4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec6:	3310      	adds	r3, #16
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f000 fe57 	bl	8009b7c <xTaskRemoveFromEventList>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d007      	beq.n	8008ee4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ed4:	4b3c      	ldr	r3, [pc, #240]	@ (8008fc8 <xQueueReceive+0x1c0>)
 8008ed6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008ee4:	f001 fdaa 	bl	800aa3c <vPortExitCritical>
				return pdPASS;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e069      	b.n	8008fc0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d103      	bne.n	8008efa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ef2:	f001 fda3 	bl	800aa3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	e062      	b.n	8008fc0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d106      	bne.n	8008f0e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f00:	f107 0310 	add.w	r3, r7, #16
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 fe9d 	bl	8009c44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f0e:	f001 fd95 	bl	800aa3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f12:	f000 fc0d 	bl	8009730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f16:	f001 fd5f 	bl	800a9d8 <vPortEnterCritical>
 8008f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f20:	b25b      	sxtb	r3, r3
 8008f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f26:	d103      	bne.n	8008f30 <xQueueReceive+0x128>
 8008f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f32:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f36:	b25b      	sxtb	r3, r3
 8008f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3c:	d103      	bne.n	8008f46 <xQueueReceive+0x13e>
 8008f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f40:	2200      	movs	r2, #0
 8008f42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f46:	f001 fd79 	bl	800aa3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f4a:	1d3a      	adds	r2, r7, #4
 8008f4c:	f107 0310 	add.w	r3, r7, #16
 8008f50:	4611      	mov	r1, r2
 8008f52:	4618      	mov	r0, r3
 8008f54:	f000 fe8c 	bl	8009c70 <xTaskCheckForTimeOut>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d123      	bne.n	8008fa6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f60:	f000 f916 	bl	8009190 <prvIsQueueEmpty>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d017      	beq.n	8008f9a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f6c:	3324      	adds	r3, #36	@ 0x24
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	4611      	mov	r1, r2
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 fdb0 	bl	8009ad8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008f78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f7a:	f000 f8b7 	bl	80090ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008f7e:	f000 fbe5 	bl	800974c <xTaskResumeAll>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d189      	bne.n	8008e9c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008f88:	4b0f      	ldr	r3, [pc, #60]	@ (8008fc8 <xQueueReceive+0x1c0>)
 8008f8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f8e:	601a      	str	r2, [r3, #0]
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	f3bf 8f6f 	isb	sy
 8008f98:	e780      	b.n	8008e9c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f9c:	f000 f8a6 	bl	80090ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fa0:	f000 fbd4 	bl	800974c <xTaskResumeAll>
 8008fa4:	e77a      	b.n	8008e9c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008fa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fa8:	f000 f8a0 	bl	80090ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fac:	f000 fbce 	bl	800974c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fb2:	f000 f8ed 	bl	8009190 <prvIsQueueEmpty>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f43f af6f 	beq.w	8008e9c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008fbe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3730      	adds	r7, #48	@ 0x30
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	e000ed04 	.word	0xe000ed04

08008fcc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b086      	sub	sp, #24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d10d      	bne.n	8009006 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d14d      	bne.n	800908e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 ff9e 	bl	8009f38 <xTaskPriorityDisinherit>
 8008ffc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	609a      	str	r2, [r3, #8]
 8009004:	e043      	b.n	800908e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d119      	bne.n	8009040 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6858      	ldr	r0, [r3, #4]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009014:	461a      	mov	r2, r3
 8009016:	68b9      	ldr	r1, [r7, #8]
 8009018:	f002 fdeb 	bl	800bbf2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009024:	441a      	add	r2, r3
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	685a      	ldr	r2, [r3, #4]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	689b      	ldr	r3, [r3, #8]
 8009032:	429a      	cmp	r2, r3
 8009034:	d32b      	bcc.n	800908e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	605a      	str	r2, [r3, #4]
 800903e:	e026      	b.n	800908e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	68d8      	ldr	r0, [r3, #12]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009048:	461a      	mov	r2, r3
 800904a:	68b9      	ldr	r1, [r7, #8]
 800904c:	f002 fdd1 	bl	800bbf2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	68da      	ldr	r2, [r3, #12]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009058:	425b      	negs	r3, r3
 800905a:	441a      	add	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	68da      	ldr	r2, [r3, #12]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	429a      	cmp	r2, r3
 800906a:	d207      	bcs.n	800907c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	689a      	ldr	r2, [r3, #8]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009074:	425b      	negs	r3, r3
 8009076:	441a      	add	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b02      	cmp	r3, #2
 8009080:	d105      	bne.n	800908e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	3b01      	subs	r3, #1
 800908c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	1c5a      	adds	r2, r3, #1
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009096:	697b      	ldr	r3, [r7, #20]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d018      	beq.n	80090e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	68da      	ldr	r2, [r3, #12]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090ba:	441a      	add	r2, r3
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	68da      	ldr	r2, [r3, #12]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d303      	bcc.n	80090d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681a      	ldr	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	68d9      	ldr	r1, [r3, #12]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090dc:	461a      	mov	r2, r3
 80090de:	6838      	ldr	r0, [r7, #0]
 80090e0:	f002 fd87 	bl	800bbf2 <memcpy>
	}
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80090f4:	f001 fc70 	bl	800a9d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80090fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009100:	e011      	b.n	8009126 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009106:	2b00      	cmp	r3, #0
 8009108:	d012      	beq.n	8009130 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	3324      	adds	r3, #36	@ 0x24
 800910e:	4618      	mov	r0, r3
 8009110:	f000 fd34 	bl	8009b7c <xTaskRemoveFromEventList>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d001      	beq.n	800911e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800911a:	f000 fe0d 	bl	8009d38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800911e:	7bfb      	ldrb	r3, [r7, #15]
 8009120:	3b01      	subs	r3, #1
 8009122:	b2db      	uxtb	r3, r3
 8009124:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800912a:	2b00      	cmp	r3, #0
 800912c:	dce9      	bgt.n	8009102 <prvUnlockQueue+0x16>
 800912e:	e000      	b.n	8009132 <prvUnlockQueue+0x46>
					break;
 8009130:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	22ff      	movs	r2, #255	@ 0xff
 8009136:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800913a:	f001 fc7f 	bl	800aa3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800913e:	f001 fc4b 	bl	800a9d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009148:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800914a:	e011      	b.n	8009170 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d012      	beq.n	800917a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	3310      	adds	r3, #16
 8009158:	4618      	mov	r0, r3
 800915a:	f000 fd0f 	bl	8009b7c <xTaskRemoveFromEventList>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d001      	beq.n	8009168 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009164:	f000 fde8 	bl	8009d38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009168:	7bbb      	ldrb	r3, [r7, #14]
 800916a:	3b01      	subs	r3, #1
 800916c:	b2db      	uxtb	r3, r3
 800916e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009174:	2b00      	cmp	r3, #0
 8009176:	dce9      	bgt.n	800914c <prvUnlockQueue+0x60>
 8009178:	e000      	b.n	800917c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800917a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	22ff      	movs	r2, #255	@ 0xff
 8009180:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009184:	f001 fc5a 	bl	800aa3c <vPortExitCritical>
}
 8009188:	bf00      	nop
 800918a:	3710      	adds	r7, #16
 800918c:	46bd      	mov	sp, r7
 800918e:	bd80      	pop	{r7, pc}

08009190 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009198:	f001 fc1e 	bl	800a9d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d102      	bne.n	80091aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80091a4:	2301      	movs	r3, #1
 80091a6:	60fb      	str	r3, [r7, #12]
 80091a8:	e001      	b.n	80091ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80091aa:	2300      	movs	r3, #0
 80091ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091ae:	f001 fc45 	bl	800aa3c <vPortExitCritical>

	return xReturn;
 80091b2:	68fb      	ldr	r3, [r7, #12]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80091c4:	f001 fc08 	bl	800a9d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d102      	bne.n	80091da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80091d4:	2301      	movs	r3, #1
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	e001      	b.n	80091de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80091da:	2300      	movs	r3, #0
 80091dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80091de:	f001 fc2d 	bl	800aa3c <vPortExitCritical>

	return xReturn;
 80091e2:	68fb      	ldr	r3, [r7, #12]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80091f6:	2300      	movs	r3, #0
 80091f8:	60fb      	str	r3, [r7, #12]
 80091fa:	e014      	b.n	8009226 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80091fc:	4a0f      	ldr	r2, [pc, #60]	@ (800923c <vQueueAddToRegistry+0x50>)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10b      	bne.n	8009220 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009208:	490c      	ldr	r1, [pc, #48]	@ (800923c <vQueueAddToRegistry+0x50>)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009212:	4a0a      	ldr	r2, [pc, #40]	@ (800923c <vQueueAddToRegistry+0x50>)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	00db      	lsls	r3, r3, #3
 8009218:	4413      	add	r3, r2
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800921e:	e006      	b.n	800922e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	3301      	adds	r3, #1
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	2b07      	cmp	r3, #7
 800922a:	d9e7      	bls.n	80091fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800922c:	bf00      	nop
 800922e:	bf00      	nop
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	20000bc4 	.word	0x20000bc4

08009240 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009250:	f001 fbc2 	bl	800a9d8 <vPortEnterCritical>
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800925a:	b25b      	sxtb	r3, r3
 800925c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009260:	d103      	bne.n	800926a <vQueueWaitForMessageRestricted+0x2a>
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009270:	b25b      	sxtb	r3, r3
 8009272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009276:	d103      	bne.n	8009280 <vQueueWaitForMessageRestricted+0x40>
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	2200      	movs	r2, #0
 800927c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009280:	f001 fbdc 	bl	800aa3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009288:	2b00      	cmp	r3, #0
 800928a:	d106      	bne.n	800929a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	3324      	adds	r3, #36	@ 0x24
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	68b9      	ldr	r1, [r7, #8]
 8009294:	4618      	mov	r0, r3
 8009296:	f000 fc45 	bl	8009b24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800929a:	6978      	ldr	r0, [r7, #20]
 800929c:	f7ff ff26 	bl	80090ec <prvUnlockQueue>
	}
 80092a0:	bf00      	nop
 80092a2:	3718      	adds	r7, #24
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b08e      	sub	sp, #56	@ 0x38
 80092ac:	af04      	add	r7, sp, #16
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
 80092b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80092b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10b      	bne.n	80092d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	623b      	str	r3, [r7, #32]
}
 80092ce:	bf00      	nop
 80092d0:	bf00      	nop
 80092d2:	e7fd      	b.n	80092d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80092d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10b      	bne.n	80092f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	61fb      	str	r3, [r7, #28]
}
 80092ec:	bf00      	nop
 80092ee:	bf00      	nop
 80092f0:	e7fd      	b.n	80092ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80092f2:	235c      	movs	r3, #92	@ 0x5c
 80092f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80092fa:	d00b      	beq.n	8009314 <xTaskCreateStatic+0x6c>
	__asm volatile
 80092fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009300:	f383 8811 	msr	BASEPRI, r3
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	f3bf 8f4f 	dsb	sy
 800930c:	61bb      	str	r3, [r7, #24]
}
 800930e:	bf00      	nop
 8009310:	bf00      	nop
 8009312:	e7fd      	b.n	8009310 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009314:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009318:	2b00      	cmp	r3, #0
 800931a:	d01e      	beq.n	800935a <xTaskCreateStatic+0xb2>
 800931c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800931e:	2b00      	cmp	r3, #0
 8009320:	d01b      	beq.n	800935a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009324:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009328:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800932a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800932c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932e:	2202      	movs	r2, #2
 8009330:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009334:	2300      	movs	r3, #0
 8009336:	9303      	str	r3, [sp, #12]
 8009338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800933a:	9302      	str	r3, [sp, #8]
 800933c:	f107 0314 	add.w	r3, r7, #20
 8009340:	9301      	str	r3, [sp, #4]
 8009342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009344:	9300      	str	r3, [sp, #0]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	68b9      	ldr	r1, [r7, #8]
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 f850 	bl	80093f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009352:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009354:	f000 f8de 	bl	8009514 <prvAddNewTaskToReadyList>
 8009358:	e001      	b.n	800935e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800935a:	2300      	movs	r3, #0
 800935c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800935e:	697b      	ldr	r3, [r7, #20]
	}
 8009360:	4618      	mov	r0, r3
 8009362:	3728      	adds	r7, #40	@ 0x28
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009368:	b580      	push	{r7, lr}
 800936a:	b08c      	sub	sp, #48	@ 0x30
 800936c:	af04      	add	r7, sp, #16
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	603b      	str	r3, [r7, #0]
 8009374:	4613      	mov	r3, r2
 8009376:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009378:	88fb      	ldrh	r3, [r7, #6]
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4618      	mov	r0, r3
 800937e:	f001 fc4d 	bl	800ac1c <pvPortMalloc>
 8009382:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00e      	beq.n	80093a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800938a:	205c      	movs	r0, #92	@ 0x5c
 800938c:	f001 fc46 	bl	800ac1c <pvPortMalloc>
 8009390:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d003      	beq.n	80093a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	697a      	ldr	r2, [r7, #20]
 800939c:	631a      	str	r2, [r3, #48]	@ 0x30
 800939e:	e005      	b.n	80093ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80093a0:	6978      	ldr	r0, [r7, #20]
 80093a2:	f001 fd09 	bl	800adb8 <vPortFree>
 80093a6:	e001      	b.n	80093ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80093a8:	2300      	movs	r3, #0
 80093aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d017      	beq.n	80093e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80093b2:	69fb      	ldr	r3, [r7, #28]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80093ba:	88fa      	ldrh	r2, [r7, #6]
 80093bc:	2300      	movs	r3, #0
 80093be:	9303      	str	r3, [sp, #12]
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	9302      	str	r3, [sp, #8]
 80093c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c6:	9301      	str	r3, [sp, #4]
 80093c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ca:	9300      	str	r3, [sp, #0]
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 f80e 	bl	80093f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80093d6:	69f8      	ldr	r0, [r7, #28]
 80093d8:	f000 f89c 	bl	8009514 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80093dc:	2301      	movs	r3, #1
 80093de:	61bb      	str	r3, [r7, #24]
 80093e0:	e002      	b.n	80093e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80093e2:	f04f 33ff 	mov.w	r3, #4294967295
 80093e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80093e8:	69bb      	ldr	r3, [r7, #24]
	}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3720      	adds	r7, #32
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b088      	sub	sp, #32
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	607a      	str	r2, [r7, #4]
 80093fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009402:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	461a      	mov	r2, r3
 800940a:	21a5      	movs	r1, #165	@ 0xa5
 800940c:	f002 fb71 	bl	800baf2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009412:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800941a:	3b01      	subs	r3, #1
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	f023 0307 	bic.w	r3, r3, #7
 8009428:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	f003 0307 	and.w	r3, r3, #7
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00b      	beq.n	800944c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009438:	f383 8811 	msr	BASEPRI, r3
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	f3bf 8f4f 	dsb	sy
 8009444:	617b      	str	r3, [r7, #20]
}
 8009446:	bf00      	nop
 8009448:	bf00      	nop
 800944a:	e7fd      	b.n	8009448 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d01f      	beq.n	8009492 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009452:	2300      	movs	r3, #0
 8009454:	61fb      	str	r3, [r7, #28]
 8009456:	e012      	b.n	800947e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	4413      	add	r3, r2
 800945e:	7819      	ldrb	r1, [r3, #0]
 8009460:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	4413      	add	r3, r2
 8009466:	3334      	adds	r3, #52	@ 0x34
 8009468:	460a      	mov	r2, r1
 800946a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	69fb      	ldr	r3, [r7, #28]
 8009470:	4413      	add	r3, r2
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d006      	beq.n	8009486 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	3301      	adds	r3, #1
 800947c:	61fb      	str	r3, [r7, #28]
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	2b0f      	cmp	r3, #15
 8009482:	d9e9      	bls.n	8009458 <prvInitialiseNewTask+0x66>
 8009484:	e000      	b.n	8009488 <prvInitialiseNewTask+0x96>
			{
				break;
 8009486:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948a:	2200      	movs	r2, #0
 800948c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009490:	e003      	b.n	800949a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009494:	2200      	movs	r2, #0
 8009496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800949a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949c:	2b37      	cmp	r3, #55	@ 0x37
 800949e:	d901      	bls.n	80094a4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80094a0:	2337      	movs	r3, #55	@ 0x37
 80094a2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80094a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094a8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80094aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094ae:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80094b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b2:	2200      	movs	r2, #0
 80094b4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80094b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b8:	3304      	adds	r3, #4
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7ff f92a 	bl	8008714 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80094c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c2:	3318      	adds	r3, #24
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7ff f925 	bl	8008714 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80094ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80094d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80094da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094de:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80094e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e2:	2200      	movs	r2, #0
 80094e4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80094e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	68f9      	ldr	r1, [r7, #12]
 80094f2:	69b8      	ldr	r0, [r7, #24]
 80094f4:	f001 f93e 	bl	800a774 <pxPortInitialiseStack>
 80094f8:	4602      	mov	r2, r0
 80094fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80094fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009500:	2b00      	cmp	r3, #0
 8009502:	d002      	beq.n	800950a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009508:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800950a:	bf00      	nop
 800950c:	3720      	adds	r7, #32
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
	...

08009514 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800951c:	f001 fa5c 	bl	800a9d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009520:	4b2d      	ldr	r3, [pc, #180]	@ (80095d8 <prvAddNewTaskToReadyList+0xc4>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	3301      	adds	r3, #1
 8009526:	4a2c      	ldr	r2, [pc, #176]	@ (80095d8 <prvAddNewTaskToReadyList+0xc4>)
 8009528:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800952a:	4b2c      	ldr	r3, [pc, #176]	@ (80095dc <prvAddNewTaskToReadyList+0xc8>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d109      	bne.n	8009546 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009532:	4a2a      	ldr	r2, [pc, #168]	@ (80095dc <prvAddNewTaskToReadyList+0xc8>)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009538:	4b27      	ldr	r3, [pc, #156]	@ (80095d8 <prvAddNewTaskToReadyList+0xc4>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b01      	cmp	r3, #1
 800953e:	d110      	bne.n	8009562 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009540:	f000 fc1e 	bl	8009d80 <prvInitialiseTaskLists>
 8009544:	e00d      	b.n	8009562 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009546:	4b26      	ldr	r3, [pc, #152]	@ (80095e0 <prvAddNewTaskToReadyList+0xcc>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d109      	bne.n	8009562 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800954e:	4b23      	ldr	r3, [pc, #140]	@ (80095dc <prvAddNewTaskToReadyList+0xc8>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009558:	429a      	cmp	r2, r3
 800955a:	d802      	bhi.n	8009562 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800955c:	4a1f      	ldr	r2, [pc, #124]	@ (80095dc <prvAddNewTaskToReadyList+0xc8>)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009562:	4b20      	ldr	r3, [pc, #128]	@ (80095e4 <prvAddNewTaskToReadyList+0xd0>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	3301      	adds	r3, #1
 8009568:	4a1e      	ldr	r2, [pc, #120]	@ (80095e4 <prvAddNewTaskToReadyList+0xd0>)
 800956a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800956c:	4b1d      	ldr	r3, [pc, #116]	@ (80095e4 <prvAddNewTaskToReadyList+0xd0>)
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009578:	4b1b      	ldr	r3, [pc, #108]	@ (80095e8 <prvAddNewTaskToReadyList+0xd4>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	429a      	cmp	r2, r3
 800957e:	d903      	bls.n	8009588 <prvAddNewTaskToReadyList+0x74>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009584:	4a18      	ldr	r2, [pc, #96]	@ (80095e8 <prvAddNewTaskToReadyList+0xd4>)
 8009586:	6013      	str	r3, [r2, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800958c:	4613      	mov	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4413      	add	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4a15      	ldr	r2, [pc, #84]	@ (80095ec <prvAddNewTaskToReadyList+0xd8>)
 8009596:	441a      	add	r2, r3
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	3304      	adds	r3, #4
 800959c:	4619      	mov	r1, r3
 800959e:	4610      	mov	r0, r2
 80095a0:	f7ff f8c5 	bl	800872e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80095a4:	f001 fa4a 	bl	800aa3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80095a8:	4b0d      	ldr	r3, [pc, #52]	@ (80095e0 <prvAddNewTaskToReadyList+0xcc>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00e      	beq.n	80095ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80095b0:	4b0a      	ldr	r3, [pc, #40]	@ (80095dc <prvAddNewTaskToReadyList+0xc8>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d207      	bcs.n	80095ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80095be:	4b0c      	ldr	r3, [pc, #48]	@ (80095f0 <prvAddNewTaskToReadyList+0xdc>)
 80095c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095c4:	601a      	str	r2, [r3, #0]
 80095c6:	f3bf 8f4f 	dsb	sy
 80095ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095ce:	bf00      	nop
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}
 80095d6:	bf00      	nop
 80095d8:	200010d8 	.word	0x200010d8
 80095dc:	20000c04 	.word	0x20000c04
 80095e0:	200010e4 	.word	0x200010e4
 80095e4:	200010f4 	.word	0x200010f4
 80095e8:	200010e0 	.word	0x200010e0
 80095ec:	20000c08 	.word	0x20000c08
 80095f0:	e000ed04 	.word	0xe000ed04

080095f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80095fc:	2300      	movs	r3, #0
 80095fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d018      	beq.n	8009638 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009606:	4b14      	ldr	r3, [pc, #80]	@ (8009658 <vTaskDelay+0x64>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d00b      	beq.n	8009626 <vTaskDelay+0x32>
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	60bb      	str	r3, [r7, #8]
}
 8009620:	bf00      	nop
 8009622:	bf00      	nop
 8009624:	e7fd      	b.n	8009622 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009626:	f000 f883 	bl	8009730 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800962a:	2100      	movs	r1, #0
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 fcf3 	bl	800a018 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009632:	f000 f88b 	bl	800974c <xTaskResumeAll>
 8009636:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d107      	bne.n	800964e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800963e:	4b07      	ldr	r3, [pc, #28]	@ (800965c <vTaskDelay+0x68>)
 8009640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009644:	601a      	str	r2, [r3, #0]
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800964e:	bf00      	nop
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop
 8009658:	20001100 	.word	0x20001100
 800965c:	e000ed04 	.word	0xe000ed04

08009660 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b08a      	sub	sp, #40	@ 0x28
 8009664:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009666:	2300      	movs	r3, #0
 8009668:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800966a:	2300      	movs	r3, #0
 800966c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800966e:	463a      	mov	r2, r7
 8009670:	1d39      	adds	r1, r7, #4
 8009672:	f107 0308 	add.w	r3, r7, #8
 8009676:	4618      	mov	r0, r3
 8009678:	f7fe fff8 	bl	800866c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800967c:	6839      	ldr	r1, [r7, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	68ba      	ldr	r2, [r7, #8]
 8009682:	9202      	str	r2, [sp, #8]
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	2300      	movs	r3, #0
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	2300      	movs	r3, #0
 800968c:	460a      	mov	r2, r1
 800968e:	4922      	ldr	r1, [pc, #136]	@ (8009718 <vTaskStartScheduler+0xb8>)
 8009690:	4822      	ldr	r0, [pc, #136]	@ (800971c <vTaskStartScheduler+0xbc>)
 8009692:	f7ff fe09 	bl	80092a8 <xTaskCreateStatic>
 8009696:	4603      	mov	r3, r0
 8009698:	4a21      	ldr	r2, [pc, #132]	@ (8009720 <vTaskStartScheduler+0xc0>)
 800969a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800969c:	4b20      	ldr	r3, [pc, #128]	@ (8009720 <vTaskStartScheduler+0xc0>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d002      	beq.n	80096aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80096a4:	2301      	movs	r3, #1
 80096a6:	617b      	str	r3, [r7, #20]
 80096a8:	e001      	b.n	80096ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80096aa:	2300      	movs	r3, #0
 80096ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d102      	bne.n	80096ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80096b4:	f000 fd04 	bl	800a0c0 <xTimerCreateTimerTask>
 80096b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d116      	bne.n	80096ee <vTaskStartScheduler+0x8e>
	__asm volatile
 80096c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	613b      	str	r3, [r7, #16]
}
 80096d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80096d4:	4b13      	ldr	r3, [pc, #76]	@ (8009724 <vTaskStartScheduler+0xc4>)
 80096d6:	f04f 32ff 	mov.w	r2, #4294967295
 80096da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80096dc:	4b12      	ldr	r3, [pc, #72]	@ (8009728 <vTaskStartScheduler+0xc8>)
 80096de:	2201      	movs	r2, #1
 80096e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80096e2:	4b12      	ldr	r3, [pc, #72]	@ (800972c <vTaskStartScheduler+0xcc>)
 80096e4:	2200      	movs	r2, #0
 80096e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80096e8:	f001 f8d2 	bl	800a890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80096ec:	e00f      	b.n	800970e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096f4:	d10b      	bne.n	800970e <vTaskStartScheduler+0xae>
	__asm volatile
 80096f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fa:	f383 8811 	msr	BASEPRI, r3
 80096fe:	f3bf 8f6f 	isb	sy
 8009702:	f3bf 8f4f 	dsb	sy
 8009706:	60fb      	str	r3, [r7, #12]
}
 8009708:	bf00      	nop
 800970a:	bf00      	nop
 800970c:	e7fd      	b.n	800970a <vTaskStartScheduler+0xaa>
}
 800970e:	bf00      	nop
 8009710:	3718      	adds	r7, #24
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	0800e3d0 	.word	0x0800e3d0
 800971c:	08009d51 	.word	0x08009d51
 8009720:	200010fc 	.word	0x200010fc
 8009724:	200010f8 	.word	0x200010f8
 8009728:	200010e4 	.word	0x200010e4
 800972c:	200010dc 	.word	0x200010dc

08009730 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009730:	b480      	push	{r7}
 8009732:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009734:	4b04      	ldr	r3, [pc, #16]	@ (8009748 <vTaskSuspendAll+0x18>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	3301      	adds	r3, #1
 800973a:	4a03      	ldr	r2, [pc, #12]	@ (8009748 <vTaskSuspendAll+0x18>)
 800973c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800973e:	bf00      	nop
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr
 8009748:	20001100 	.word	0x20001100

0800974c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009752:	2300      	movs	r3, #0
 8009754:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009756:	2300      	movs	r3, #0
 8009758:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800975a:	4b42      	ldr	r3, [pc, #264]	@ (8009864 <xTaskResumeAll+0x118>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d10b      	bne.n	800977a <xTaskResumeAll+0x2e>
	__asm volatile
 8009762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	603b      	str	r3, [r7, #0]
}
 8009774:	bf00      	nop
 8009776:	bf00      	nop
 8009778:	e7fd      	b.n	8009776 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800977a:	f001 f92d 	bl	800a9d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800977e:	4b39      	ldr	r3, [pc, #228]	@ (8009864 <xTaskResumeAll+0x118>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	3b01      	subs	r3, #1
 8009784:	4a37      	ldr	r2, [pc, #220]	@ (8009864 <xTaskResumeAll+0x118>)
 8009786:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009788:	4b36      	ldr	r3, [pc, #216]	@ (8009864 <xTaskResumeAll+0x118>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d162      	bne.n	8009856 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009790:	4b35      	ldr	r3, [pc, #212]	@ (8009868 <xTaskResumeAll+0x11c>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d05e      	beq.n	8009856 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009798:	e02f      	b.n	80097fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800979a:	4b34      	ldr	r3, [pc, #208]	@ (800986c <xTaskResumeAll+0x120>)
 800979c:	68db      	ldr	r3, [r3, #12]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	3318      	adds	r3, #24
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7ff f81e 	bl	80087e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	3304      	adds	r3, #4
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7ff f819 	bl	80087e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ba:	4b2d      	ldr	r3, [pc, #180]	@ (8009870 <xTaskResumeAll+0x124>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	429a      	cmp	r2, r3
 80097c0:	d903      	bls.n	80097ca <xTaskResumeAll+0x7e>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c6:	4a2a      	ldr	r2, [pc, #168]	@ (8009870 <xTaskResumeAll+0x124>)
 80097c8:	6013      	str	r3, [r2, #0]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ce:	4613      	mov	r3, r2
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	4413      	add	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4a27      	ldr	r2, [pc, #156]	@ (8009874 <xTaskResumeAll+0x128>)
 80097d8:	441a      	add	r2, r3
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	3304      	adds	r3, #4
 80097de:	4619      	mov	r1, r3
 80097e0:	4610      	mov	r0, r2
 80097e2:	f7fe ffa4 	bl	800872e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097ea:	4b23      	ldr	r3, [pc, #140]	@ (8009878 <xTaskResumeAll+0x12c>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d302      	bcc.n	80097fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80097f4:	4b21      	ldr	r3, [pc, #132]	@ (800987c <xTaskResumeAll+0x130>)
 80097f6:	2201      	movs	r2, #1
 80097f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80097fa:	4b1c      	ldr	r3, [pc, #112]	@ (800986c <xTaskResumeAll+0x120>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d1cb      	bne.n	800979a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009808:	f000 fb58 	bl	8009ebc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800980c:	4b1c      	ldr	r3, [pc, #112]	@ (8009880 <xTaskResumeAll+0x134>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d010      	beq.n	800983a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009818:	f000 f846 	bl	80098a8 <xTaskIncrementTick>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d002      	beq.n	8009828 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009822:	4b16      	ldr	r3, [pc, #88]	@ (800987c <xTaskResumeAll+0x130>)
 8009824:	2201      	movs	r2, #1
 8009826:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	3b01      	subs	r3, #1
 800982c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1f1      	bne.n	8009818 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009834:	4b12      	ldr	r3, [pc, #72]	@ (8009880 <xTaskResumeAll+0x134>)
 8009836:	2200      	movs	r2, #0
 8009838:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800983a:	4b10      	ldr	r3, [pc, #64]	@ (800987c <xTaskResumeAll+0x130>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d009      	beq.n	8009856 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009842:	2301      	movs	r3, #1
 8009844:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009846:	4b0f      	ldr	r3, [pc, #60]	@ (8009884 <xTaskResumeAll+0x138>)
 8009848:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009856:	f001 f8f1 	bl	800aa3c <vPortExitCritical>

	return xAlreadyYielded;
 800985a:	68bb      	ldr	r3, [r7, #8]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	20001100 	.word	0x20001100
 8009868:	200010d8 	.word	0x200010d8
 800986c:	20001098 	.word	0x20001098
 8009870:	200010e0 	.word	0x200010e0
 8009874:	20000c08 	.word	0x20000c08
 8009878:	20000c04 	.word	0x20000c04
 800987c:	200010ec 	.word	0x200010ec
 8009880:	200010e8 	.word	0x200010e8
 8009884:	e000ed04 	.word	0xe000ed04

08009888 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800988e:	4b05      	ldr	r3, [pc, #20]	@ (80098a4 <xTaskGetTickCount+0x1c>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009894:	687b      	ldr	r3, [r7, #4]
}
 8009896:	4618      	mov	r0, r3
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	200010dc 	.word	0x200010dc

080098a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b086      	sub	sp, #24
 80098ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80098ae:	2300      	movs	r3, #0
 80098b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098b2:	4b4f      	ldr	r3, [pc, #316]	@ (80099f0 <xTaskIncrementTick+0x148>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f040 8090 	bne.w	80099dc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80098bc:	4b4d      	ldr	r3, [pc, #308]	@ (80099f4 <xTaskIncrementTick+0x14c>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3301      	adds	r3, #1
 80098c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80098c4:	4a4b      	ldr	r2, [pc, #300]	@ (80099f4 <xTaskIncrementTick+0x14c>)
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d121      	bne.n	8009914 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80098d0:	4b49      	ldr	r3, [pc, #292]	@ (80099f8 <xTaskIncrementTick+0x150>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00b      	beq.n	80098f2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	603b      	str	r3, [r7, #0]
}
 80098ec:	bf00      	nop
 80098ee:	bf00      	nop
 80098f0:	e7fd      	b.n	80098ee <xTaskIncrementTick+0x46>
 80098f2:	4b41      	ldr	r3, [pc, #260]	@ (80099f8 <xTaskIncrementTick+0x150>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	60fb      	str	r3, [r7, #12]
 80098f8:	4b40      	ldr	r3, [pc, #256]	@ (80099fc <xTaskIncrementTick+0x154>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a3e      	ldr	r2, [pc, #248]	@ (80099f8 <xTaskIncrementTick+0x150>)
 80098fe:	6013      	str	r3, [r2, #0]
 8009900:	4a3e      	ldr	r2, [pc, #248]	@ (80099fc <xTaskIncrementTick+0x154>)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6013      	str	r3, [r2, #0]
 8009906:	4b3e      	ldr	r3, [pc, #248]	@ (8009a00 <xTaskIncrementTick+0x158>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	3301      	adds	r3, #1
 800990c:	4a3c      	ldr	r2, [pc, #240]	@ (8009a00 <xTaskIncrementTick+0x158>)
 800990e:	6013      	str	r3, [r2, #0]
 8009910:	f000 fad4 	bl	8009ebc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009914:	4b3b      	ldr	r3, [pc, #236]	@ (8009a04 <xTaskIncrementTick+0x15c>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	429a      	cmp	r2, r3
 800991c:	d349      	bcc.n	80099b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800991e:	4b36      	ldr	r3, [pc, #216]	@ (80099f8 <xTaskIncrementTick+0x150>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d104      	bne.n	8009932 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009928:	4b36      	ldr	r3, [pc, #216]	@ (8009a04 <xTaskIncrementTick+0x15c>)
 800992a:	f04f 32ff 	mov.w	r2, #4294967295
 800992e:	601a      	str	r2, [r3, #0]
					break;
 8009930:	e03f      	b.n	80099b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009932:	4b31      	ldr	r3, [pc, #196]	@ (80099f8 <xTaskIncrementTick+0x150>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	429a      	cmp	r2, r3
 8009948:	d203      	bcs.n	8009952 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800994a:	4a2e      	ldr	r2, [pc, #184]	@ (8009a04 <xTaskIncrementTick+0x15c>)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009950:	e02f      	b.n	80099b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	3304      	adds	r3, #4
 8009956:	4618      	mov	r0, r3
 8009958:	f7fe ff46 	bl	80087e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009960:	2b00      	cmp	r3, #0
 8009962:	d004      	beq.n	800996e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	3318      	adds	r3, #24
 8009968:	4618      	mov	r0, r3
 800996a:	f7fe ff3d 	bl	80087e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009972:	4b25      	ldr	r3, [pc, #148]	@ (8009a08 <xTaskIncrementTick+0x160>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	429a      	cmp	r2, r3
 8009978:	d903      	bls.n	8009982 <xTaskIncrementTick+0xda>
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800997e:	4a22      	ldr	r2, [pc, #136]	@ (8009a08 <xTaskIncrementTick+0x160>)
 8009980:	6013      	str	r3, [r2, #0]
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009986:	4613      	mov	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	4413      	add	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4a1f      	ldr	r2, [pc, #124]	@ (8009a0c <xTaskIncrementTick+0x164>)
 8009990:	441a      	add	r2, r3
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	3304      	adds	r3, #4
 8009996:	4619      	mov	r1, r3
 8009998:	4610      	mov	r0, r2
 800999a:	f7fe fec8 	bl	800872e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009a10 <xTaskIncrementTick+0x168>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d3b8      	bcc.n	800991e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80099ac:	2301      	movs	r3, #1
 80099ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099b0:	e7b5      	b.n	800991e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80099b2:	4b17      	ldr	r3, [pc, #92]	@ (8009a10 <xTaskIncrementTick+0x168>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099b8:	4914      	ldr	r1, [pc, #80]	@ (8009a0c <xTaskIncrementTick+0x164>)
 80099ba:	4613      	mov	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4413      	add	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	440b      	add	r3, r1
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d901      	bls.n	80099ce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80099ca:	2301      	movs	r3, #1
 80099cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80099ce:	4b11      	ldr	r3, [pc, #68]	@ (8009a14 <xTaskIncrementTick+0x16c>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d007      	beq.n	80099e6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80099d6:	2301      	movs	r3, #1
 80099d8:	617b      	str	r3, [r7, #20]
 80099da:	e004      	b.n	80099e6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80099dc:	4b0e      	ldr	r3, [pc, #56]	@ (8009a18 <xTaskIncrementTick+0x170>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3301      	adds	r3, #1
 80099e2:	4a0d      	ldr	r2, [pc, #52]	@ (8009a18 <xTaskIncrementTick+0x170>)
 80099e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80099e6:	697b      	ldr	r3, [r7, #20]
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3718      	adds	r7, #24
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	20001100 	.word	0x20001100
 80099f4:	200010dc 	.word	0x200010dc
 80099f8:	20001090 	.word	0x20001090
 80099fc:	20001094 	.word	0x20001094
 8009a00:	200010f0 	.word	0x200010f0
 8009a04:	200010f8 	.word	0x200010f8
 8009a08:	200010e0 	.word	0x200010e0
 8009a0c:	20000c08 	.word	0x20000c08
 8009a10:	20000c04 	.word	0x20000c04
 8009a14:	200010ec 	.word	0x200010ec
 8009a18:	200010e8 	.word	0x200010e8

08009a1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009a22:	4b28      	ldr	r3, [pc, #160]	@ (8009ac4 <vTaskSwitchContext+0xa8>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d003      	beq.n	8009a32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009a2a:	4b27      	ldr	r3, [pc, #156]	@ (8009ac8 <vTaskSwitchContext+0xac>)
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009a30:	e042      	b.n	8009ab8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009a32:	4b25      	ldr	r3, [pc, #148]	@ (8009ac8 <vTaskSwitchContext+0xac>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a38:	4b24      	ldr	r3, [pc, #144]	@ (8009acc <vTaskSwitchContext+0xb0>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	60fb      	str	r3, [r7, #12]
 8009a3e:	e011      	b.n	8009a64 <vTaskSwitchContext+0x48>
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10b      	bne.n	8009a5e <vTaskSwitchContext+0x42>
	__asm volatile
 8009a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	607b      	str	r3, [r7, #4]
}
 8009a58:	bf00      	nop
 8009a5a:	bf00      	nop
 8009a5c:	e7fd      	b.n	8009a5a <vTaskSwitchContext+0x3e>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	3b01      	subs	r3, #1
 8009a62:	60fb      	str	r3, [r7, #12]
 8009a64:	491a      	ldr	r1, [pc, #104]	@ (8009ad0 <vTaskSwitchContext+0xb4>)
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	440b      	add	r3, r1
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d0e3      	beq.n	8009a40 <vTaskSwitchContext+0x24>
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	4413      	add	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4a13      	ldr	r2, [pc, #76]	@ (8009ad0 <vTaskSwitchContext+0xb4>)
 8009a84:	4413      	add	r3, r2
 8009a86:	60bb      	str	r3, [r7, #8]
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	605a      	str	r2, [r3, #4]
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	685a      	ldr	r2, [r3, #4]
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	3308      	adds	r3, #8
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d104      	bne.n	8009aa8 <vTaskSwitchContext+0x8c>
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	685b      	ldr	r3, [r3, #4]
 8009aa2:	685a      	ldr	r2, [r3, #4]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	605a      	str	r2, [r3, #4]
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	4a09      	ldr	r2, [pc, #36]	@ (8009ad4 <vTaskSwitchContext+0xb8>)
 8009ab0:	6013      	str	r3, [r2, #0]
 8009ab2:	4a06      	ldr	r2, [pc, #24]	@ (8009acc <vTaskSwitchContext+0xb0>)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6013      	str	r3, [r2, #0]
}
 8009ab8:	bf00      	nop
 8009aba:	3714      	adds	r7, #20
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr
 8009ac4:	20001100 	.word	0x20001100
 8009ac8:	200010ec 	.word	0x200010ec
 8009acc:	200010e0 	.word	0x200010e0
 8009ad0:	20000c08 	.word	0x20000c08
 8009ad4:	20000c04 	.word	0x20000c04

08009ad8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10b      	bne.n	8009b00 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	60fb      	str	r3, [r7, #12]
}
 8009afa:	bf00      	nop
 8009afc:	bf00      	nop
 8009afe:	e7fd      	b.n	8009afc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b00:	4b07      	ldr	r3, [pc, #28]	@ (8009b20 <vTaskPlaceOnEventList+0x48>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3318      	adds	r3, #24
 8009b06:	4619      	mov	r1, r3
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f7fe fe34 	bl	8008776 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b0e:	2101      	movs	r1, #1
 8009b10:	6838      	ldr	r0, [r7, #0]
 8009b12:	f000 fa81 	bl	800a018 <prvAddCurrentTaskToDelayedList>
}
 8009b16:	bf00      	nop
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	20000c04 	.word	0x20000c04

08009b24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b086      	sub	sp, #24
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d10b      	bne.n	8009b4e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8009b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	617b      	str	r3, [r7, #20]
}
 8009b48:	bf00      	nop
 8009b4a:	bf00      	nop
 8009b4c:	e7fd      	b.n	8009b4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8009b78 <vTaskPlaceOnEventListRestricted+0x54>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	3318      	adds	r3, #24
 8009b54:	4619      	mov	r1, r3
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f7fe fde9 	bl	800872e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d002      	beq.n	8009b68 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009b62:	f04f 33ff 	mov.w	r3, #4294967295
 8009b66:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009b68:	6879      	ldr	r1, [r7, #4]
 8009b6a:	68b8      	ldr	r0, [r7, #8]
 8009b6c:	f000 fa54 	bl	800a018 <prvAddCurrentTaskToDelayedList>
	}
 8009b70:	bf00      	nop
 8009b72:	3718      	adds	r7, #24
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	20000c04 	.word	0x20000c04

08009b7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	68db      	ldr	r3, [r3, #12]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10b      	bne.n	8009baa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	60fb      	str	r3, [r7, #12]
}
 8009ba4:	bf00      	nop
 8009ba6:	bf00      	nop
 8009ba8:	e7fd      	b.n	8009ba6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	3318      	adds	r3, #24
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fe fe1a 	bl	80087e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8009c2c <xTaskRemoveFromEventList+0xb0>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d11d      	bne.n	8009bf8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7fe fe11 	bl	80087e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bca:	4b19      	ldr	r3, [pc, #100]	@ (8009c30 <xTaskRemoveFromEventList+0xb4>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d903      	bls.n	8009bda <xTaskRemoveFromEventList+0x5e>
 8009bd2:	693b      	ldr	r3, [r7, #16]
 8009bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd6:	4a16      	ldr	r2, [pc, #88]	@ (8009c30 <xTaskRemoveFromEventList+0xb4>)
 8009bd8:	6013      	str	r3, [r2, #0]
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bde:	4613      	mov	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4413      	add	r3, r2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4a13      	ldr	r2, [pc, #76]	@ (8009c34 <xTaskRemoveFromEventList+0xb8>)
 8009be8:	441a      	add	r2, r3
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	3304      	adds	r3, #4
 8009bee:	4619      	mov	r1, r3
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	f7fe fd9c 	bl	800872e <vListInsertEnd>
 8009bf6:	e005      	b.n	8009c04 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	3318      	adds	r3, #24
 8009bfc:	4619      	mov	r1, r3
 8009bfe:	480e      	ldr	r0, [pc, #56]	@ (8009c38 <xTaskRemoveFromEventList+0xbc>)
 8009c00:	f7fe fd95 	bl	800872e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c08:	4b0c      	ldr	r3, [pc, #48]	@ (8009c3c <xTaskRemoveFromEventList+0xc0>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d905      	bls.n	8009c1e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009c12:	2301      	movs	r3, #1
 8009c14:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009c16:	4b0a      	ldr	r3, [pc, #40]	@ (8009c40 <xTaskRemoveFromEventList+0xc4>)
 8009c18:	2201      	movs	r2, #1
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	e001      	b.n	8009c22 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009c22:	697b      	ldr	r3, [r7, #20]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3718      	adds	r7, #24
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	20001100 	.word	0x20001100
 8009c30:	200010e0 	.word	0x200010e0
 8009c34:	20000c08 	.word	0x20000c08
 8009c38:	20001098 	.word	0x20001098
 8009c3c:	20000c04 	.word	0x20000c04
 8009c40:	200010ec 	.word	0x200010ec

08009c44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009c4c:	4b06      	ldr	r3, [pc, #24]	@ (8009c68 <vTaskInternalSetTimeOutState+0x24>)
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009c54:	4b05      	ldr	r3, [pc, #20]	@ (8009c6c <vTaskInternalSetTimeOutState+0x28>)
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	605a      	str	r2, [r3, #4]
}
 8009c5c:	bf00      	nop
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	200010f0 	.word	0x200010f0
 8009c6c:	200010dc 	.word	0x200010dc

08009c70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b088      	sub	sp, #32
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10b      	bne.n	8009c98 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	613b      	str	r3, [r7, #16]
}
 8009c92:	bf00      	nop
 8009c94:	bf00      	nop
 8009c96:	e7fd      	b.n	8009c94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10b      	bne.n	8009cb6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	60fb      	str	r3, [r7, #12]
}
 8009cb0:	bf00      	nop
 8009cb2:	bf00      	nop
 8009cb4:	e7fd      	b.n	8009cb2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009cb6:	f000 fe8f 	bl	800a9d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009cba:	4b1d      	ldr	r3, [pc, #116]	@ (8009d30 <xTaskCheckForTimeOut+0xc0>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	69ba      	ldr	r2, [r7, #24]
 8009cc6:	1ad3      	subs	r3, r2, r3
 8009cc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd2:	d102      	bne.n	8009cda <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	61fb      	str	r3, [r7, #28]
 8009cd8:	e023      	b.n	8009d22 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	4b15      	ldr	r3, [pc, #84]	@ (8009d34 <xTaskCheckForTimeOut+0xc4>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d007      	beq.n	8009cf6 <xTaskCheckForTimeOut+0x86>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	69ba      	ldr	r2, [r7, #24]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d302      	bcc.n	8009cf6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	61fb      	str	r3, [r7, #28]
 8009cf4:	e015      	b.n	8009d22 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	697a      	ldr	r2, [r7, #20]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d20b      	bcs.n	8009d18 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	1ad2      	subs	r2, r2, r3
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f7ff ff99 	bl	8009c44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009d12:	2300      	movs	r3, #0
 8009d14:	61fb      	str	r3, [r7, #28]
 8009d16:	e004      	b.n	8009d22 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009d22:	f000 fe8b 	bl	800aa3c <vPortExitCritical>

	return xReturn;
 8009d26:	69fb      	ldr	r3, [r7, #28]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3720      	adds	r7, #32
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	200010dc 	.word	0x200010dc
 8009d34:	200010f0 	.word	0x200010f0

08009d38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009d38:	b480      	push	{r7}
 8009d3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009d3c:	4b03      	ldr	r3, [pc, #12]	@ (8009d4c <vTaskMissedYield+0x14>)
 8009d3e:	2201      	movs	r2, #1
 8009d40:	601a      	str	r2, [r3, #0]
}
 8009d42:	bf00      	nop
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr
 8009d4c:	200010ec 	.word	0x200010ec

08009d50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d58:	f000 f852 	bl	8009e00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d5c:	4b06      	ldr	r3, [pc, #24]	@ (8009d78 <prvIdleTask+0x28>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d9f9      	bls.n	8009d58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d64:	4b05      	ldr	r3, [pc, #20]	@ (8009d7c <prvIdleTask+0x2c>)
 8009d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d6a:	601a      	str	r2, [r3, #0]
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d74:	e7f0      	b.n	8009d58 <prvIdleTask+0x8>
 8009d76:	bf00      	nop
 8009d78:	20000c08 	.word	0x20000c08
 8009d7c:	e000ed04 	.word	0xe000ed04

08009d80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d86:	2300      	movs	r3, #0
 8009d88:	607b      	str	r3, [r7, #4]
 8009d8a:	e00c      	b.n	8009da6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	4413      	add	r3, r2
 8009d94:	009b      	lsls	r3, r3, #2
 8009d96:	4a12      	ldr	r2, [pc, #72]	@ (8009de0 <prvInitialiseTaskLists+0x60>)
 8009d98:	4413      	add	r3, r2
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fe fc9a 	bl	80086d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	3301      	adds	r3, #1
 8009da4:	607b      	str	r3, [r7, #4]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2b37      	cmp	r3, #55	@ 0x37
 8009daa:	d9ef      	bls.n	8009d8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009dac:	480d      	ldr	r0, [pc, #52]	@ (8009de4 <prvInitialiseTaskLists+0x64>)
 8009dae:	f7fe fc91 	bl	80086d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009db2:	480d      	ldr	r0, [pc, #52]	@ (8009de8 <prvInitialiseTaskLists+0x68>)
 8009db4:	f7fe fc8e 	bl	80086d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009db8:	480c      	ldr	r0, [pc, #48]	@ (8009dec <prvInitialiseTaskLists+0x6c>)
 8009dba:	f7fe fc8b 	bl	80086d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009dbe:	480c      	ldr	r0, [pc, #48]	@ (8009df0 <prvInitialiseTaskLists+0x70>)
 8009dc0:	f7fe fc88 	bl	80086d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009dc4:	480b      	ldr	r0, [pc, #44]	@ (8009df4 <prvInitialiseTaskLists+0x74>)
 8009dc6:	f7fe fc85 	bl	80086d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009dca:	4b0b      	ldr	r3, [pc, #44]	@ (8009df8 <prvInitialiseTaskLists+0x78>)
 8009dcc:	4a05      	ldr	r2, [pc, #20]	@ (8009de4 <prvInitialiseTaskLists+0x64>)
 8009dce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8009dfc <prvInitialiseTaskLists+0x7c>)
 8009dd2:	4a05      	ldr	r2, [pc, #20]	@ (8009de8 <prvInitialiseTaskLists+0x68>)
 8009dd4:	601a      	str	r2, [r3, #0]
}
 8009dd6:	bf00      	nop
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	20000c08 	.word	0x20000c08
 8009de4:	20001068 	.word	0x20001068
 8009de8:	2000107c 	.word	0x2000107c
 8009dec:	20001098 	.word	0x20001098
 8009df0:	200010ac 	.word	0x200010ac
 8009df4:	200010c4 	.word	0x200010c4
 8009df8:	20001090 	.word	0x20001090
 8009dfc:	20001094 	.word	0x20001094

08009e00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b082      	sub	sp, #8
 8009e04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e06:	e019      	b.n	8009e3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009e08:	f000 fde6 	bl	800a9d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e0c:	4b10      	ldr	r3, [pc, #64]	@ (8009e50 <prvCheckTasksWaitingTermination+0x50>)
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	3304      	adds	r3, #4
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fe fce5 	bl	80087e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8009e54 <prvCheckTasksWaitingTermination+0x54>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	4a0b      	ldr	r2, [pc, #44]	@ (8009e54 <prvCheckTasksWaitingTermination+0x54>)
 8009e26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e28:	4b0b      	ldr	r3, [pc, #44]	@ (8009e58 <prvCheckTasksWaitingTermination+0x58>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8009e58 <prvCheckTasksWaitingTermination+0x58>)
 8009e30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e32:	f000 fe03 	bl	800aa3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f810 	bl	8009e5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e3c:	4b06      	ldr	r3, [pc, #24]	@ (8009e58 <prvCheckTasksWaitingTermination+0x58>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1e1      	bne.n	8009e08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e44:	bf00      	nop
 8009e46:	bf00      	nop
 8009e48:	3708      	adds	r7, #8
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	200010ac 	.word	0x200010ac
 8009e54:	200010d8 	.word	0x200010d8
 8009e58:	200010c0 	.word	0x200010c0

08009e5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d108      	bne.n	8009e80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e72:	4618      	mov	r0, r3
 8009e74:	f000 ffa0 	bl	800adb8 <vPortFree>
				vPortFree( pxTCB );
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 ff9d 	bl	800adb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e7e:	e019      	b.n	8009eb4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d103      	bne.n	8009e92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 ff94 	bl	800adb8 <vPortFree>
	}
 8009e90:	e010      	b.n	8009eb4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d00b      	beq.n	8009eb4 <prvDeleteTCB+0x58>
	__asm volatile
 8009e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea0:	f383 8811 	msr	BASEPRI, r3
 8009ea4:	f3bf 8f6f 	isb	sy
 8009ea8:	f3bf 8f4f 	dsb	sy
 8009eac:	60fb      	str	r3, [r7, #12]
}
 8009eae:	bf00      	nop
 8009eb0:	bf00      	nop
 8009eb2:	e7fd      	b.n	8009eb0 <prvDeleteTCB+0x54>
	}
 8009eb4:	bf00      	nop
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8009ef4 <prvResetNextTaskUnblockTime+0x38>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d104      	bne.n	8009ed6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8009ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8009ece:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ed4:	e008      	b.n	8009ee8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ed6:	4b07      	ldr	r3, [pc, #28]	@ (8009ef4 <prvResetNextTaskUnblockTime+0x38>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	4a04      	ldr	r2, [pc, #16]	@ (8009ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8009ee6:	6013      	str	r3, [r2, #0]
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr
 8009ef4:	20001090 	.word	0x20001090
 8009ef8:	200010f8 	.word	0x200010f8

08009efc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009f02:	4b0b      	ldr	r3, [pc, #44]	@ (8009f30 <xTaskGetSchedulerState+0x34>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d102      	bne.n	8009f10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	607b      	str	r3, [r7, #4]
 8009f0e:	e008      	b.n	8009f22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f10:	4b08      	ldr	r3, [pc, #32]	@ (8009f34 <xTaskGetSchedulerState+0x38>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d102      	bne.n	8009f1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009f18:	2302      	movs	r3, #2
 8009f1a:	607b      	str	r3, [r7, #4]
 8009f1c:	e001      	b.n	8009f22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009f22:	687b      	ldr	r3, [r7, #4]
	}
 8009f24:	4618      	mov	r0, r3
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	200010e4 	.word	0x200010e4
 8009f34:	20001100 	.word	0x20001100

08009f38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f44:	2300      	movs	r3, #0
 8009f46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d058      	beq.n	800a000 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800a00c <xTaskPriorityDisinherit+0xd4>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d00b      	beq.n	8009f70 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5c:	f383 8811 	msr	BASEPRI, r3
 8009f60:	f3bf 8f6f 	isb	sy
 8009f64:	f3bf 8f4f 	dsb	sy
 8009f68:	60fb      	str	r3, [r7, #12]
}
 8009f6a:	bf00      	nop
 8009f6c:	bf00      	nop
 8009f6e:	e7fd      	b.n	8009f6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10b      	bne.n	8009f90 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	60bb      	str	r3, [r7, #8]
}
 8009f8a:	bf00      	nop
 8009f8c:	bf00      	nop
 8009f8e:	e7fd      	b.n	8009f8c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f94:	1e5a      	subs	r2, r3, #1
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d02c      	beq.n	800a000 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d128      	bne.n	800a000 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe fc18 	bl	80087e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fc4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fd0:	4b0f      	ldr	r3, [pc, #60]	@ (800a010 <xTaskPriorityDisinherit+0xd8>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d903      	bls.n	8009fe0 <xTaskPriorityDisinherit+0xa8>
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fdc:	4a0c      	ldr	r2, [pc, #48]	@ (800a010 <xTaskPriorityDisinherit+0xd8>)
 8009fde:	6013      	str	r3, [r2, #0]
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4413      	add	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4a09      	ldr	r2, [pc, #36]	@ (800a014 <xTaskPriorityDisinherit+0xdc>)
 8009fee:	441a      	add	r2, r3
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	f7fe fb99 	bl	800872e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a000:	697b      	ldr	r3, [r7, #20]
	}
 800a002:	4618      	mov	r0, r3
 800a004:	3718      	adds	r7, #24
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	20000c04 	.word	0x20000c04
 800a010:	200010e0 	.word	0x200010e0
 800a014:	20000c08 	.word	0x20000c08

0800a018 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a022:	4b21      	ldr	r3, [pc, #132]	@ (800a0a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a028:	4b20      	ldr	r3, [pc, #128]	@ (800a0ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	3304      	adds	r3, #4
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fe fbda 	bl	80087e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a03a:	d10a      	bne.n	800a052 <prvAddCurrentTaskToDelayedList+0x3a>
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d007      	beq.n	800a052 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a042:	4b1a      	ldr	r3, [pc, #104]	@ (800a0ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	3304      	adds	r3, #4
 800a048:	4619      	mov	r1, r3
 800a04a:	4819      	ldr	r0, [pc, #100]	@ (800a0b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800a04c:	f7fe fb6f 	bl	800872e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a050:	e026      	b.n	800a0a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4413      	add	r3, r2
 800a058:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a05a:	4b14      	ldr	r3, [pc, #80]	@ (800a0ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	429a      	cmp	r2, r3
 800a068:	d209      	bcs.n	800a07e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a06a:	4b12      	ldr	r3, [pc, #72]	@ (800a0b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	4b0f      	ldr	r3, [pc, #60]	@ (800a0ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	3304      	adds	r3, #4
 800a074:	4619      	mov	r1, r3
 800a076:	4610      	mov	r0, r2
 800a078:	f7fe fb7d 	bl	8008776 <vListInsert>
}
 800a07c:	e010      	b.n	800a0a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a07e:	4b0e      	ldr	r3, [pc, #56]	@ (800a0b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	4b0a      	ldr	r3, [pc, #40]	@ (800a0ac <prvAddCurrentTaskToDelayedList+0x94>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	3304      	adds	r3, #4
 800a088:	4619      	mov	r1, r3
 800a08a:	4610      	mov	r0, r2
 800a08c:	f7fe fb73 	bl	8008776 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a090:	4b0a      	ldr	r3, [pc, #40]	@ (800a0bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	429a      	cmp	r2, r3
 800a098:	d202      	bcs.n	800a0a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a09a:	4a08      	ldr	r2, [pc, #32]	@ (800a0bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	6013      	str	r3, [r2, #0]
}
 800a0a0:	bf00      	nop
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	200010dc 	.word	0x200010dc
 800a0ac:	20000c04 	.word	0x20000c04
 800a0b0:	200010c4 	.word	0x200010c4
 800a0b4:	20001094 	.word	0x20001094
 800a0b8:	20001090 	.word	0x20001090
 800a0bc:	200010f8 	.word	0x200010f8

0800a0c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b08a      	sub	sp, #40	@ 0x28
 800a0c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a0ca:	f000 fb13 	bl	800a6f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a0ce:	4b1d      	ldr	r3, [pc, #116]	@ (800a144 <xTimerCreateTimerTask+0x84>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d021      	beq.n	800a11a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a0de:	1d3a      	adds	r2, r7, #4
 800a0e0:	f107 0108 	add.w	r1, r7, #8
 800a0e4:	f107 030c 	add.w	r3, r7, #12
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7fe fad9 	bl	80086a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a0ee:	6879      	ldr	r1, [r7, #4]
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	9202      	str	r2, [sp, #8]
 800a0f6:	9301      	str	r3, [sp, #4]
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	9300      	str	r3, [sp, #0]
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	460a      	mov	r2, r1
 800a100:	4911      	ldr	r1, [pc, #68]	@ (800a148 <xTimerCreateTimerTask+0x88>)
 800a102:	4812      	ldr	r0, [pc, #72]	@ (800a14c <xTimerCreateTimerTask+0x8c>)
 800a104:	f7ff f8d0 	bl	80092a8 <xTaskCreateStatic>
 800a108:	4603      	mov	r3, r0
 800a10a:	4a11      	ldr	r2, [pc, #68]	@ (800a150 <xTimerCreateTimerTask+0x90>)
 800a10c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a10e:	4b10      	ldr	r3, [pc, #64]	@ (800a150 <xTimerCreateTimerTask+0x90>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d001      	beq.n	800a11a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a116:	2301      	movs	r3, #1
 800a118:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10b      	bne.n	800a138 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a124:	f383 8811 	msr	BASEPRI, r3
 800a128:	f3bf 8f6f 	isb	sy
 800a12c:	f3bf 8f4f 	dsb	sy
 800a130:	613b      	str	r3, [r7, #16]
}
 800a132:	bf00      	nop
 800a134:	bf00      	nop
 800a136:	e7fd      	b.n	800a134 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a138:	697b      	ldr	r3, [r7, #20]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	20001134 	.word	0x20001134
 800a148:	0800e3d8 	.word	0x0800e3d8
 800a14c:	0800a28d 	.word	0x0800a28d
 800a150:	20001138 	.word	0x20001138

0800a154 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b08a      	sub	sp, #40	@ 0x28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
 800a160:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a162:	2300      	movs	r3, #0
 800a164:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10b      	bne.n	800a184 <xTimerGenericCommand+0x30>
	__asm volatile
 800a16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a170:	f383 8811 	msr	BASEPRI, r3
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	623b      	str	r3, [r7, #32]
}
 800a17e:	bf00      	nop
 800a180:	bf00      	nop
 800a182:	e7fd      	b.n	800a180 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a184:	4b19      	ldr	r3, [pc, #100]	@ (800a1ec <xTimerGenericCommand+0x98>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d02a      	beq.n	800a1e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	2b05      	cmp	r3, #5
 800a19c:	dc18      	bgt.n	800a1d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a19e:	f7ff fead 	bl	8009efc <xTaskGetSchedulerState>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d109      	bne.n	800a1bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a1a8:	4b10      	ldr	r3, [pc, #64]	@ (800a1ec <xTimerGenericCommand+0x98>)
 800a1aa:	6818      	ldr	r0, [r3, #0]
 800a1ac:	f107 0110 	add.w	r1, r7, #16
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1b4:	f7fe fc88 	bl	8008ac8 <xQueueGenericSend>
 800a1b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800a1ba:	e012      	b.n	800a1e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a1bc:	4b0b      	ldr	r3, [pc, #44]	@ (800a1ec <xTimerGenericCommand+0x98>)
 800a1be:	6818      	ldr	r0, [r3, #0]
 800a1c0:	f107 0110 	add.w	r1, r7, #16
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f7fe fc7e 	bl	8008ac8 <xQueueGenericSend>
 800a1cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800a1ce:	e008      	b.n	800a1e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a1d0:	4b06      	ldr	r3, [pc, #24]	@ (800a1ec <xTimerGenericCommand+0x98>)
 800a1d2:	6818      	ldr	r0, [r3, #0]
 800a1d4:	f107 0110 	add.w	r1, r7, #16
 800a1d8:	2300      	movs	r3, #0
 800a1da:	683a      	ldr	r2, [r7, #0]
 800a1dc:	f7fe fd76 	bl	8008ccc <xQueueGenericSendFromISR>
 800a1e0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3728      	adds	r7, #40	@ 0x28
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}
 800a1ec:	20001134 	.word	0x20001134

0800a1f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b088      	sub	sp, #32
 800a1f4:	af02      	add	r7, sp, #8
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1fa:	4b23      	ldr	r3, [pc, #140]	@ (800a288 <prvProcessExpiredTimer+0x98>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	68db      	ldr	r3, [r3, #12]
 800a202:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	3304      	adds	r3, #4
 800a208:	4618      	mov	r0, r3
 800a20a:	f7fe faed 	bl	80087e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a214:	f003 0304 	and.w	r3, r3, #4
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d023      	beq.n	800a264 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	699a      	ldr	r2, [r3, #24]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	18d1      	adds	r1, r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	683a      	ldr	r2, [r7, #0]
 800a228:	6978      	ldr	r0, [r7, #20]
 800a22a:	f000 f8d5 	bl	800a3d8 <prvInsertTimerInActiveList>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d020      	beq.n	800a276 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a234:	2300      	movs	r3, #0
 800a236:	9300      	str	r3, [sp, #0]
 800a238:	2300      	movs	r3, #0
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	2100      	movs	r1, #0
 800a23e:	6978      	ldr	r0, [r7, #20]
 800a240:	f7ff ff88 	bl	800a154 <xTimerGenericCommand>
 800a244:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d114      	bne.n	800a276 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800a24c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a250:	f383 8811 	msr	BASEPRI, r3
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	60fb      	str	r3, [r7, #12]
}
 800a25e:	bf00      	nop
 800a260:	bf00      	nop
 800a262:	e7fd      	b.n	800a260 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a26a:	f023 0301 	bic.w	r3, r3, #1
 800a26e:	b2da      	uxtb	r2, r3
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	6978      	ldr	r0, [r7, #20]
 800a27c:	4798      	blx	r3
}
 800a27e:	bf00      	nop
 800a280:	3718      	adds	r7, #24
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	2000112c 	.word	0x2000112c

0800a28c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b084      	sub	sp, #16
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a294:	f107 0308 	add.w	r3, r7, #8
 800a298:	4618      	mov	r0, r3
 800a29a:	f000 f859 	bl	800a350 <prvGetNextExpireTime>
 800a29e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f000 f805 	bl	800a2b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a2aa:	f000 f8d7 	bl	800a45c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a2ae:	bf00      	nop
 800a2b0:	e7f0      	b.n	800a294 <prvTimerTask+0x8>
	...

0800a2b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a2be:	f7ff fa37 	bl	8009730 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2c2:	f107 0308 	add.w	r3, r7, #8
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 f866 	bl	800a398 <prvSampleTimeNow>
 800a2cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d130      	bne.n	800a336 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10a      	bne.n	800a2f0 <prvProcessTimerOrBlockTask+0x3c>
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d806      	bhi.n	800a2f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a2e2:	f7ff fa33 	bl	800974c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a2e6:	68f9      	ldr	r1, [r7, #12]
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7ff ff81 	bl	800a1f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a2ee:	e024      	b.n	800a33a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d008      	beq.n	800a308 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a2f6:	4b13      	ldr	r3, [pc, #76]	@ (800a344 <prvProcessTimerOrBlockTask+0x90>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d101      	bne.n	800a304 <prvProcessTimerOrBlockTask+0x50>
 800a300:	2301      	movs	r3, #1
 800a302:	e000      	b.n	800a306 <prvProcessTimerOrBlockTask+0x52>
 800a304:	2300      	movs	r3, #0
 800a306:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a308:	4b0f      	ldr	r3, [pc, #60]	@ (800a348 <prvProcessTimerOrBlockTask+0x94>)
 800a30a:	6818      	ldr	r0, [r3, #0]
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	4619      	mov	r1, r3
 800a316:	f7fe ff93 	bl	8009240 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a31a:	f7ff fa17 	bl	800974c <xTaskResumeAll>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10a      	bne.n	800a33a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a324:	4b09      	ldr	r3, [pc, #36]	@ (800a34c <prvProcessTimerOrBlockTask+0x98>)
 800a326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a32a:	601a      	str	r2, [r3, #0]
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	f3bf 8f6f 	isb	sy
}
 800a334:	e001      	b.n	800a33a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a336:	f7ff fa09 	bl	800974c <xTaskResumeAll>
}
 800a33a:	bf00      	nop
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	20001130 	.word	0x20001130
 800a348:	20001134 	.word	0x20001134
 800a34c:	e000ed04 	.word	0xe000ed04

0800a350 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a358:	4b0e      	ldr	r3, [pc, #56]	@ (800a394 <prvGetNextExpireTime+0x44>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d101      	bne.n	800a366 <prvGetNextExpireTime+0x16>
 800a362:	2201      	movs	r2, #1
 800a364:	e000      	b.n	800a368 <prvGetNextExpireTime+0x18>
 800a366:	2200      	movs	r2, #0
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d105      	bne.n	800a380 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a374:	4b07      	ldr	r3, [pc, #28]	@ (800a394 <prvGetNextExpireTime+0x44>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	60fb      	str	r3, [r7, #12]
 800a37e:	e001      	b.n	800a384 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a380:	2300      	movs	r3, #0
 800a382:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a384:	68fb      	ldr	r3, [r7, #12]
}
 800a386:	4618      	mov	r0, r3
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	2000112c 	.word	0x2000112c

0800a398 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a3a0:	f7ff fa72 	bl	8009888 <xTaskGetTickCount>
 800a3a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a3a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a3d4 <prvSampleTimeNow+0x3c>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d205      	bcs.n	800a3bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a3b0:	f000 f93a 	bl	800a628 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	601a      	str	r2, [r3, #0]
 800a3ba:	e002      	b.n	800a3c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a3c2:	4a04      	ldr	r2, [pc, #16]	@ (800a3d4 <prvSampleTimeNow+0x3c>)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	2000113c 	.word	0x2000113c

0800a3d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
 800a3e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	68fa      	ldr	r2, [r7, #12]
 800a3f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d812      	bhi.n	800a424 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	1ad2      	subs	r2, r2, r3
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	699b      	ldr	r3, [r3, #24]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d302      	bcc.n	800a412 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a40c:	2301      	movs	r3, #1
 800a40e:	617b      	str	r3, [r7, #20]
 800a410:	e01b      	b.n	800a44a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a412:	4b10      	ldr	r3, [pc, #64]	@ (800a454 <prvInsertTimerInActiveList+0x7c>)
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	3304      	adds	r3, #4
 800a41a:	4619      	mov	r1, r3
 800a41c:	4610      	mov	r0, r2
 800a41e:	f7fe f9aa 	bl	8008776 <vListInsert>
 800a422:	e012      	b.n	800a44a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d206      	bcs.n	800a43a <prvInsertTimerInActiveList+0x62>
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	429a      	cmp	r2, r3
 800a432:	d302      	bcc.n	800a43a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a434:	2301      	movs	r3, #1
 800a436:	617b      	str	r3, [r7, #20]
 800a438:	e007      	b.n	800a44a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a43a:	4b07      	ldr	r3, [pc, #28]	@ (800a458 <prvInsertTimerInActiveList+0x80>)
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3304      	adds	r3, #4
 800a442:	4619      	mov	r1, r3
 800a444:	4610      	mov	r0, r2
 800a446:	f7fe f996 	bl	8008776 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a44a:	697b      	ldr	r3, [r7, #20]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3718      	adds	r7, #24
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	20001130 	.word	0x20001130
 800a458:	2000112c 	.word	0x2000112c

0800a45c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b08e      	sub	sp, #56	@ 0x38
 800a460:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a462:	e0ce      	b.n	800a602 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	da19      	bge.n	800a49e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a46a:	1d3b      	adds	r3, r7, #4
 800a46c:	3304      	adds	r3, #4
 800a46e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10b      	bne.n	800a48e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a47a:	f383 8811 	msr	BASEPRI, r3
 800a47e:	f3bf 8f6f 	isb	sy
 800a482:	f3bf 8f4f 	dsb	sy
 800a486:	61fb      	str	r3, [r7, #28]
}
 800a488:	bf00      	nop
 800a48a:	bf00      	nop
 800a48c:	e7fd      	b.n	800a48a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a48e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a494:	6850      	ldr	r0, [r2, #4]
 800a496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a498:	6892      	ldr	r2, [r2, #8]
 800a49a:	4611      	mov	r1, r2
 800a49c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	f2c0 80ae 	blt.w	800a602 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d004      	beq.n	800a4bc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fe f996 	bl	80087e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a4bc:	463b      	mov	r3, r7
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7ff ff6a 	bl	800a398 <prvSampleTimeNow>
 800a4c4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2b09      	cmp	r3, #9
 800a4ca:	f200 8097 	bhi.w	800a5fc <prvProcessReceivedCommands+0x1a0>
 800a4ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d4 <prvProcessReceivedCommands+0x78>)
 800a4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d4:	0800a4fd 	.word	0x0800a4fd
 800a4d8:	0800a4fd 	.word	0x0800a4fd
 800a4dc:	0800a4fd 	.word	0x0800a4fd
 800a4e0:	0800a573 	.word	0x0800a573
 800a4e4:	0800a587 	.word	0x0800a587
 800a4e8:	0800a5d3 	.word	0x0800a5d3
 800a4ec:	0800a4fd 	.word	0x0800a4fd
 800a4f0:	0800a4fd 	.word	0x0800a4fd
 800a4f4:	0800a573 	.word	0x0800a573
 800a4f8:	0800a587 	.word	0x0800a587
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a502:	f043 0301 	orr.w	r3, r3, #1
 800a506:	b2da      	uxtb	r2, r3
 800a508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a50e:	68ba      	ldr	r2, [r7, #8]
 800a510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	18d1      	adds	r1, r2, r3
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a51a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a51c:	f7ff ff5c 	bl	800a3d8 <prvInsertTimerInActiveList>
 800a520:	4603      	mov	r3, r0
 800a522:	2b00      	cmp	r3, #0
 800a524:	d06c      	beq.n	800a600 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a52c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a52e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a530:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a534:	f003 0304 	and.w	r3, r3, #4
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d061      	beq.n	800a600 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a540:	699b      	ldr	r3, [r3, #24]
 800a542:	441a      	add	r2, r3
 800a544:	2300      	movs	r3, #0
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	2300      	movs	r3, #0
 800a54a:	2100      	movs	r1, #0
 800a54c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a54e:	f7ff fe01 	bl	800a154 <xTimerGenericCommand>
 800a552:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a554:	6a3b      	ldr	r3, [r7, #32]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d152      	bne.n	800a600 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a55a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55e:	f383 8811 	msr	BASEPRI, r3
 800a562:	f3bf 8f6f 	isb	sy
 800a566:	f3bf 8f4f 	dsb	sy
 800a56a:	61bb      	str	r3, [r7, #24]
}
 800a56c:	bf00      	nop
 800a56e:	bf00      	nop
 800a570:	e7fd      	b.n	800a56e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a574:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a578:	f023 0301 	bic.w	r3, r3, #1
 800a57c:	b2da      	uxtb	r2, r3
 800a57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a580:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a584:	e03d      	b.n	800a602 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a588:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a58c:	f043 0301 	orr.w	r3, r3, #1
 800a590:	b2da      	uxtb	r2, r3
 800a592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a594:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a598:	68ba      	ldr	r2, [r7, #8]
 800a59a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a59c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a0:	699b      	ldr	r3, [r3, #24]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10b      	bne.n	800a5be <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	617b      	str	r3, [r7, #20]
}
 800a5b8:	bf00      	nop
 800a5ba:	bf00      	nop
 800a5bc:	e7fd      	b.n	800a5ba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c0:	699a      	ldr	r2, [r3, #24]
 800a5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c4:	18d1      	adds	r1, r2, r3
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5cc:	f7ff ff04 	bl	800a3d8 <prvInsertTimerInActiveList>
					break;
 800a5d0:	e017      	b.n	800a602 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5d8:	f003 0302 	and.w	r3, r3, #2
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d103      	bne.n	800a5e8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a5e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5e2:	f000 fbe9 	bl	800adb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a5e6:	e00c      	b.n	800a602 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a5ee:	f023 0301 	bic.w	r3, r3, #1
 800a5f2:	b2da      	uxtb	r2, r3
 800a5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a5fa:	e002      	b.n	800a602 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a5fc:	bf00      	nop
 800a5fe:	e000      	b.n	800a602 <prvProcessReceivedCommands+0x1a6>
					break;
 800a600:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a602:	4b08      	ldr	r3, [pc, #32]	@ (800a624 <prvProcessReceivedCommands+0x1c8>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	1d39      	adds	r1, r7, #4
 800a608:	2200      	movs	r2, #0
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7fe fbfc 	bl	8008e08 <xQueueReceive>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	f47f af26 	bne.w	800a464 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a618:	bf00      	nop
 800a61a:	bf00      	nop
 800a61c:	3730      	adds	r7, #48	@ 0x30
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	20001134 	.word	0x20001134

0800a628 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b088      	sub	sp, #32
 800a62c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a62e:	e049      	b.n	800a6c4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a630:	4b2e      	ldr	r3, [pc, #184]	@ (800a6ec <prvSwitchTimerLists+0xc4>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a63a:	4b2c      	ldr	r3, [pc, #176]	@ (800a6ec <prvSwitchTimerLists+0xc4>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	3304      	adds	r3, #4
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fe f8cd 	bl	80087e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6a1b      	ldr	r3, [r3, #32]
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a65c:	f003 0304 	and.w	r3, r3, #4
 800a660:	2b00      	cmp	r3, #0
 800a662:	d02f      	beq.n	800a6c4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	699b      	ldr	r3, [r3, #24]
 800a668:	693a      	ldr	r2, [r7, #16]
 800a66a:	4413      	add	r3, r2
 800a66c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	429a      	cmp	r2, r3
 800a674:	d90e      	bls.n	800a694 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	68ba      	ldr	r2, [r7, #8]
 800a67a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a682:	4b1a      	ldr	r3, [pc, #104]	@ (800a6ec <prvSwitchTimerLists+0xc4>)
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	3304      	adds	r3, #4
 800a68a:	4619      	mov	r1, r3
 800a68c:	4610      	mov	r0, r2
 800a68e:	f7fe f872 	bl	8008776 <vListInsert>
 800a692:	e017      	b.n	800a6c4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a694:	2300      	movs	r3, #0
 800a696:	9300      	str	r3, [sp, #0]
 800a698:	2300      	movs	r3, #0
 800a69a:	693a      	ldr	r2, [r7, #16]
 800a69c:	2100      	movs	r1, #0
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f7ff fd58 	bl	800a154 <xTimerGenericCommand>
 800a6a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d10b      	bne.n	800a6c4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a6ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b0:	f383 8811 	msr	BASEPRI, r3
 800a6b4:	f3bf 8f6f 	isb	sy
 800a6b8:	f3bf 8f4f 	dsb	sy
 800a6bc:	603b      	str	r3, [r7, #0]
}
 800a6be:	bf00      	nop
 800a6c0:	bf00      	nop
 800a6c2:	e7fd      	b.n	800a6c0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a6c4:	4b09      	ldr	r3, [pc, #36]	@ (800a6ec <prvSwitchTimerLists+0xc4>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d1b0      	bne.n	800a630 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a6ce:	4b07      	ldr	r3, [pc, #28]	@ (800a6ec <prvSwitchTimerLists+0xc4>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a6d4:	4b06      	ldr	r3, [pc, #24]	@ (800a6f0 <prvSwitchTimerLists+0xc8>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a04      	ldr	r2, [pc, #16]	@ (800a6ec <prvSwitchTimerLists+0xc4>)
 800a6da:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a6dc:	4a04      	ldr	r2, [pc, #16]	@ (800a6f0 <prvSwitchTimerLists+0xc8>)
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	6013      	str	r3, [r2, #0]
}
 800a6e2:	bf00      	nop
 800a6e4:	3718      	adds	r7, #24
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	2000112c 	.word	0x2000112c
 800a6f0:	20001130 	.word	0x20001130

0800a6f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a6fa:	f000 f96d 	bl	800a9d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a6fe:	4b15      	ldr	r3, [pc, #84]	@ (800a754 <prvCheckForValidListAndQueue+0x60>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d120      	bne.n	800a748 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a706:	4814      	ldr	r0, [pc, #80]	@ (800a758 <prvCheckForValidListAndQueue+0x64>)
 800a708:	f7fd ffe4 	bl	80086d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a70c:	4813      	ldr	r0, [pc, #76]	@ (800a75c <prvCheckForValidListAndQueue+0x68>)
 800a70e:	f7fd ffe1 	bl	80086d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a712:	4b13      	ldr	r3, [pc, #76]	@ (800a760 <prvCheckForValidListAndQueue+0x6c>)
 800a714:	4a10      	ldr	r2, [pc, #64]	@ (800a758 <prvCheckForValidListAndQueue+0x64>)
 800a716:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a718:	4b12      	ldr	r3, [pc, #72]	@ (800a764 <prvCheckForValidListAndQueue+0x70>)
 800a71a:	4a10      	ldr	r2, [pc, #64]	@ (800a75c <prvCheckForValidListAndQueue+0x68>)
 800a71c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a71e:	2300      	movs	r3, #0
 800a720:	9300      	str	r3, [sp, #0]
 800a722:	4b11      	ldr	r3, [pc, #68]	@ (800a768 <prvCheckForValidListAndQueue+0x74>)
 800a724:	4a11      	ldr	r2, [pc, #68]	@ (800a76c <prvCheckForValidListAndQueue+0x78>)
 800a726:	2110      	movs	r1, #16
 800a728:	200a      	movs	r0, #10
 800a72a:	f7fe f8f1 	bl	8008910 <xQueueGenericCreateStatic>
 800a72e:	4603      	mov	r3, r0
 800a730:	4a08      	ldr	r2, [pc, #32]	@ (800a754 <prvCheckForValidListAndQueue+0x60>)
 800a732:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a734:	4b07      	ldr	r3, [pc, #28]	@ (800a754 <prvCheckForValidListAndQueue+0x60>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d005      	beq.n	800a748 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a73c:	4b05      	ldr	r3, [pc, #20]	@ (800a754 <prvCheckForValidListAndQueue+0x60>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	490b      	ldr	r1, [pc, #44]	@ (800a770 <prvCheckForValidListAndQueue+0x7c>)
 800a742:	4618      	mov	r0, r3
 800a744:	f7fe fd52 	bl	80091ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a748:	f000 f978 	bl	800aa3c <vPortExitCritical>
}
 800a74c:	bf00      	nop
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	20001134 	.word	0x20001134
 800a758:	20001104 	.word	0x20001104
 800a75c:	20001118 	.word	0x20001118
 800a760:	2000112c 	.word	0x2000112c
 800a764:	20001130 	.word	0x20001130
 800a768:	200011e0 	.word	0x200011e0
 800a76c:	20001140 	.word	0x20001140
 800a770:	0800e3e0 	.word	0x0800e3e0

0800a774 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	3b04      	subs	r3, #4
 800a784:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a78c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3b04      	subs	r3, #4
 800a792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	f023 0201 	bic.w	r2, r3, #1
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	3b04      	subs	r3, #4
 800a7a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a7a4:	4a0c      	ldr	r2, [pc, #48]	@ (800a7d8 <pxPortInitialiseStack+0x64>)
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	3b14      	subs	r3, #20
 800a7ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	3b04      	subs	r3, #4
 800a7ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f06f 0202 	mvn.w	r2, #2
 800a7c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	3b20      	subs	r3, #32
 800a7c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3714      	adds	r7, #20
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr
 800a7d8:	0800a7dd 	.word	0x0800a7dd

0800a7dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b085      	sub	sp, #20
 800a7e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a7e6:	4b13      	ldr	r3, [pc, #76]	@ (800a834 <prvTaskExitError+0x58>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ee:	d00b      	beq.n	800a808 <prvTaskExitError+0x2c>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	60fb      	str	r3, [r7, #12]
}
 800a802:	bf00      	nop
 800a804:	bf00      	nop
 800a806:	e7fd      	b.n	800a804 <prvTaskExitError+0x28>
	__asm volatile
 800a808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a80c:	f383 8811 	msr	BASEPRI, r3
 800a810:	f3bf 8f6f 	isb	sy
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	60bb      	str	r3, [r7, #8]
}
 800a81a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a81c:	bf00      	nop
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d0fc      	beq.n	800a81e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a824:	bf00      	nop
 800a826:	bf00      	nop
 800a828:	3714      	adds	r7, #20
 800a82a:	46bd      	mov	sp, r7
 800a82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a830:	4770      	bx	lr
 800a832:	bf00      	nop
 800a834:	2000000c 	.word	0x2000000c
	...

0800a840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a840:	4b07      	ldr	r3, [pc, #28]	@ (800a860 <pxCurrentTCBConst2>)
 800a842:	6819      	ldr	r1, [r3, #0]
 800a844:	6808      	ldr	r0, [r1, #0]
 800a846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84a:	f380 8809 	msr	PSP, r0
 800a84e:	f3bf 8f6f 	isb	sy
 800a852:	f04f 0000 	mov.w	r0, #0
 800a856:	f380 8811 	msr	BASEPRI, r0
 800a85a:	4770      	bx	lr
 800a85c:	f3af 8000 	nop.w

0800a860 <pxCurrentTCBConst2>:
 800a860:	20000c04 	.word	0x20000c04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a864:	bf00      	nop
 800a866:	bf00      	nop

0800a868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a868:	4808      	ldr	r0, [pc, #32]	@ (800a88c <prvPortStartFirstTask+0x24>)
 800a86a:	6800      	ldr	r0, [r0, #0]
 800a86c:	6800      	ldr	r0, [r0, #0]
 800a86e:	f380 8808 	msr	MSP, r0
 800a872:	f04f 0000 	mov.w	r0, #0
 800a876:	f380 8814 	msr	CONTROL, r0
 800a87a:	b662      	cpsie	i
 800a87c:	b661      	cpsie	f
 800a87e:	f3bf 8f4f 	dsb	sy
 800a882:	f3bf 8f6f 	isb	sy
 800a886:	df00      	svc	0
 800a888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a88a:	bf00      	nop
 800a88c:	e000ed08 	.word	0xe000ed08

0800a890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a896:	4b47      	ldr	r3, [pc, #284]	@ (800a9b4 <xPortStartScheduler+0x124>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a47      	ldr	r2, [pc, #284]	@ (800a9b8 <xPortStartScheduler+0x128>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d10b      	bne.n	800a8b8 <xPortStartScheduler+0x28>
	__asm volatile
 800a8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	60fb      	str	r3, [r7, #12]
}
 800a8b2:	bf00      	nop
 800a8b4:	bf00      	nop
 800a8b6:	e7fd      	b.n	800a8b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a8b8:	4b3e      	ldr	r3, [pc, #248]	@ (800a9b4 <xPortStartScheduler+0x124>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a3f      	ldr	r2, [pc, #252]	@ (800a9bc <xPortStartScheduler+0x12c>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d10b      	bne.n	800a8da <xPortStartScheduler+0x4a>
	__asm volatile
 800a8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c6:	f383 8811 	msr	BASEPRI, r3
 800a8ca:	f3bf 8f6f 	isb	sy
 800a8ce:	f3bf 8f4f 	dsb	sy
 800a8d2:	613b      	str	r3, [r7, #16]
}
 800a8d4:	bf00      	nop
 800a8d6:	bf00      	nop
 800a8d8:	e7fd      	b.n	800a8d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a8da:	4b39      	ldr	r3, [pc, #228]	@ (800a9c0 <xPortStartScheduler+0x130>)
 800a8dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	b2db      	uxtb	r3, r3
 800a8e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	22ff      	movs	r2, #255	@ 0xff
 800a8ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a8f4:	78fb      	ldrb	r3, [r7, #3]
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	4b31      	ldr	r3, [pc, #196]	@ (800a9c4 <xPortStartScheduler+0x134>)
 800a900:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a902:	4b31      	ldr	r3, [pc, #196]	@ (800a9c8 <xPortStartScheduler+0x138>)
 800a904:	2207      	movs	r2, #7
 800a906:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a908:	e009      	b.n	800a91e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a90a:	4b2f      	ldr	r3, [pc, #188]	@ (800a9c8 <xPortStartScheduler+0x138>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	3b01      	subs	r3, #1
 800a910:	4a2d      	ldr	r2, [pc, #180]	@ (800a9c8 <xPortStartScheduler+0x138>)
 800a912:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a914:	78fb      	ldrb	r3, [r7, #3]
 800a916:	b2db      	uxtb	r3, r3
 800a918:	005b      	lsls	r3, r3, #1
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a91e:	78fb      	ldrb	r3, [r7, #3]
 800a920:	b2db      	uxtb	r3, r3
 800a922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a926:	2b80      	cmp	r3, #128	@ 0x80
 800a928:	d0ef      	beq.n	800a90a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a92a:	4b27      	ldr	r3, [pc, #156]	@ (800a9c8 <xPortStartScheduler+0x138>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f1c3 0307 	rsb	r3, r3, #7
 800a932:	2b04      	cmp	r3, #4
 800a934:	d00b      	beq.n	800a94e <xPortStartScheduler+0xbe>
	__asm volatile
 800a936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a93a:	f383 8811 	msr	BASEPRI, r3
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	60bb      	str	r3, [r7, #8]
}
 800a948:	bf00      	nop
 800a94a:	bf00      	nop
 800a94c:	e7fd      	b.n	800a94a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a94e:	4b1e      	ldr	r3, [pc, #120]	@ (800a9c8 <xPortStartScheduler+0x138>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	021b      	lsls	r3, r3, #8
 800a954:	4a1c      	ldr	r2, [pc, #112]	@ (800a9c8 <xPortStartScheduler+0x138>)
 800a956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a958:	4b1b      	ldr	r3, [pc, #108]	@ (800a9c8 <xPortStartScheduler+0x138>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a960:	4a19      	ldr	r2, [pc, #100]	@ (800a9c8 <xPortStartScheduler+0x138>)
 800a962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	b2da      	uxtb	r2, r3
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a96c:	4b17      	ldr	r3, [pc, #92]	@ (800a9cc <xPortStartScheduler+0x13c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a16      	ldr	r2, [pc, #88]	@ (800a9cc <xPortStartScheduler+0x13c>)
 800a972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a978:	4b14      	ldr	r3, [pc, #80]	@ (800a9cc <xPortStartScheduler+0x13c>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a13      	ldr	r2, [pc, #76]	@ (800a9cc <xPortStartScheduler+0x13c>)
 800a97e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a984:	f000 f8da 	bl	800ab3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a988:	4b11      	ldr	r3, [pc, #68]	@ (800a9d0 <xPortStartScheduler+0x140>)
 800a98a:	2200      	movs	r2, #0
 800a98c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a98e:	f000 f8f9 	bl	800ab84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a992:	4b10      	ldr	r3, [pc, #64]	@ (800a9d4 <xPortStartScheduler+0x144>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a0f      	ldr	r2, [pc, #60]	@ (800a9d4 <xPortStartScheduler+0x144>)
 800a998:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a99c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a99e:	f7ff ff63 	bl	800a868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a9a2:	f7ff f83b 	bl	8009a1c <vTaskSwitchContext>
	prvTaskExitError();
 800a9a6:	f7ff ff19 	bl	800a7dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a9aa:	2300      	movs	r3, #0
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3718      	adds	r7, #24
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}
 800a9b4:	e000ed00 	.word	0xe000ed00
 800a9b8:	410fc271 	.word	0x410fc271
 800a9bc:	410fc270 	.word	0x410fc270
 800a9c0:	e000e400 	.word	0xe000e400
 800a9c4:	20001230 	.word	0x20001230
 800a9c8:	20001234 	.word	0x20001234
 800a9cc:	e000ed20 	.word	0xe000ed20
 800a9d0:	2000000c 	.word	0x2000000c
 800a9d4:	e000ef34 	.word	0xe000ef34

0800a9d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
	__asm volatile
 800a9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	607b      	str	r3, [r7, #4]
}
 800a9f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a9f2:	4b10      	ldr	r3, [pc, #64]	@ (800aa34 <vPortEnterCritical+0x5c>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	4a0e      	ldr	r2, [pc, #56]	@ (800aa34 <vPortEnterCritical+0x5c>)
 800a9fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a9fc:	4b0d      	ldr	r3, [pc, #52]	@ (800aa34 <vPortEnterCritical+0x5c>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d110      	bne.n	800aa26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa04:	4b0c      	ldr	r3, [pc, #48]	@ (800aa38 <vPortEnterCritical+0x60>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	b2db      	uxtb	r3, r3
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d00b      	beq.n	800aa26 <vPortEnterCritical+0x4e>
	__asm volatile
 800aa0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa12:	f383 8811 	msr	BASEPRI, r3
 800aa16:	f3bf 8f6f 	isb	sy
 800aa1a:	f3bf 8f4f 	dsb	sy
 800aa1e:	603b      	str	r3, [r7, #0]
}
 800aa20:	bf00      	nop
 800aa22:	bf00      	nop
 800aa24:	e7fd      	b.n	800aa22 <vPortEnterCritical+0x4a>
	}
}
 800aa26:	bf00      	nop
 800aa28:	370c      	adds	r7, #12
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	2000000c 	.word	0x2000000c
 800aa38:	e000ed04 	.word	0xe000ed04

0800aa3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b083      	sub	sp, #12
 800aa40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aa42:	4b12      	ldr	r3, [pc, #72]	@ (800aa8c <vPortExitCritical+0x50>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d10b      	bne.n	800aa62 <vPortExitCritical+0x26>
	__asm volatile
 800aa4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	f3bf 8f4f 	dsb	sy
 800aa5a:	607b      	str	r3, [r7, #4]
}
 800aa5c:	bf00      	nop
 800aa5e:	bf00      	nop
 800aa60:	e7fd      	b.n	800aa5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aa62:	4b0a      	ldr	r3, [pc, #40]	@ (800aa8c <vPortExitCritical+0x50>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	3b01      	subs	r3, #1
 800aa68:	4a08      	ldr	r2, [pc, #32]	@ (800aa8c <vPortExitCritical+0x50>)
 800aa6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aa6c:	4b07      	ldr	r3, [pc, #28]	@ (800aa8c <vPortExitCritical+0x50>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d105      	bne.n	800aa80 <vPortExitCritical+0x44>
 800aa74:	2300      	movs	r3, #0
 800aa76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	f383 8811 	msr	BASEPRI, r3
}
 800aa7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr
 800aa8c:	2000000c 	.word	0x2000000c

0800aa90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa90:	f3ef 8009 	mrs	r0, PSP
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	4b15      	ldr	r3, [pc, #84]	@ (800aaf0 <pxCurrentTCBConst>)
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	f01e 0f10 	tst.w	lr, #16
 800aaa0:	bf08      	it	eq
 800aaa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aaa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaaa:	6010      	str	r0, [r2, #0]
 800aaac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800aab4:	f380 8811 	msr	BASEPRI, r0
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f7fe ffac 	bl	8009a1c <vTaskSwitchContext>
 800aac4:	f04f 0000 	mov.w	r0, #0
 800aac8:	f380 8811 	msr	BASEPRI, r0
 800aacc:	bc09      	pop	{r0, r3}
 800aace:	6819      	ldr	r1, [r3, #0]
 800aad0:	6808      	ldr	r0, [r1, #0]
 800aad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aad6:	f01e 0f10 	tst.w	lr, #16
 800aada:	bf08      	it	eq
 800aadc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aae0:	f380 8809 	msr	PSP, r0
 800aae4:	f3bf 8f6f 	isb	sy
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	f3af 8000 	nop.w

0800aaf0 <pxCurrentTCBConst>:
 800aaf0:	20000c04 	.word	0x20000c04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aaf4:	bf00      	nop
 800aaf6:	bf00      	nop

0800aaf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b082      	sub	sp, #8
 800aafc:	af00      	add	r7, sp, #0
	__asm volatile
 800aafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab02:	f383 8811 	msr	BASEPRI, r3
 800ab06:	f3bf 8f6f 	isb	sy
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	607b      	str	r3, [r7, #4]
}
 800ab10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab12:	f7fe fec9 	bl	80098a8 <xTaskIncrementTick>
 800ab16:	4603      	mov	r3, r0
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d003      	beq.n	800ab24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab1c:	4b06      	ldr	r3, [pc, #24]	@ (800ab38 <xPortSysTickHandler+0x40>)
 800ab1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab22:	601a      	str	r2, [r3, #0]
 800ab24:	2300      	movs	r3, #0
 800ab26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	f383 8811 	msr	BASEPRI, r3
}
 800ab2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab30:	bf00      	nop
 800ab32:	3708      	adds	r7, #8
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	e000ed04 	.word	0xe000ed04

0800ab3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ab40:	4b0b      	ldr	r3, [pc, #44]	@ (800ab70 <vPortSetupTimerInterrupt+0x34>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ab46:	4b0b      	ldr	r3, [pc, #44]	@ (800ab74 <vPortSetupTimerInterrupt+0x38>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ab4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab78 <vPortSetupTimerInterrupt+0x3c>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a0a      	ldr	r2, [pc, #40]	@ (800ab7c <vPortSetupTimerInterrupt+0x40>)
 800ab52:	fba2 2303 	umull	r2, r3, r2, r3
 800ab56:	099b      	lsrs	r3, r3, #6
 800ab58:	4a09      	ldr	r2, [pc, #36]	@ (800ab80 <vPortSetupTimerInterrupt+0x44>)
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ab5e:	4b04      	ldr	r3, [pc, #16]	@ (800ab70 <vPortSetupTimerInterrupt+0x34>)
 800ab60:	2207      	movs	r2, #7
 800ab62:	601a      	str	r2, [r3, #0]
}
 800ab64:	bf00      	nop
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
 800ab6e:	bf00      	nop
 800ab70:	e000e010 	.word	0xe000e010
 800ab74:	e000e018 	.word	0xe000e018
 800ab78:	20000000 	.word	0x20000000
 800ab7c:	10624dd3 	.word	0x10624dd3
 800ab80:	e000e014 	.word	0xe000e014

0800ab84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ab84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ab94 <vPortEnableVFP+0x10>
 800ab88:	6801      	ldr	r1, [r0, #0]
 800ab8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ab8e:	6001      	str	r1, [r0, #0]
 800ab90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab92:	bf00      	nop
 800ab94:	e000ed88 	.word	0xe000ed88

0800ab98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab9e:	f3ef 8305 	mrs	r3, IPSR
 800aba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2b0f      	cmp	r3, #15
 800aba8:	d915      	bls.n	800abd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800abaa:	4a18      	ldr	r2, [pc, #96]	@ (800ac0c <vPortValidateInterruptPriority+0x74>)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	4413      	add	r3, r2
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800abb4:	4b16      	ldr	r3, [pc, #88]	@ (800ac10 <vPortValidateInterruptPriority+0x78>)
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	7afa      	ldrb	r2, [r7, #11]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d20b      	bcs.n	800abd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800abbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	607b      	str	r3, [r7, #4]
}
 800abd0:	bf00      	nop
 800abd2:	bf00      	nop
 800abd4:	e7fd      	b.n	800abd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800abd6:	4b0f      	ldr	r3, [pc, #60]	@ (800ac14 <vPortValidateInterruptPriority+0x7c>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800abde:	4b0e      	ldr	r3, [pc, #56]	@ (800ac18 <vPortValidateInterruptPriority+0x80>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d90b      	bls.n	800abfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800abe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	603b      	str	r3, [r7, #0]
}
 800abf8:	bf00      	nop
 800abfa:	bf00      	nop
 800abfc:	e7fd      	b.n	800abfa <vPortValidateInterruptPriority+0x62>
	}
 800abfe:	bf00      	nop
 800ac00:	3714      	adds	r7, #20
 800ac02:	46bd      	mov	sp, r7
 800ac04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	e000e3f0 	.word	0xe000e3f0
 800ac10:	20001230 	.word	0x20001230
 800ac14:	e000ed0c 	.word	0xe000ed0c
 800ac18:	20001234 	.word	0x20001234

0800ac1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b08a      	sub	sp, #40	@ 0x28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac24:	2300      	movs	r3, #0
 800ac26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac28:	f7fe fd82 	bl	8009730 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac2c:	4b5c      	ldr	r3, [pc, #368]	@ (800ada0 <pvPortMalloc+0x184>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d101      	bne.n	800ac38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac34:	f000 f924 	bl	800ae80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac38:	4b5a      	ldr	r3, [pc, #360]	@ (800ada4 <pvPortMalloc+0x188>)
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4013      	ands	r3, r2
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f040 8095 	bne.w	800ad70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d01e      	beq.n	800ac8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ac4c:	2208      	movs	r2, #8
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4413      	add	r3, r2
 800ac52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f003 0307 	and.w	r3, r3, #7
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d015      	beq.n	800ac8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f023 0307 	bic.w	r3, r3, #7
 800ac64:	3308      	adds	r3, #8
 800ac66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f003 0307 	and.w	r3, r3, #7
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d00b      	beq.n	800ac8a <pvPortMalloc+0x6e>
	__asm volatile
 800ac72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac76:	f383 8811 	msr	BASEPRI, r3
 800ac7a:	f3bf 8f6f 	isb	sy
 800ac7e:	f3bf 8f4f 	dsb	sy
 800ac82:	617b      	str	r3, [r7, #20]
}
 800ac84:	bf00      	nop
 800ac86:	bf00      	nop
 800ac88:	e7fd      	b.n	800ac86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d06f      	beq.n	800ad70 <pvPortMalloc+0x154>
 800ac90:	4b45      	ldr	r3, [pc, #276]	@ (800ada8 <pvPortMalloc+0x18c>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d86a      	bhi.n	800ad70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ac9a:	4b44      	ldr	r3, [pc, #272]	@ (800adac <pvPortMalloc+0x190>)
 800ac9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ac9e:	4b43      	ldr	r3, [pc, #268]	@ (800adac <pvPortMalloc+0x190>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aca4:	e004      	b.n	800acb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800aca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800acaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800acb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d903      	bls.n	800acc2 <pvPortMalloc+0xa6>
 800acba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1f1      	bne.n	800aca6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800acc2:	4b37      	ldr	r3, [pc, #220]	@ (800ada0 <pvPortMalloc+0x184>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acc8:	429a      	cmp	r2, r3
 800acca:	d051      	beq.n	800ad70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800accc:	6a3b      	ldr	r3, [r7, #32]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	2208      	movs	r2, #8
 800acd2:	4413      	add	r3, r2
 800acd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800acd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd8:	681a      	ldr	r2, [r3, #0]
 800acda:	6a3b      	ldr	r3, [r7, #32]
 800acdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800acde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace0:	685a      	ldr	r2, [r3, #4]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	1ad2      	subs	r2, r2, r3
 800ace6:	2308      	movs	r3, #8
 800ace8:	005b      	lsls	r3, r3, #1
 800acea:	429a      	cmp	r2, r3
 800acec:	d920      	bls.n	800ad30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800acee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4413      	add	r3, r2
 800acf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	f003 0307 	and.w	r3, r3, #7
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d00b      	beq.n	800ad18 <pvPortMalloc+0xfc>
	__asm volatile
 800ad00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	613b      	str	r3, [r7, #16]
}
 800ad12:	bf00      	nop
 800ad14:	bf00      	nop
 800ad16:	e7fd      	b.n	800ad14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1a:	685a      	ldr	r2, [r3, #4]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	1ad2      	subs	r2, r2, r3
 800ad20:	69bb      	ldr	r3, [r7, #24]
 800ad22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad2a:	69b8      	ldr	r0, [r7, #24]
 800ad2c:	f000 f90a 	bl	800af44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad30:	4b1d      	ldr	r3, [pc, #116]	@ (800ada8 <pvPortMalloc+0x18c>)
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	4a1b      	ldr	r2, [pc, #108]	@ (800ada8 <pvPortMalloc+0x18c>)
 800ad3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad3e:	4b1a      	ldr	r3, [pc, #104]	@ (800ada8 <pvPortMalloc+0x18c>)
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	4b1b      	ldr	r3, [pc, #108]	@ (800adb0 <pvPortMalloc+0x194>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d203      	bcs.n	800ad52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ad4a:	4b17      	ldr	r3, [pc, #92]	@ (800ada8 <pvPortMalloc+0x18c>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a18      	ldr	r2, [pc, #96]	@ (800adb0 <pvPortMalloc+0x194>)
 800ad50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ad52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad54:	685a      	ldr	r2, [r3, #4]
 800ad56:	4b13      	ldr	r3, [pc, #76]	@ (800ada4 <pvPortMalloc+0x188>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	431a      	orrs	r2, r3
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ad60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad62:	2200      	movs	r2, #0
 800ad64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ad66:	4b13      	ldr	r3, [pc, #76]	@ (800adb4 <pvPortMalloc+0x198>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	3301      	adds	r3, #1
 800ad6c:	4a11      	ldr	r2, [pc, #68]	@ (800adb4 <pvPortMalloc+0x198>)
 800ad6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ad70:	f7fe fcec 	bl	800974c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	f003 0307 	and.w	r3, r3, #7
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00b      	beq.n	800ad96 <pvPortMalloc+0x17a>
	__asm volatile
 800ad7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	60fb      	str	r3, [r7, #12]
}
 800ad90:	bf00      	nop
 800ad92:	bf00      	nop
 800ad94:	e7fd      	b.n	800ad92 <pvPortMalloc+0x176>
	return pvReturn;
 800ad96:	69fb      	ldr	r3, [r7, #28]
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3728      	adds	r7, #40	@ 0x28
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	20004e40 	.word	0x20004e40
 800ada4:	20004e54 	.word	0x20004e54
 800ada8:	20004e44 	.word	0x20004e44
 800adac:	20004e38 	.word	0x20004e38
 800adb0:	20004e48 	.word	0x20004e48
 800adb4:	20004e4c 	.word	0x20004e4c

0800adb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b086      	sub	sp, #24
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d04f      	beq.n	800ae6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800adca:	2308      	movs	r3, #8
 800adcc:	425b      	negs	r3, r3
 800adce:	697a      	ldr	r2, [r7, #20]
 800add0:	4413      	add	r3, r2
 800add2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	685a      	ldr	r2, [r3, #4]
 800addc:	4b25      	ldr	r3, [pc, #148]	@ (800ae74 <vPortFree+0xbc>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4013      	ands	r3, r2
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10b      	bne.n	800adfe <vPortFree+0x46>
	__asm volatile
 800ade6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	60fb      	str	r3, [r7, #12]
}
 800adf8:	bf00      	nop
 800adfa:	bf00      	nop
 800adfc:	e7fd      	b.n	800adfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00b      	beq.n	800ae1e <vPortFree+0x66>
	__asm volatile
 800ae06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	60bb      	str	r3, [r7, #8]
}
 800ae18:	bf00      	nop
 800ae1a:	bf00      	nop
 800ae1c:	e7fd      	b.n	800ae1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	685a      	ldr	r2, [r3, #4]
 800ae22:	4b14      	ldr	r3, [pc, #80]	@ (800ae74 <vPortFree+0xbc>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4013      	ands	r3, r2
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d01e      	beq.n	800ae6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d11a      	bne.n	800ae6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	685a      	ldr	r2, [r3, #4]
 800ae38:	4b0e      	ldr	r3, [pc, #56]	@ (800ae74 <vPortFree+0xbc>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	43db      	mvns	r3, r3
 800ae3e:	401a      	ands	r2, r3
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae44:	f7fe fc74 	bl	8009730 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	685a      	ldr	r2, [r3, #4]
 800ae4c:	4b0a      	ldr	r3, [pc, #40]	@ (800ae78 <vPortFree+0xc0>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4413      	add	r3, r2
 800ae52:	4a09      	ldr	r2, [pc, #36]	@ (800ae78 <vPortFree+0xc0>)
 800ae54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae56:	6938      	ldr	r0, [r7, #16]
 800ae58:	f000 f874 	bl	800af44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ae5c:	4b07      	ldr	r3, [pc, #28]	@ (800ae7c <vPortFree+0xc4>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	3301      	adds	r3, #1
 800ae62:	4a06      	ldr	r2, [pc, #24]	@ (800ae7c <vPortFree+0xc4>)
 800ae64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ae66:	f7fe fc71 	bl	800974c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ae6a:	bf00      	nop
 800ae6c:	3718      	adds	r7, #24
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	20004e54 	.word	0x20004e54
 800ae78:	20004e44 	.word	0x20004e44
 800ae7c:	20004e50 	.word	0x20004e50

0800ae80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ae86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ae8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ae8c:	4b27      	ldr	r3, [pc, #156]	@ (800af2c <prvHeapInit+0xac>)
 800ae8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f003 0307 	and.w	r3, r3, #7
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00c      	beq.n	800aeb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	3307      	adds	r3, #7
 800ae9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f023 0307 	bic.w	r3, r3, #7
 800aea6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aea8:	68ba      	ldr	r2, [r7, #8]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	1ad3      	subs	r3, r2, r3
 800aeae:	4a1f      	ldr	r2, [pc, #124]	@ (800af2c <prvHeapInit+0xac>)
 800aeb0:	4413      	add	r3, r2
 800aeb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aeb8:	4a1d      	ldr	r2, [pc, #116]	@ (800af30 <prvHeapInit+0xb0>)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aebe:	4b1c      	ldr	r3, [pc, #112]	@ (800af30 <prvHeapInit+0xb0>)
 800aec0:	2200      	movs	r2, #0
 800aec2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	4413      	add	r3, r2
 800aeca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aecc:	2208      	movs	r2, #8
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	1a9b      	subs	r3, r3, r2
 800aed2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	f023 0307 	bic.w	r3, r3, #7
 800aeda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	4a15      	ldr	r2, [pc, #84]	@ (800af34 <prvHeapInit+0xb4>)
 800aee0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800aee2:	4b14      	ldr	r3, [pc, #80]	@ (800af34 <prvHeapInit+0xb4>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2200      	movs	r2, #0
 800aee8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800aeea:	4b12      	ldr	r3, [pc, #72]	@ (800af34 <prvHeapInit+0xb4>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2200      	movs	r2, #0
 800aef0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	1ad2      	subs	r2, r2, r3
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800af00:	4b0c      	ldr	r3, [pc, #48]	@ (800af34 <prvHeapInit+0xb4>)
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	4a0a      	ldr	r2, [pc, #40]	@ (800af38 <prvHeapInit+0xb8>)
 800af0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	685b      	ldr	r3, [r3, #4]
 800af14:	4a09      	ldr	r2, [pc, #36]	@ (800af3c <prvHeapInit+0xbc>)
 800af16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800af18:	4b09      	ldr	r3, [pc, #36]	@ (800af40 <prvHeapInit+0xc0>)
 800af1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800af1e:	601a      	str	r2, [r3, #0]
}
 800af20:	bf00      	nop
 800af22:	3714      	adds	r7, #20
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	20001238 	.word	0x20001238
 800af30:	20004e38 	.word	0x20004e38
 800af34:	20004e40 	.word	0x20004e40
 800af38:	20004e48 	.word	0x20004e48
 800af3c:	20004e44 	.word	0x20004e44
 800af40:	20004e54 	.word	0x20004e54

0800af44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af44:	b480      	push	{r7}
 800af46:	b085      	sub	sp, #20
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af4c:	4b28      	ldr	r3, [pc, #160]	@ (800aff0 <prvInsertBlockIntoFreeList+0xac>)
 800af4e:	60fb      	str	r3, [r7, #12]
 800af50:	e002      	b.n	800af58 <prvInsertBlockIntoFreeList+0x14>
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	60fb      	str	r3, [r7, #12]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d8f7      	bhi.n	800af52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	68ba      	ldr	r2, [r7, #8]
 800af6c:	4413      	add	r3, r2
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	429a      	cmp	r2, r3
 800af72:	d108      	bne.n	800af86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	685a      	ldr	r2, [r3, #4]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	685b      	ldr	r3, [r3, #4]
 800af7c:	441a      	add	r2, r3
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	68ba      	ldr	r2, [r7, #8]
 800af90:	441a      	add	r2, r3
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	429a      	cmp	r2, r3
 800af98:	d118      	bne.n	800afcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	4b15      	ldr	r3, [pc, #84]	@ (800aff4 <prvInsertBlockIntoFreeList+0xb0>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d00d      	beq.n	800afc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	685a      	ldr	r2, [r3, #4]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	441a      	add	r2, r3
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	601a      	str	r2, [r3, #0]
 800afc0:	e008      	b.n	800afd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800afc2:	4b0c      	ldr	r3, [pc, #48]	@ (800aff4 <prvInsertBlockIntoFreeList+0xb0>)
 800afc4:	681a      	ldr	r2, [r3, #0]
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	601a      	str	r2, [r3, #0]
 800afca:	e003      	b.n	800afd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d002      	beq.n	800afe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afe2:	bf00      	nop
 800afe4:	3714      	adds	r7, #20
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop
 800aff0:	20004e38 	.word	0x20004e38
 800aff4:	20004e40 	.word	0x20004e40

0800aff8 <__cvt>:
 800aff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800affc:	ec57 6b10 	vmov	r6, r7, d0
 800b000:	2f00      	cmp	r7, #0
 800b002:	460c      	mov	r4, r1
 800b004:	4619      	mov	r1, r3
 800b006:	463b      	mov	r3, r7
 800b008:	bfbb      	ittet	lt
 800b00a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b00e:	461f      	movlt	r7, r3
 800b010:	2300      	movge	r3, #0
 800b012:	232d      	movlt	r3, #45	@ 0x2d
 800b014:	700b      	strb	r3, [r1, #0]
 800b016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b018:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b01c:	4691      	mov	r9, r2
 800b01e:	f023 0820 	bic.w	r8, r3, #32
 800b022:	bfbc      	itt	lt
 800b024:	4632      	movlt	r2, r6
 800b026:	4616      	movlt	r6, r2
 800b028:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b02c:	d005      	beq.n	800b03a <__cvt+0x42>
 800b02e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b032:	d100      	bne.n	800b036 <__cvt+0x3e>
 800b034:	3401      	adds	r4, #1
 800b036:	2102      	movs	r1, #2
 800b038:	e000      	b.n	800b03c <__cvt+0x44>
 800b03a:	2103      	movs	r1, #3
 800b03c:	ab03      	add	r3, sp, #12
 800b03e:	9301      	str	r3, [sp, #4]
 800b040:	ab02      	add	r3, sp, #8
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	ec47 6b10 	vmov	d0, r6, r7
 800b048:	4653      	mov	r3, sl
 800b04a:	4622      	mov	r2, r4
 800b04c:	f000 fe68 	bl	800bd20 <_dtoa_r>
 800b050:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b054:	4605      	mov	r5, r0
 800b056:	d119      	bne.n	800b08c <__cvt+0x94>
 800b058:	f019 0f01 	tst.w	r9, #1
 800b05c:	d00e      	beq.n	800b07c <__cvt+0x84>
 800b05e:	eb00 0904 	add.w	r9, r0, r4
 800b062:	2200      	movs	r2, #0
 800b064:	2300      	movs	r3, #0
 800b066:	4630      	mov	r0, r6
 800b068:	4639      	mov	r1, r7
 800b06a:	f7f5 fd3d 	bl	8000ae8 <__aeabi_dcmpeq>
 800b06e:	b108      	cbz	r0, 800b074 <__cvt+0x7c>
 800b070:	f8cd 900c 	str.w	r9, [sp, #12]
 800b074:	2230      	movs	r2, #48	@ 0x30
 800b076:	9b03      	ldr	r3, [sp, #12]
 800b078:	454b      	cmp	r3, r9
 800b07a:	d31e      	bcc.n	800b0ba <__cvt+0xc2>
 800b07c:	9b03      	ldr	r3, [sp, #12]
 800b07e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b080:	1b5b      	subs	r3, r3, r5
 800b082:	4628      	mov	r0, r5
 800b084:	6013      	str	r3, [r2, #0]
 800b086:	b004      	add	sp, #16
 800b088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b08c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b090:	eb00 0904 	add.w	r9, r0, r4
 800b094:	d1e5      	bne.n	800b062 <__cvt+0x6a>
 800b096:	7803      	ldrb	r3, [r0, #0]
 800b098:	2b30      	cmp	r3, #48	@ 0x30
 800b09a:	d10a      	bne.n	800b0b2 <__cvt+0xba>
 800b09c:	2200      	movs	r2, #0
 800b09e:	2300      	movs	r3, #0
 800b0a0:	4630      	mov	r0, r6
 800b0a2:	4639      	mov	r1, r7
 800b0a4:	f7f5 fd20 	bl	8000ae8 <__aeabi_dcmpeq>
 800b0a8:	b918      	cbnz	r0, 800b0b2 <__cvt+0xba>
 800b0aa:	f1c4 0401 	rsb	r4, r4, #1
 800b0ae:	f8ca 4000 	str.w	r4, [sl]
 800b0b2:	f8da 3000 	ldr.w	r3, [sl]
 800b0b6:	4499      	add	r9, r3
 800b0b8:	e7d3      	b.n	800b062 <__cvt+0x6a>
 800b0ba:	1c59      	adds	r1, r3, #1
 800b0bc:	9103      	str	r1, [sp, #12]
 800b0be:	701a      	strb	r2, [r3, #0]
 800b0c0:	e7d9      	b.n	800b076 <__cvt+0x7e>

0800b0c2 <__exponent>:
 800b0c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0c4:	2900      	cmp	r1, #0
 800b0c6:	bfba      	itte	lt
 800b0c8:	4249      	neglt	r1, r1
 800b0ca:	232d      	movlt	r3, #45	@ 0x2d
 800b0cc:	232b      	movge	r3, #43	@ 0x2b
 800b0ce:	2909      	cmp	r1, #9
 800b0d0:	7002      	strb	r2, [r0, #0]
 800b0d2:	7043      	strb	r3, [r0, #1]
 800b0d4:	dd29      	ble.n	800b12a <__exponent+0x68>
 800b0d6:	f10d 0307 	add.w	r3, sp, #7
 800b0da:	461d      	mov	r5, r3
 800b0dc:	270a      	movs	r7, #10
 800b0de:	461a      	mov	r2, r3
 800b0e0:	fbb1 f6f7 	udiv	r6, r1, r7
 800b0e4:	fb07 1416 	mls	r4, r7, r6, r1
 800b0e8:	3430      	adds	r4, #48	@ 0x30
 800b0ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b0ee:	460c      	mov	r4, r1
 800b0f0:	2c63      	cmp	r4, #99	@ 0x63
 800b0f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b0f6:	4631      	mov	r1, r6
 800b0f8:	dcf1      	bgt.n	800b0de <__exponent+0x1c>
 800b0fa:	3130      	adds	r1, #48	@ 0x30
 800b0fc:	1e94      	subs	r4, r2, #2
 800b0fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b102:	1c41      	adds	r1, r0, #1
 800b104:	4623      	mov	r3, r4
 800b106:	42ab      	cmp	r3, r5
 800b108:	d30a      	bcc.n	800b120 <__exponent+0x5e>
 800b10a:	f10d 0309 	add.w	r3, sp, #9
 800b10e:	1a9b      	subs	r3, r3, r2
 800b110:	42ac      	cmp	r4, r5
 800b112:	bf88      	it	hi
 800b114:	2300      	movhi	r3, #0
 800b116:	3302      	adds	r3, #2
 800b118:	4403      	add	r3, r0
 800b11a:	1a18      	subs	r0, r3, r0
 800b11c:	b003      	add	sp, #12
 800b11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b120:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b124:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b128:	e7ed      	b.n	800b106 <__exponent+0x44>
 800b12a:	2330      	movs	r3, #48	@ 0x30
 800b12c:	3130      	adds	r1, #48	@ 0x30
 800b12e:	7083      	strb	r3, [r0, #2]
 800b130:	70c1      	strb	r1, [r0, #3]
 800b132:	1d03      	adds	r3, r0, #4
 800b134:	e7f1      	b.n	800b11a <__exponent+0x58>
	...

0800b138 <_printf_float>:
 800b138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b13c:	b08d      	sub	sp, #52	@ 0x34
 800b13e:	460c      	mov	r4, r1
 800b140:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b144:	4616      	mov	r6, r2
 800b146:	461f      	mov	r7, r3
 800b148:	4605      	mov	r5, r0
 800b14a:	f000 fcdb 	bl	800bb04 <_localeconv_r>
 800b14e:	6803      	ldr	r3, [r0, #0]
 800b150:	9304      	str	r3, [sp, #16]
 800b152:	4618      	mov	r0, r3
 800b154:	f7f5 f89c 	bl	8000290 <strlen>
 800b158:	2300      	movs	r3, #0
 800b15a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b15c:	f8d8 3000 	ldr.w	r3, [r8]
 800b160:	9005      	str	r0, [sp, #20]
 800b162:	3307      	adds	r3, #7
 800b164:	f023 0307 	bic.w	r3, r3, #7
 800b168:	f103 0208 	add.w	r2, r3, #8
 800b16c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b170:	f8d4 b000 	ldr.w	fp, [r4]
 800b174:	f8c8 2000 	str.w	r2, [r8]
 800b178:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b17c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b180:	9307      	str	r3, [sp, #28]
 800b182:	f8cd 8018 	str.w	r8, [sp, #24]
 800b186:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b18a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b18e:	4b9c      	ldr	r3, [pc, #624]	@ (800b400 <_printf_float+0x2c8>)
 800b190:	f04f 32ff 	mov.w	r2, #4294967295
 800b194:	f7f5 fcda 	bl	8000b4c <__aeabi_dcmpun>
 800b198:	bb70      	cbnz	r0, 800b1f8 <_printf_float+0xc0>
 800b19a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b19e:	4b98      	ldr	r3, [pc, #608]	@ (800b400 <_printf_float+0x2c8>)
 800b1a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a4:	f7f5 fcb4 	bl	8000b10 <__aeabi_dcmple>
 800b1a8:	bb30      	cbnz	r0, 800b1f8 <_printf_float+0xc0>
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	4640      	mov	r0, r8
 800b1b0:	4649      	mov	r1, r9
 800b1b2:	f7f5 fca3 	bl	8000afc <__aeabi_dcmplt>
 800b1b6:	b110      	cbz	r0, 800b1be <_printf_float+0x86>
 800b1b8:	232d      	movs	r3, #45	@ 0x2d
 800b1ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1be:	4a91      	ldr	r2, [pc, #580]	@ (800b404 <_printf_float+0x2cc>)
 800b1c0:	4b91      	ldr	r3, [pc, #580]	@ (800b408 <_printf_float+0x2d0>)
 800b1c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b1c6:	bf8c      	ite	hi
 800b1c8:	4690      	movhi	r8, r2
 800b1ca:	4698      	movls	r8, r3
 800b1cc:	2303      	movs	r3, #3
 800b1ce:	6123      	str	r3, [r4, #16]
 800b1d0:	f02b 0304 	bic.w	r3, fp, #4
 800b1d4:	6023      	str	r3, [r4, #0]
 800b1d6:	f04f 0900 	mov.w	r9, #0
 800b1da:	9700      	str	r7, [sp, #0]
 800b1dc:	4633      	mov	r3, r6
 800b1de:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b1e0:	4621      	mov	r1, r4
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	f000 f9d2 	bl	800b58c <_printf_common>
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	f040 808d 	bne.w	800b308 <_printf_float+0x1d0>
 800b1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f2:	b00d      	add	sp, #52	@ 0x34
 800b1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1f8:	4642      	mov	r2, r8
 800b1fa:	464b      	mov	r3, r9
 800b1fc:	4640      	mov	r0, r8
 800b1fe:	4649      	mov	r1, r9
 800b200:	f7f5 fca4 	bl	8000b4c <__aeabi_dcmpun>
 800b204:	b140      	cbz	r0, 800b218 <_printf_float+0xe0>
 800b206:	464b      	mov	r3, r9
 800b208:	2b00      	cmp	r3, #0
 800b20a:	bfbc      	itt	lt
 800b20c:	232d      	movlt	r3, #45	@ 0x2d
 800b20e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b212:	4a7e      	ldr	r2, [pc, #504]	@ (800b40c <_printf_float+0x2d4>)
 800b214:	4b7e      	ldr	r3, [pc, #504]	@ (800b410 <_printf_float+0x2d8>)
 800b216:	e7d4      	b.n	800b1c2 <_printf_float+0x8a>
 800b218:	6863      	ldr	r3, [r4, #4]
 800b21a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b21e:	9206      	str	r2, [sp, #24]
 800b220:	1c5a      	adds	r2, r3, #1
 800b222:	d13b      	bne.n	800b29c <_printf_float+0x164>
 800b224:	2306      	movs	r3, #6
 800b226:	6063      	str	r3, [r4, #4]
 800b228:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b22c:	2300      	movs	r3, #0
 800b22e:	6022      	str	r2, [r4, #0]
 800b230:	9303      	str	r3, [sp, #12]
 800b232:	ab0a      	add	r3, sp, #40	@ 0x28
 800b234:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b238:	ab09      	add	r3, sp, #36	@ 0x24
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	6861      	ldr	r1, [r4, #4]
 800b23e:	ec49 8b10 	vmov	d0, r8, r9
 800b242:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b246:	4628      	mov	r0, r5
 800b248:	f7ff fed6 	bl	800aff8 <__cvt>
 800b24c:	9b06      	ldr	r3, [sp, #24]
 800b24e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b250:	2b47      	cmp	r3, #71	@ 0x47
 800b252:	4680      	mov	r8, r0
 800b254:	d129      	bne.n	800b2aa <_printf_float+0x172>
 800b256:	1cc8      	adds	r0, r1, #3
 800b258:	db02      	blt.n	800b260 <_printf_float+0x128>
 800b25a:	6863      	ldr	r3, [r4, #4]
 800b25c:	4299      	cmp	r1, r3
 800b25e:	dd41      	ble.n	800b2e4 <_printf_float+0x1ac>
 800b260:	f1aa 0a02 	sub.w	sl, sl, #2
 800b264:	fa5f fa8a 	uxtb.w	sl, sl
 800b268:	3901      	subs	r1, #1
 800b26a:	4652      	mov	r2, sl
 800b26c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b270:	9109      	str	r1, [sp, #36]	@ 0x24
 800b272:	f7ff ff26 	bl	800b0c2 <__exponent>
 800b276:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b278:	1813      	adds	r3, r2, r0
 800b27a:	2a01      	cmp	r2, #1
 800b27c:	4681      	mov	r9, r0
 800b27e:	6123      	str	r3, [r4, #16]
 800b280:	dc02      	bgt.n	800b288 <_printf_float+0x150>
 800b282:	6822      	ldr	r2, [r4, #0]
 800b284:	07d2      	lsls	r2, r2, #31
 800b286:	d501      	bpl.n	800b28c <_printf_float+0x154>
 800b288:	3301      	adds	r3, #1
 800b28a:	6123      	str	r3, [r4, #16]
 800b28c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b290:	2b00      	cmp	r3, #0
 800b292:	d0a2      	beq.n	800b1da <_printf_float+0xa2>
 800b294:	232d      	movs	r3, #45	@ 0x2d
 800b296:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b29a:	e79e      	b.n	800b1da <_printf_float+0xa2>
 800b29c:	9a06      	ldr	r2, [sp, #24]
 800b29e:	2a47      	cmp	r2, #71	@ 0x47
 800b2a0:	d1c2      	bne.n	800b228 <_printf_float+0xf0>
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1c0      	bne.n	800b228 <_printf_float+0xf0>
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e7bd      	b.n	800b226 <_printf_float+0xee>
 800b2aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b2ae:	d9db      	bls.n	800b268 <_printf_float+0x130>
 800b2b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b2b4:	d118      	bne.n	800b2e8 <_printf_float+0x1b0>
 800b2b6:	2900      	cmp	r1, #0
 800b2b8:	6863      	ldr	r3, [r4, #4]
 800b2ba:	dd0b      	ble.n	800b2d4 <_printf_float+0x19c>
 800b2bc:	6121      	str	r1, [r4, #16]
 800b2be:	b913      	cbnz	r3, 800b2c6 <_printf_float+0x18e>
 800b2c0:	6822      	ldr	r2, [r4, #0]
 800b2c2:	07d0      	lsls	r0, r2, #31
 800b2c4:	d502      	bpl.n	800b2cc <_printf_float+0x194>
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	440b      	add	r3, r1
 800b2ca:	6123      	str	r3, [r4, #16]
 800b2cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b2ce:	f04f 0900 	mov.w	r9, #0
 800b2d2:	e7db      	b.n	800b28c <_printf_float+0x154>
 800b2d4:	b913      	cbnz	r3, 800b2dc <_printf_float+0x1a4>
 800b2d6:	6822      	ldr	r2, [r4, #0]
 800b2d8:	07d2      	lsls	r2, r2, #31
 800b2da:	d501      	bpl.n	800b2e0 <_printf_float+0x1a8>
 800b2dc:	3302      	adds	r3, #2
 800b2de:	e7f4      	b.n	800b2ca <_printf_float+0x192>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e7f2      	b.n	800b2ca <_printf_float+0x192>
 800b2e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b2e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2ea:	4299      	cmp	r1, r3
 800b2ec:	db05      	blt.n	800b2fa <_printf_float+0x1c2>
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	6121      	str	r1, [r4, #16]
 800b2f2:	07d8      	lsls	r0, r3, #31
 800b2f4:	d5ea      	bpl.n	800b2cc <_printf_float+0x194>
 800b2f6:	1c4b      	adds	r3, r1, #1
 800b2f8:	e7e7      	b.n	800b2ca <_printf_float+0x192>
 800b2fa:	2900      	cmp	r1, #0
 800b2fc:	bfd4      	ite	le
 800b2fe:	f1c1 0202 	rsble	r2, r1, #2
 800b302:	2201      	movgt	r2, #1
 800b304:	4413      	add	r3, r2
 800b306:	e7e0      	b.n	800b2ca <_printf_float+0x192>
 800b308:	6823      	ldr	r3, [r4, #0]
 800b30a:	055a      	lsls	r2, r3, #21
 800b30c:	d407      	bmi.n	800b31e <_printf_float+0x1e6>
 800b30e:	6923      	ldr	r3, [r4, #16]
 800b310:	4642      	mov	r2, r8
 800b312:	4631      	mov	r1, r6
 800b314:	4628      	mov	r0, r5
 800b316:	47b8      	blx	r7
 800b318:	3001      	adds	r0, #1
 800b31a:	d12b      	bne.n	800b374 <_printf_float+0x23c>
 800b31c:	e767      	b.n	800b1ee <_printf_float+0xb6>
 800b31e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b322:	f240 80dd 	bls.w	800b4e0 <_printf_float+0x3a8>
 800b326:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b32a:	2200      	movs	r2, #0
 800b32c:	2300      	movs	r3, #0
 800b32e:	f7f5 fbdb 	bl	8000ae8 <__aeabi_dcmpeq>
 800b332:	2800      	cmp	r0, #0
 800b334:	d033      	beq.n	800b39e <_printf_float+0x266>
 800b336:	4a37      	ldr	r2, [pc, #220]	@ (800b414 <_printf_float+0x2dc>)
 800b338:	2301      	movs	r3, #1
 800b33a:	4631      	mov	r1, r6
 800b33c:	4628      	mov	r0, r5
 800b33e:	47b8      	blx	r7
 800b340:	3001      	adds	r0, #1
 800b342:	f43f af54 	beq.w	800b1ee <_printf_float+0xb6>
 800b346:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b34a:	4543      	cmp	r3, r8
 800b34c:	db02      	blt.n	800b354 <_printf_float+0x21c>
 800b34e:	6823      	ldr	r3, [r4, #0]
 800b350:	07d8      	lsls	r0, r3, #31
 800b352:	d50f      	bpl.n	800b374 <_printf_float+0x23c>
 800b354:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b358:	4631      	mov	r1, r6
 800b35a:	4628      	mov	r0, r5
 800b35c:	47b8      	blx	r7
 800b35e:	3001      	adds	r0, #1
 800b360:	f43f af45 	beq.w	800b1ee <_printf_float+0xb6>
 800b364:	f04f 0900 	mov.w	r9, #0
 800b368:	f108 38ff 	add.w	r8, r8, #4294967295
 800b36c:	f104 0a1a 	add.w	sl, r4, #26
 800b370:	45c8      	cmp	r8, r9
 800b372:	dc09      	bgt.n	800b388 <_printf_float+0x250>
 800b374:	6823      	ldr	r3, [r4, #0]
 800b376:	079b      	lsls	r3, r3, #30
 800b378:	f100 8103 	bmi.w	800b582 <_printf_float+0x44a>
 800b37c:	68e0      	ldr	r0, [r4, #12]
 800b37e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b380:	4298      	cmp	r0, r3
 800b382:	bfb8      	it	lt
 800b384:	4618      	movlt	r0, r3
 800b386:	e734      	b.n	800b1f2 <_printf_float+0xba>
 800b388:	2301      	movs	r3, #1
 800b38a:	4652      	mov	r2, sl
 800b38c:	4631      	mov	r1, r6
 800b38e:	4628      	mov	r0, r5
 800b390:	47b8      	blx	r7
 800b392:	3001      	adds	r0, #1
 800b394:	f43f af2b 	beq.w	800b1ee <_printf_float+0xb6>
 800b398:	f109 0901 	add.w	r9, r9, #1
 800b39c:	e7e8      	b.n	800b370 <_printf_float+0x238>
 800b39e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	dc39      	bgt.n	800b418 <_printf_float+0x2e0>
 800b3a4:	4a1b      	ldr	r2, [pc, #108]	@ (800b414 <_printf_float+0x2dc>)
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	4631      	mov	r1, r6
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	47b8      	blx	r7
 800b3ae:	3001      	adds	r0, #1
 800b3b0:	f43f af1d 	beq.w	800b1ee <_printf_float+0xb6>
 800b3b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b3b8:	ea59 0303 	orrs.w	r3, r9, r3
 800b3bc:	d102      	bne.n	800b3c4 <_printf_float+0x28c>
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	07d9      	lsls	r1, r3, #31
 800b3c2:	d5d7      	bpl.n	800b374 <_printf_float+0x23c>
 800b3c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3c8:	4631      	mov	r1, r6
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	47b8      	blx	r7
 800b3ce:	3001      	adds	r0, #1
 800b3d0:	f43f af0d 	beq.w	800b1ee <_printf_float+0xb6>
 800b3d4:	f04f 0a00 	mov.w	sl, #0
 800b3d8:	f104 0b1a 	add.w	fp, r4, #26
 800b3dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3de:	425b      	negs	r3, r3
 800b3e0:	4553      	cmp	r3, sl
 800b3e2:	dc01      	bgt.n	800b3e8 <_printf_float+0x2b0>
 800b3e4:	464b      	mov	r3, r9
 800b3e6:	e793      	b.n	800b310 <_printf_float+0x1d8>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	465a      	mov	r2, fp
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	47b8      	blx	r7
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	f43f aefb 	beq.w	800b1ee <_printf_float+0xb6>
 800b3f8:	f10a 0a01 	add.w	sl, sl, #1
 800b3fc:	e7ee      	b.n	800b3dc <_printf_float+0x2a4>
 800b3fe:	bf00      	nop
 800b400:	7fefffff 	.word	0x7fefffff
 800b404:	0800e488 	.word	0x0800e488
 800b408:	0800e484 	.word	0x0800e484
 800b40c:	0800e490 	.word	0x0800e490
 800b410:	0800e48c 	.word	0x0800e48c
 800b414:	0800e494 	.word	0x0800e494
 800b418:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b41a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b41e:	4553      	cmp	r3, sl
 800b420:	bfa8      	it	ge
 800b422:	4653      	movge	r3, sl
 800b424:	2b00      	cmp	r3, #0
 800b426:	4699      	mov	r9, r3
 800b428:	dc36      	bgt.n	800b498 <_printf_float+0x360>
 800b42a:	f04f 0b00 	mov.w	fp, #0
 800b42e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b432:	f104 021a 	add.w	r2, r4, #26
 800b436:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b438:	9306      	str	r3, [sp, #24]
 800b43a:	eba3 0309 	sub.w	r3, r3, r9
 800b43e:	455b      	cmp	r3, fp
 800b440:	dc31      	bgt.n	800b4a6 <_printf_float+0x36e>
 800b442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b444:	459a      	cmp	sl, r3
 800b446:	dc3a      	bgt.n	800b4be <_printf_float+0x386>
 800b448:	6823      	ldr	r3, [r4, #0]
 800b44a:	07da      	lsls	r2, r3, #31
 800b44c:	d437      	bmi.n	800b4be <_printf_float+0x386>
 800b44e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b450:	ebaa 0903 	sub.w	r9, sl, r3
 800b454:	9b06      	ldr	r3, [sp, #24]
 800b456:	ebaa 0303 	sub.w	r3, sl, r3
 800b45a:	4599      	cmp	r9, r3
 800b45c:	bfa8      	it	ge
 800b45e:	4699      	movge	r9, r3
 800b460:	f1b9 0f00 	cmp.w	r9, #0
 800b464:	dc33      	bgt.n	800b4ce <_printf_float+0x396>
 800b466:	f04f 0800 	mov.w	r8, #0
 800b46a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b46e:	f104 0b1a 	add.w	fp, r4, #26
 800b472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b474:	ebaa 0303 	sub.w	r3, sl, r3
 800b478:	eba3 0309 	sub.w	r3, r3, r9
 800b47c:	4543      	cmp	r3, r8
 800b47e:	f77f af79 	ble.w	800b374 <_printf_float+0x23c>
 800b482:	2301      	movs	r3, #1
 800b484:	465a      	mov	r2, fp
 800b486:	4631      	mov	r1, r6
 800b488:	4628      	mov	r0, r5
 800b48a:	47b8      	blx	r7
 800b48c:	3001      	adds	r0, #1
 800b48e:	f43f aeae 	beq.w	800b1ee <_printf_float+0xb6>
 800b492:	f108 0801 	add.w	r8, r8, #1
 800b496:	e7ec      	b.n	800b472 <_printf_float+0x33a>
 800b498:	4642      	mov	r2, r8
 800b49a:	4631      	mov	r1, r6
 800b49c:	4628      	mov	r0, r5
 800b49e:	47b8      	blx	r7
 800b4a0:	3001      	adds	r0, #1
 800b4a2:	d1c2      	bne.n	800b42a <_printf_float+0x2f2>
 800b4a4:	e6a3      	b.n	800b1ee <_printf_float+0xb6>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	4631      	mov	r1, r6
 800b4aa:	4628      	mov	r0, r5
 800b4ac:	9206      	str	r2, [sp, #24]
 800b4ae:	47b8      	blx	r7
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	f43f ae9c 	beq.w	800b1ee <_printf_float+0xb6>
 800b4b6:	9a06      	ldr	r2, [sp, #24]
 800b4b8:	f10b 0b01 	add.w	fp, fp, #1
 800b4bc:	e7bb      	b.n	800b436 <_printf_float+0x2fe>
 800b4be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4c2:	4631      	mov	r1, r6
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	47b8      	blx	r7
 800b4c8:	3001      	adds	r0, #1
 800b4ca:	d1c0      	bne.n	800b44e <_printf_float+0x316>
 800b4cc:	e68f      	b.n	800b1ee <_printf_float+0xb6>
 800b4ce:	9a06      	ldr	r2, [sp, #24]
 800b4d0:	464b      	mov	r3, r9
 800b4d2:	4442      	add	r2, r8
 800b4d4:	4631      	mov	r1, r6
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	47b8      	blx	r7
 800b4da:	3001      	adds	r0, #1
 800b4dc:	d1c3      	bne.n	800b466 <_printf_float+0x32e>
 800b4de:	e686      	b.n	800b1ee <_printf_float+0xb6>
 800b4e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b4e4:	f1ba 0f01 	cmp.w	sl, #1
 800b4e8:	dc01      	bgt.n	800b4ee <_printf_float+0x3b6>
 800b4ea:	07db      	lsls	r3, r3, #31
 800b4ec:	d536      	bpl.n	800b55c <_printf_float+0x424>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	4642      	mov	r2, r8
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	47b8      	blx	r7
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	f43f ae78 	beq.w	800b1ee <_printf_float+0xb6>
 800b4fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b502:	4631      	mov	r1, r6
 800b504:	4628      	mov	r0, r5
 800b506:	47b8      	blx	r7
 800b508:	3001      	adds	r0, #1
 800b50a:	f43f ae70 	beq.w	800b1ee <_printf_float+0xb6>
 800b50e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b512:	2200      	movs	r2, #0
 800b514:	2300      	movs	r3, #0
 800b516:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b51a:	f7f5 fae5 	bl	8000ae8 <__aeabi_dcmpeq>
 800b51e:	b9c0      	cbnz	r0, 800b552 <_printf_float+0x41a>
 800b520:	4653      	mov	r3, sl
 800b522:	f108 0201 	add.w	r2, r8, #1
 800b526:	4631      	mov	r1, r6
 800b528:	4628      	mov	r0, r5
 800b52a:	47b8      	blx	r7
 800b52c:	3001      	adds	r0, #1
 800b52e:	d10c      	bne.n	800b54a <_printf_float+0x412>
 800b530:	e65d      	b.n	800b1ee <_printf_float+0xb6>
 800b532:	2301      	movs	r3, #1
 800b534:	465a      	mov	r2, fp
 800b536:	4631      	mov	r1, r6
 800b538:	4628      	mov	r0, r5
 800b53a:	47b8      	blx	r7
 800b53c:	3001      	adds	r0, #1
 800b53e:	f43f ae56 	beq.w	800b1ee <_printf_float+0xb6>
 800b542:	f108 0801 	add.w	r8, r8, #1
 800b546:	45d0      	cmp	r8, sl
 800b548:	dbf3      	blt.n	800b532 <_printf_float+0x3fa>
 800b54a:	464b      	mov	r3, r9
 800b54c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b550:	e6df      	b.n	800b312 <_printf_float+0x1da>
 800b552:	f04f 0800 	mov.w	r8, #0
 800b556:	f104 0b1a 	add.w	fp, r4, #26
 800b55a:	e7f4      	b.n	800b546 <_printf_float+0x40e>
 800b55c:	2301      	movs	r3, #1
 800b55e:	4642      	mov	r2, r8
 800b560:	e7e1      	b.n	800b526 <_printf_float+0x3ee>
 800b562:	2301      	movs	r3, #1
 800b564:	464a      	mov	r2, r9
 800b566:	4631      	mov	r1, r6
 800b568:	4628      	mov	r0, r5
 800b56a:	47b8      	blx	r7
 800b56c:	3001      	adds	r0, #1
 800b56e:	f43f ae3e 	beq.w	800b1ee <_printf_float+0xb6>
 800b572:	f108 0801 	add.w	r8, r8, #1
 800b576:	68e3      	ldr	r3, [r4, #12]
 800b578:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b57a:	1a5b      	subs	r3, r3, r1
 800b57c:	4543      	cmp	r3, r8
 800b57e:	dcf0      	bgt.n	800b562 <_printf_float+0x42a>
 800b580:	e6fc      	b.n	800b37c <_printf_float+0x244>
 800b582:	f04f 0800 	mov.w	r8, #0
 800b586:	f104 0919 	add.w	r9, r4, #25
 800b58a:	e7f4      	b.n	800b576 <_printf_float+0x43e>

0800b58c <_printf_common>:
 800b58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b590:	4616      	mov	r6, r2
 800b592:	4698      	mov	r8, r3
 800b594:	688a      	ldr	r2, [r1, #8]
 800b596:	690b      	ldr	r3, [r1, #16]
 800b598:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b59c:	4293      	cmp	r3, r2
 800b59e:	bfb8      	it	lt
 800b5a0:	4613      	movlt	r3, r2
 800b5a2:	6033      	str	r3, [r6, #0]
 800b5a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b5a8:	4607      	mov	r7, r0
 800b5aa:	460c      	mov	r4, r1
 800b5ac:	b10a      	cbz	r2, 800b5b2 <_printf_common+0x26>
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	6033      	str	r3, [r6, #0]
 800b5b2:	6823      	ldr	r3, [r4, #0]
 800b5b4:	0699      	lsls	r1, r3, #26
 800b5b6:	bf42      	ittt	mi
 800b5b8:	6833      	ldrmi	r3, [r6, #0]
 800b5ba:	3302      	addmi	r3, #2
 800b5bc:	6033      	strmi	r3, [r6, #0]
 800b5be:	6825      	ldr	r5, [r4, #0]
 800b5c0:	f015 0506 	ands.w	r5, r5, #6
 800b5c4:	d106      	bne.n	800b5d4 <_printf_common+0x48>
 800b5c6:	f104 0a19 	add.w	sl, r4, #25
 800b5ca:	68e3      	ldr	r3, [r4, #12]
 800b5cc:	6832      	ldr	r2, [r6, #0]
 800b5ce:	1a9b      	subs	r3, r3, r2
 800b5d0:	42ab      	cmp	r3, r5
 800b5d2:	dc26      	bgt.n	800b622 <_printf_common+0x96>
 800b5d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b5d8:	6822      	ldr	r2, [r4, #0]
 800b5da:	3b00      	subs	r3, #0
 800b5dc:	bf18      	it	ne
 800b5de:	2301      	movne	r3, #1
 800b5e0:	0692      	lsls	r2, r2, #26
 800b5e2:	d42b      	bmi.n	800b63c <_printf_common+0xb0>
 800b5e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b5e8:	4641      	mov	r1, r8
 800b5ea:	4638      	mov	r0, r7
 800b5ec:	47c8      	blx	r9
 800b5ee:	3001      	adds	r0, #1
 800b5f0:	d01e      	beq.n	800b630 <_printf_common+0xa4>
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	6922      	ldr	r2, [r4, #16]
 800b5f6:	f003 0306 	and.w	r3, r3, #6
 800b5fa:	2b04      	cmp	r3, #4
 800b5fc:	bf02      	ittt	eq
 800b5fe:	68e5      	ldreq	r5, [r4, #12]
 800b600:	6833      	ldreq	r3, [r6, #0]
 800b602:	1aed      	subeq	r5, r5, r3
 800b604:	68a3      	ldr	r3, [r4, #8]
 800b606:	bf0c      	ite	eq
 800b608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b60c:	2500      	movne	r5, #0
 800b60e:	4293      	cmp	r3, r2
 800b610:	bfc4      	itt	gt
 800b612:	1a9b      	subgt	r3, r3, r2
 800b614:	18ed      	addgt	r5, r5, r3
 800b616:	2600      	movs	r6, #0
 800b618:	341a      	adds	r4, #26
 800b61a:	42b5      	cmp	r5, r6
 800b61c:	d11a      	bne.n	800b654 <_printf_common+0xc8>
 800b61e:	2000      	movs	r0, #0
 800b620:	e008      	b.n	800b634 <_printf_common+0xa8>
 800b622:	2301      	movs	r3, #1
 800b624:	4652      	mov	r2, sl
 800b626:	4641      	mov	r1, r8
 800b628:	4638      	mov	r0, r7
 800b62a:	47c8      	blx	r9
 800b62c:	3001      	adds	r0, #1
 800b62e:	d103      	bne.n	800b638 <_printf_common+0xac>
 800b630:	f04f 30ff 	mov.w	r0, #4294967295
 800b634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b638:	3501      	adds	r5, #1
 800b63a:	e7c6      	b.n	800b5ca <_printf_common+0x3e>
 800b63c:	18e1      	adds	r1, r4, r3
 800b63e:	1c5a      	adds	r2, r3, #1
 800b640:	2030      	movs	r0, #48	@ 0x30
 800b642:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b646:	4422      	add	r2, r4
 800b648:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b64c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b650:	3302      	adds	r3, #2
 800b652:	e7c7      	b.n	800b5e4 <_printf_common+0x58>
 800b654:	2301      	movs	r3, #1
 800b656:	4622      	mov	r2, r4
 800b658:	4641      	mov	r1, r8
 800b65a:	4638      	mov	r0, r7
 800b65c:	47c8      	blx	r9
 800b65e:	3001      	adds	r0, #1
 800b660:	d0e6      	beq.n	800b630 <_printf_common+0xa4>
 800b662:	3601      	adds	r6, #1
 800b664:	e7d9      	b.n	800b61a <_printf_common+0x8e>
	...

0800b668 <_printf_i>:
 800b668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b66c:	7e0f      	ldrb	r7, [r1, #24]
 800b66e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b670:	2f78      	cmp	r7, #120	@ 0x78
 800b672:	4691      	mov	r9, r2
 800b674:	4680      	mov	r8, r0
 800b676:	460c      	mov	r4, r1
 800b678:	469a      	mov	sl, r3
 800b67a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b67e:	d807      	bhi.n	800b690 <_printf_i+0x28>
 800b680:	2f62      	cmp	r7, #98	@ 0x62
 800b682:	d80a      	bhi.n	800b69a <_printf_i+0x32>
 800b684:	2f00      	cmp	r7, #0
 800b686:	f000 80d1 	beq.w	800b82c <_printf_i+0x1c4>
 800b68a:	2f58      	cmp	r7, #88	@ 0x58
 800b68c:	f000 80b8 	beq.w	800b800 <_printf_i+0x198>
 800b690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b694:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b698:	e03a      	b.n	800b710 <_printf_i+0xa8>
 800b69a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b69e:	2b15      	cmp	r3, #21
 800b6a0:	d8f6      	bhi.n	800b690 <_printf_i+0x28>
 800b6a2:	a101      	add	r1, pc, #4	@ (adr r1, 800b6a8 <_printf_i+0x40>)
 800b6a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b6a8:	0800b701 	.word	0x0800b701
 800b6ac:	0800b715 	.word	0x0800b715
 800b6b0:	0800b691 	.word	0x0800b691
 800b6b4:	0800b691 	.word	0x0800b691
 800b6b8:	0800b691 	.word	0x0800b691
 800b6bc:	0800b691 	.word	0x0800b691
 800b6c0:	0800b715 	.word	0x0800b715
 800b6c4:	0800b691 	.word	0x0800b691
 800b6c8:	0800b691 	.word	0x0800b691
 800b6cc:	0800b691 	.word	0x0800b691
 800b6d0:	0800b691 	.word	0x0800b691
 800b6d4:	0800b813 	.word	0x0800b813
 800b6d8:	0800b73f 	.word	0x0800b73f
 800b6dc:	0800b7cd 	.word	0x0800b7cd
 800b6e0:	0800b691 	.word	0x0800b691
 800b6e4:	0800b691 	.word	0x0800b691
 800b6e8:	0800b835 	.word	0x0800b835
 800b6ec:	0800b691 	.word	0x0800b691
 800b6f0:	0800b73f 	.word	0x0800b73f
 800b6f4:	0800b691 	.word	0x0800b691
 800b6f8:	0800b691 	.word	0x0800b691
 800b6fc:	0800b7d5 	.word	0x0800b7d5
 800b700:	6833      	ldr	r3, [r6, #0]
 800b702:	1d1a      	adds	r2, r3, #4
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	6032      	str	r2, [r6, #0]
 800b708:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b70c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b710:	2301      	movs	r3, #1
 800b712:	e09c      	b.n	800b84e <_printf_i+0x1e6>
 800b714:	6833      	ldr	r3, [r6, #0]
 800b716:	6820      	ldr	r0, [r4, #0]
 800b718:	1d19      	adds	r1, r3, #4
 800b71a:	6031      	str	r1, [r6, #0]
 800b71c:	0606      	lsls	r6, r0, #24
 800b71e:	d501      	bpl.n	800b724 <_printf_i+0xbc>
 800b720:	681d      	ldr	r5, [r3, #0]
 800b722:	e003      	b.n	800b72c <_printf_i+0xc4>
 800b724:	0645      	lsls	r5, r0, #25
 800b726:	d5fb      	bpl.n	800b720 <_printf_i+0xb8>
 800b728:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b72c:	2d00      	cmp	r5, #0
 800b72e:	da03      	bge.n	800b738 <_printf_i+0xd0>
 800b730:	232d      	movs	r3, #45	@ 0x2d
 800b732:	426d      	negs	r5, r5
 800b734:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b738:	4858      	ldr	r0, [pc, #352]	@ (800b89c <_printf_i+0x234>)
 800b73a:	230a      	movs	r3, #10
 800b73c:	e011      	b.n	800b762 <_printf_i+0xfa>
 800b73e:	6821      	ldr	r1, [r4, #0]
 800b740:	6833      	ldr	r3, [r6, #0]
 800b742:	0608      	lsls	r0, r1, #24
 800b744:	f853 5b04 	ldr.w	r5, [r3], #4
 800b748:	d402      	bmi.n	800b750 <_printf_i+0xe8>
 800b74a:	0649      	lsls	r1, r1, #25
 800b74c:	bf48      	it	mi
 800b74e:	b2ad      	uxthmi	r5, r5
 800b750:	2f6f      	cmp	r7, #111	@ 0x6f
 800b752:	4852      	ldr	r0, [pc, #328]	@ (800b89c <_printf_i+0x234>)
 800b754:	6033      	str	r3, [r6, #0]
 800b756:	bf14      	ite	ne
 800b758:	230a      	movne	r3, #10
 800b75a:	2308      	moveq	r3, #8
 800b75c:	2100      	movs	r1, #0
 800b75e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b762:	6866      	ldr	r6, [r4, #4]
 800b764:	60a6      	str	r6, [r4, #8]
 800b766:	2e00      	cmp	r6, #0
 800b768:	db05      	blt.n	800b776 <_printf_i+0x10e>
 800b76a:	6821      	ldr	r1, [r4, #0]
 800b76c:	432e      	orrs	r6, r5
 800b76e:	f021 0104 	bic.w	r1, r1, #4
 800b772:	6021      	str	r1, [r4, #0]
 800b774:	d04b      	beq.n	800b80e <_printf_i+0x1a6>
 800b776:	4616      	mov	r6, r2
 800b778:	fbb5 f1f3 	udiv	r1, r5, r3
 800b77c:	fb03 5711 	mls	r7, r3, r1, r5
 800b780:	5dc7      	ldrb	r7, [r0, r7]
 800b782:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b786:	462f      	mov	r7, r5
 800b788:	42bb      	cmp	r3, r7
 800b78a:	460d      	mov	r5, r1
 800b78c:	d9f4      	bls.n	800b778 <_printf_i+0x110>
 800b78e:	2b08      	cmp	r3, #8
 800b790:	d10b      	bne.n	800b7aa <_printf_i+0x142>
 800b792:	6823      	ldr	r3, [r4, #0]
 800b794:	07df      	lsls	r7, r3, #31
 800b796:	d508      	bpl.n	800b7aa <_printf_i+0x142>
 800b798:	6923      	ldr	r3, [r4, #16]
 800b79a:	6861      	ldr	r1, [r4, #4]
 800b79c:	4299      	cmp	r1, r3
 800b79e:	bfde      	ittt	le
 800b7a0:	2330      	movle	r3, #48	@ 0x30
 800b7a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b7a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b7aa:	1b92      	subs	r2, r2, r6
 800b7ac:	6122      	str	r2, [r4, #16]
 800b7ae:	f8cd a000 	str.w	sl, [sp]
 800b7b2:	464b      	mov	r3, r9
 800b7b4:	aa03      	add	r2, sp, #12
 800b7b6:	4621      	mov	r1, r4
 800b7b8:	4640      	mov	r0, r8
 800b7ba:	f7ff fee7 	bl	800b58c <_printf_common>
 800b7be:	3001      	adds	r0, #1
 800b7c0:	d14a      	bne.n	800b858 <_printf_i+0x1f0>
 800b7c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c6:	b004      	add	sp, #16
 800b7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	f043 0320 	orr.w	r3, r3, #32
 800b7d2:	6023      	str	r3, [r4, #0]
 800b7d4:	4832      	ldr	r0, [pc, #200]	@ (800b8a0 <_printf_i+0x238>)
 800b7d6:	2778      	movs	r7, #120	@ 0x78
 800b7d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b7dc:	6823      	ldr	r3, [r4, #0]
 800b7de:	6831      	ldr	r1, [r6, #0]
 800b7e0:	061f      	lsls	r7, r3, #24
 800b7e2:	f851 5b04 	ldr.w	r5, [r1], #4
 800b7e6:	d402      	bmi.n	800b7ee <_printf_i+0x186>
 800b7e8:	065f      	lsls	r7, r3, #25
 800b7ea:	bf48      	it	mi
 800b7ec:	b2ad      	uxthmi	r5, r5
 800b7ee:	6031      	str	r1, [r6, #0]
 800b7f0:	07d9      	lsls	r1, r3, #31
 800b7f2:	bf44      	itt	mi
 800b7f4:	f043 0320 	orrmi.w	r3, r3, #32
 800b7f8:	6023      	strmi	r3, [r4, #0]
 800b7fa:	b11d      	cbz	r5, 800b804 <_printf_i+0x19c>
 800b7fc:	2310      	movs	r3, #16
 800b7fe:	e7ad      	b.n	800b75c <_printf_i+0xf4>
 800b800:	4826      	ldr	r0, [pc, #152]	@ (800b89c <_printf_i+0x234>)
 800b802:	e7e9      	b.n	800b7d8 <_printf_i+0x170>
 800b804:	6823      	ldr	r3, [r4, #0]
 800b806:	f023 0320 	bic.w	r3, r3, #32
 800b80a:	6023      	str	r3, [r4, #0]
 800b80c:	e7f6      	b.n	800b7fc <_printf_i+0x194>
 800b80e:	4616      	mov	r6, r2
 800b810:	e7bd      	b.n	800b78e <_printf_i+0x126>
 800b812:	6833      	ldr	r3, [r6, #0]
 800b814:	6825      	ldr	r5, [r4, #0]
 800b816:	6961      	ldr	r1, [r4, #20]
 800b818:	1d18      	adds	r0, r3, #4
 800b81a:	6030      	str	r0, [r6, #0]
 800b81c:	062e      	lsls	r6, r5, #24
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	d501      	bpl.n	800b826 <_printf_i+0x1be>
 800b822:	6019      	str	r1, [r3, #0]
 800b824:	e002      	b.n	800b82c <_printf_i+0x1c4>
 800b826:	0668      	lsls	r0, r5, #25
 800b828:	d5fb      	bpl.n	800b822 <_printf_i+0x1ba>
 800b82a:	8019      	strh	r1, [r3, #0]
 800b82c:	2300      	movs	r3, #0
 800b82e:	6123      	str	r3, [r4, #16]
 800b830:	4616      	mov	r6, r2
 800b832:	e7bc      	b.n	800b7ae <_printf_i+0x146>
 800b834:	6833      	ldr	r3, [r6, #0]
 800b836:	1d1a      	adds	r2, r3, #4
 800b838:	6032      	str	r2, [r6, #0]
 800b83a:	681e      	ldr	r6, [r3, #0]
 800b83c:	6862      	ldr	r2, [r4, #4]
 800b83e:	2100      	movs	r1, #0
 800b840:	4630      	mov	r0, r6
 800b842:	f7f4 fcd5 	bl	80001f0 <memchr>
 800b846:	b108      	cbz	r0, 800b84c <_printf_i+0x1e4>
 800b848:	1b80      	subs	r0, r0, r6
 800b84a:	6060      	str	r0, [r4, #4]
 800b84c:	6863      	ldr	r3, [r4, #4]
 800b84e:	6123      	str	r3, [r4, #16]
 800b850:	2300      	movs	r3, #0
 800b852:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b856:	e7aa      	b.n	800b7ae <_printf_i+0x146>
 800b858:	6923      	ldr	r3, [r4, #16]
 800b85a:	4632      	mov	r2, r6
 800b85c:	4649      	mov	r1, r9
 800b85e:	4640      	mov	r0, r8
 800b860:	47d0      	blx	sl
 800b862:	3001      	adds	r0, #1
 800b864:	d0ad      	beq.n	800b7c2 <_printf_i+0x15a>
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	079b      	lsls	r3, r3, #30
 800b86a:	d413      	bmi.n	800b894 <_printf_i+0x22c>
 800b86c:	68e0      	ldr	r0, [r4, #12]
 800b86e:	9b03      	ldr	r3, [sp, #12]
 800b870:	4298      	cmp	r0, r3
 800b872:	bfb8      	it	lt
 800b874:	4618      	movlt	r0, r3
 800b876:	e7a6      	b.n	800b7c6 <_printf_i+0x15e>
 800b878:	2301      	movs	r3, #1
 800b87a:	4632      	mov	r2, r6
 800b87c:	4649      	mov	r1, r9
 800b87e:	4640      	mov	r0, r8
 800b880:	47d0      	blx	sl
 800b882:	3001      	adds	r0, #1
 800b884:	d09d      	beq.n	800b7c2 <_printf_i+0x15a>
 800b886:	3501      	adds	r5, #1
 800b888:	68e3      	ldr	r3, [r4, #12]
 800b88a:	9903      	ldr	r1, [sp, #12]
 800b88c:	1a5b      	subs	r3, r3, r1
 800b88e:	42ab      	cmp	r3, r5
 800b890:	dcf2      	bgt.n	800b878 <_printf_i+0x210>
 800b892:	e7eb      	b.n	800b86c <_printf_i+0x204>
 800b894:	2500      	movs	r5, #0
 800b896:	f104 0619 	add.w	r6, r4, #25
 800b89a:	e7f5      	b.n	800b888 <_printf_i+0x220>
 800b89c:	0800e496 	.word	0x0800e496
 800b8a0:	0800e4a7 	.word	0x0800e4a7

0800b8a4 <std>:
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	b510      	push	{r4, lr}
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	e9c0 3300 	strd	r3, r3, [r0]
 800b8ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b8b2:	6083      	str	r3, [r0, #8]
 800b8b4:	8181      	strh	r1, [r0, #12]
 800b8b6:	6643      	str	r3, [r0, #100]	@ 0x64
 800b8b8:	81c2      	strh	r2, [r0, #14]
 800b8ba:	6183      	str	r3, [r0, #24]
 800b8bc:	4619      	mov	r1, r3
 800b8be:	2208      	movs	r2, #8
 800b8c0:	305c      	adds	r0, #92	@ 0x5c
 800b8c2:	f000 f916 	bl	800baf2 <memset>
 800b8c6:	4b0d      	ldr	r3, [pc, #52]	@ (800b8fc <std+0x58>)
 800b8c8:	6263      	str	r3, [r4, #36]	@ 0x24
 800b8ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b900 <std+0x5c>)
 800b8cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b8ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b904 <std+0x60>)
 800b8d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b8d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b908 <std+0x64>)
 800b8d4:	6323      	str	r3, [r4, #48]	@ 0x30
 800b8d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b90c <std+0x68>)
 800b8d8:	6224      	str	r4, [r4, #32]
 800b8da:	429c      	cmp	r4, r3
 800b8dc:	d006      	beq.n	800b8ec <std+0x48>
 800b8de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b8e2:	4294      	cmp	r4, r2
 800b8e4:	d002      	beq.n	800b8ec <std+0x48>
 800b8e6:	33d0      	adds	r3, #208	@ 0xd0
 800b8e8:	429c      	cmp	r4, r3
 800b8ea:	d105      	bne.n	800b8f8 <std+0x54>
 800b8ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b8f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8f4:	f000 b97a 	b.w	800bbec <__retarget_lock_init_recursive>
 800b8f8:	bd10      	pop	{r4, pc}
 800b8fa:	bf00      	nop
 800b8fc:	0800ba6d 	.word	0x0800ba6d
 800b900:	0800ba8f 	.word	0x0800ba8f
 800b904:	0800bac7 	.word	0x0800bac7
 800b908:	0800baeb 	.word	0x0800baeb
 800b90c:	20004e58 	.word	0x20004e58

0800b910 <stdio_exit_handler>:
 800b910:	4a02      	ldr	r2, [pc, #8]	@ (800b91c <stdio_exit_handler+0xc>)
 800b912:	4903      	ldr	r1, [pc, #12]	@ (800b920 <stdio_exit_handler+0x10>)
 800b914:	4803      	ldr	r0, [pc, #12]	@ (800b924 <stdio_exit_handler+0x14>)
 800b916:	f000 b869 	b.w	800b9ec <_fwalk_sglue>
 800b91a:	bf00      	nop
 800b91c:	20000010 	.word	0x20000010
 800b920:	0800d56d 	.word	0x0800d56d
 800b924:	20000020 	.word	0x20000020

0800b928 <cleanup_stdio>:
 800b928:	6841      	ldr	r1, [r0, #4]
 800b92a:	4b0c      	ldr	r3, [pc, #48]	@ (800b95c <cleanup_stdio+0x34>)
 800b92c:	4299      	cmp	r1, r3
 800b92e:	b510      	push	{r4, lr}
 800b930:	4604      	mov	r4, r0
 800b932:	d001      	beq.n	800b938 <cleanup_stdio+0x10>
 800b934:	f001 fe1a 	bl	800d56c <_fflush_r>
 800b938:	68a1      	ldr	r1, [r4, #8]
 800b93a:	4b09      	ldr	r3, [pc, #36]	@ (800b960 <cleanup_stdio+0x38>)
 800b93c:	4299      	cmp	r1, r3
 800b93e:	d002      	beq.n	800b946 <cleanup_stdio+0x1e>
 800b940:	4620      	mov	r0, r4
 800b942:	f001 fe13 	bl	800d56c <_fflush_r>
 800b946:	68e1      	ldr	r1, [r4, #12]
 800b948:	4b06      	ldr	r3, [pc, #24]	@ (800b964 <cleanup_stdio+0x3c>)
 800b94a:	4299      	cmp	r1, r3
 800b94c:	d004      	beq.n	800b958 <cleanup_stdio+0x30>
 800b94e:	4620      	mov	r0, r4
 800b950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b954:	f001 be0a 	b.w	800d56c <_fflush_r>
 800b958:	bd10      	pop	{r4, pc}
 800b95a:	bf00      	nop
 800b95c:	20004e58 	.word	0x20004e58
 800b960:	20004ec0 	.word	0x20004ec0
 800b964:	20004f28 	.word	0x20004f28

0800b968 <global_stdio_init.part.0>:
 800b968:	b510      	push	{r4, lr}
 800b96a:	4b0b      	ldr	r3, [pc, #44]	@ (800b998 <global_stdio_init.part.0+0x30>)
 800b96c:	4c0b      	ldr	r4, [pc, #44]	@ (800b99c <global_stdio_init.part.0+0x34>)
 800b96e:	4a0c      	ldr	r2, [pc, #48]	@ (800b9a0 <global_stdio_init.part.0+0x38>)
 800b970:	601a      	str	r2, [r3, #0]
 800b972:	4620      	mov	r0, r4
 800b974:	2200      	movs	r2, #0
 800b976:	2104      	movs	r1, #4
 800b978:	f7ff ff94 	bl	800b8a4 <std>
 800b97c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b980:	2201      	movs	r2, #1
 800b982:	2109      	movs	r1, #9
 800b984:	f7ff ff8e 	bl	800b8a4 <std>
 800b988:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b98c:	2202      	movs	r2, #2
 800b98e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b992:	2112      	movs	r1, #18
 800b994:	f7ff bf86 	b.w	800b8a4 <std>
 800b998:	20004f90 	.word	0x20004f90
 800b99c:	20004e58 	.word	0x20004e58
 800b9a0:	0800b911 	.word	0x0800b911

0800b9a4 <__sfp_lock_acquire>:
 800b9a4:	4801      	ldr	r0, [pc, #4]	@ (800b9ac <__sfp_lock_acquire+0x8>)
 800b9a6:	f000 b922 	b.w	800bbee <__retarget_lock_acquire_recursive>
 800b9aa:	bf00      	nop
 800b9ac:	20004f99 	.word	0x20004f99

0800b9b0 <__sfp_lock_release>:
 800b9b0:	4801      	ldr	r0, [pc, #4]	@ (800b9b8 <__sfp_lock_release+0x8>)
 800b9b2:	f000 b91d 	b.w	800bbf0 <__retarget_lock_release_recursive>
 800b9b6:	bf00      	nop
 800b9b8:	20004f99 	.word	0x20004f99

0800b9bc <__sinit>:
 800b9bc:	b510      	push	{r4, lr}
 800b9be:	4604      	mov	r4, r0
 800b9c0:	f7ff fff0 	bl	800b9a4 <__sfp_lock_acquire>
 800b9c4:	6a23      	ldr	r3, [r4, #32]
 800b9c6:	b11b      	cbz	r3, 800b9d0 <__sinit+0x14>
 800b9c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9cc:	f7ff bff0 	b.w	800b9b0 <__sfp_lock_release>
 800b9d0:	4b04      	ldr	r3, [pc, #16]	@ (800b9e4 <__sinit+0x28>)
 800b9d2:	6223      	str	r3, [r4, #32]
 800b9d4:	4b04      	ldr	r3, [pc, #16]	@ (800b9e8 <__sinit+0x2c>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1f5      	bne.n	800b9c8 <__sinit+0xc>
 800b9dc:	f7ff ffc4 	bl	800b968 <global_stdio_init.part.0>
 800b9e0:	e7f2      	b.n	800b9c8 <__sinit+0xc>
 800b9e2:	bf00      	nop
 800b9e4:	0800b929 	.word	0x0800b929
 800b9e8:	20004f90 	.word	0x20004f90

0800b9ec <_fwalk_sglue>:
 800b9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9f0:	4607      	mov	r7, r0
 800b9f2:	4688      	mov	r8, r1
 800b9f4:	4614      	mov	r4, r2
 800b9f6:	2600      	movs	r6, #0
 800b9f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9fc:	f1b9 0901 	subs.w	r9, r9, #1
 800ba00:	d505      	bpl.n	800ba0e <_fwalk_sglue+0x22>
 800ba02:	6824      	ldr	r4, [r4, #0]
 800ba04:	2c00      	cmp	r4, #0
 800ba06:	d1f7      	bne.n	800b9f8 <_fwalk_sglue+0xc>
 800ba08:	4630      	mov	r0, r6
 800ba0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba0e:	89ab      	ldrh	r3, [r5, #12]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d907      	bls.n	800ba24 <_fwalk_sglue+0x38>
 800ba14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	d003      	beq.n	800ba24 <_fwalk_sglue+0x38>
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	4638      	mov	r0, r7
 800ba20:	47c0      	blx	r8
 800ba22:	4306      	orrs	r6, r0
 800ba24:	3568      	adds	r5, #104	@ 0x68
 800ba26:	e7e9      	b.n	800b9fc <_fwalk_sglue+0x10>

0800ba28 <siprintf>:
 800ba28:	b40e      	push	{r1, r2, r3}
 800ba2a:	b510      	push	{r4, lr}
 800ba2c:	b09d      	sub	sp, #116	@ 0x74
 800ba2e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800ba30:	9002      	str	r0, [sp, #8]
 800ba32:	9006      	str	r0, [sp, #24]
 800ba34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ba38:	480a      	ldr	r0, [pc, #40]	@ (800ba64 <siprintf+0x3c>)
 800ba3a:	9107      	str	r1, [sp, #28]
 800ba3c:	9104      	str	r1, [sp, #16]
 800ba3e:	490a      	ldr	r1, [pc, #40]	@ (800ba68 <siprintf+0x40>)
 800ba40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba44:	9105      	str	r1, [sp, #20]
 800ba46:	2400      	movs	r4, #0
 800ba48:	a902      	add	r1, sp, #8
 800ba4a:	6800      	ldr	r0, [r0, #0]
 800ba4c:	9301      	str	r3, [sp, #4]
 800ba4e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ba50:	f001 fc0c 	bl	800d26c <_svfiprintf_r>
 800ba54:	9b02      	ldr	r3, [sp, #8]
 800ba56:	701c      	strb	r4, [r3, #0]
 800ba58:	b01d      	add	sp, #116	@ 0x74
 800ba5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba5e:	b003      	add	sp, #12
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	2000001c 	.word	0x2000001c
 800ba68:	ffff0208 	.word	0xffff0208

0800ba6c <__sread>:
 800ba6c:	b510      	push	{r4, lr}
 800ba6e:	460c      	mov	r4, r1
 800ba70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba74:	f000 f86c 	bl	800bb50 <_read_r>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	bfab      	itete	ge
 800ba7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ba7e:	89a3      	ldrhlt	r3, [r4, #12]
 800ba80:	181b      	addge	r3, r3, r0
 800ba82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ba86:	bfac      	ite	ge
 800ba88:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ba8a:	81a3      	strhlt	r3, [r4, #12]
 800ba8c:	bd10      	pop	{r4, pc}

0800ba8e <__swrite>:
 800ba8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba92:	461f      	mov	r7, r3
 800ba94:	898b      	ldrh	r3, [r1, #12]
 800ba96:	05db      	lsls	r3, r3, #23
 800ba98:	4605      	mov	r5, r0
 800ba9a:	460c      	mov	r4, r1
 800ba9c:	4616      	mov	r6, r2
 800ba9e:	d505      	bpl.n	800baac <__swrite+0x1e>
 800baa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baa4:	2302      	movs	r3, #2
 800baa6:	2200      	movs	r2, #0
 800baa8:	f000 f840 	bl	800bb2c <_lseek_r>
 800baac:	89a3      	ldrh	r3, [r4, #12]
 800baae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bab2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bab6:	81a3      	strh	r3, [r4, #12]
 800bab8:	4632      	mov	r2, r6
 800baba:	463b      	mov	r3, r7
 800babc:	4628      	mov	r0, r5
 800babe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bac2:	f000 b857 	b.w	800bb74 <_write_r>

0800bac6 <__sseek>:
 800bac6:	b510      	push	{r4, lr}
 800bac8:	460c      	mov	r4, r1
 800baca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bace:	f000 f82d 	bl	800bb2c <_lseek_r>
 800bad2:	1c43      	adds	r3, r0, #1
 800bad4:	89a3      	ldrh	r3, [r4, #12]
 800bad6:	bf15      	itete	ne
 800bad8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bada:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bade:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bae2:	81a3      	strheq	r3, [r4, #12]
 800bae4:	bf18      	it	ne
 800bae6:	81a3      	strhne	r3, [r4, #12]
 800bae8:	bd10      	pop	{r4, pc}

0800baea <__sclose>:
 800baea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baee:	f000 b80d 	b.w	800bb0c <_close_r>

0800baf2 <memset>:
 800baf2:	4402      	add	r2, r0
 800baf4:	4603      	mov	r3, r0
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d100      	bne.n	800bafc <memset+0xa>
 800bafa:	4770      	bx	lr
 800bafc:	f803 1b01 	strb.w	r1, [r3], #1
 800bb00:	e7f9      	b.n	800baf6 <memset+0x4>
	...

0800bb04 <_localeconv_r>:
 800bb04:	4800      	ldr	r0, [pc, #0]	@ (800bb08 <_localeconv_r+0x4>)
 800bb06:	4770      	bx	lr
 800bb08:	2000015c 	.word	0x2000015c

0800bb0c <_close_r>:
 800bb0c:	b538      	push	{r3, r4, r5, lr}
 800bb0e:	4d06      	ldr	r5, [pc, #24]	@ (800bb28 <_close_r+0x1c>)
 800bb10:	2300      	movs	r3, #0
 800bb12:	4604      	mov	r4, r0
 800bb14:	4608      	mov	r0, r1
 800bb16:	602b      	str	r3, [r5, #0]
 800bb18:	f7f6 fc28 	bl	800236c <_close>
 800bb1c:	1c43      	adds	r3, r0, #1
 800bb1e:	d102      	bne.n	800bb26 <_close_r+0x1a>
 800bb20:	682b      	ldr	r3, [r5, #0]
 800bb22:	b103      	cbz	r3, 800bb26 <_close_r+0x1a>
 800bb24:	6023      	str	r3, [r4, #0]
 800bb26:	bd38      	pop	{r3, r4, r5, pc}
 800bb28:	20004f94 	.word	0x20004f94

0800bb2c <_lseek_r>:
 800bb2c:	b538      	push	{r3, r4, r5, lr}
 800bb2e:	4d07      	ldr	r5, [pc, #28]	@ (800bb4c <_lseek_r+0x20>)
 800bb30:	4604      	mov	r4, r0
 800bb32:	4608      	mov	r0, r1
 800bb34:	4611      	mov	r1, r2
 800bb36:	2200      	movs	r2, #0
 800bb38:	602a      	str	r2, [r5, #0]
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	f7f6 fc3d 	bl	80023ba <_lseek>
 800bb40:	1c43      	adds	r3, r0, #1
 800bb42:	d102      	bne.n	800bb4a <_lseek_r+0x1e>
 800bb44:	682b      	ldr	r3, [r5, #0]
 800bb46:	b103      	cbz	r3, 800bb4a <_lseek_r+0x1e>
 800bb48:	6023      	str	r3, [r4, #0]
 800bb4a:	bd38      	pop	{r3, r4, r5, pc}
 800bb4c:	20004f94 	.word	0x20004f94

0800bb50 <_read_r>:
 800bb50:	b538      	push	{r3, r4, r5, lr}
 800bb52:	4d07      	ldr	r5, [pc, #28]	@ (800bb70 <_read_r+0x20>)
 800bb54:	4604      	mov	r4, r0
 800bb56:	4608      	mov	r0, r1
 800bb58:	4611      	mov	r1, r2
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	602a      	str	r2, [r5, #0]
 800bb5e:	461a      	mov	r2, r3
 800bb60:	f7f6 fbcb 	bl	80022fa <_read>
 800bb64:	1c43      	adds	r3, r0, #1
 800bb66:	d102      	bne.n	800bb6e <_read_r+0x1e>
 800bb68:	682b      	ldr	r3, [r5, #0]
 800bb6a:	b103      	cbz	r3, 800bb6e <_read_r+0x1e>
 800bb6c:	6023      	str	r3, [r4, #0]
 800bb6e:	bd38      	pop	{r3, r4, r5, pc}
 800bb70:	20004f94 	.word	0x20004f94

0800bb74 <_write_r>:
 800bb74:	b538      	push	{r3, r4, r5, lr}
 800bb76:	4d07      	ldr	r5, [pc, #28]	@ (800bb94 <_write_r+0x20>)
 800bb78:	4604      	mov	r4, r0
 800bb7a:	4608      	mov	r0, r1
 800bb7c:	4611      	mov	r1, r2
 800bb7e:	2200      	movs	r2, #0
 800bb80:	602a      	str	r2, [r5, #0]
 800bb82:	461a      	mov	r2, r3
 800bb84:	f7f6 fbd6 	bl	8002334 <_write>
 800bb88:	1c43      	adds	r3, r0, #1
 800bb8a:	d102      	bne.n	800bb92 <_write_r+0x1e>
 800bb8c:	682b      	ldr	r3, [r5, #0]
 800bb8e:	b103      	cbz	r3, 800bb92 <_write_r+0x1e>
 800bb90:	6023      	str	r3, [r4, #0]
 800bb92:	bd38      	pop	{r3, r4, r5, pc}
 800bb94:	20004f94 	.word	0x20004f94

0800bb98 <__errno>:
 800bb98:	4b01      	ldr	r3, [pc, #4]	@ (800bba0 <__errno+0x8>)
 800bb9a:	6818      	ldr	r0, [r3, #0]
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	2000001c 	.word	0x2000001c

0800bba4 <__libc_init_array>:
 800bba4:	b570      	push	{r4, r5, r6, lr}
 800bba6:	4d0d      	ldr	r5, [pc, #52]	@ (800bbdc <__libc_init_array+0x38>)
 800bba8:	4c0d      	ldr	r4, [pc, #52]	@ (800bbe0 <__libc_init_array+0x3c>)
 800bbaa:	1b64      	subs	r4, r4, r5
 800bbac:	10a4      	asrs	r4, r4, #2
 800bbae:	2600      	movs	r6, #0
 800bbb0:	42a6      	cmp	r6, r4
 800bbb2:	d109      	bne.n	800bbc8 <__libc_init_array+0x24>
 800bbb4:	4d0b      	ldr	r5, [pc, #44]	@ (800bbe4 <__libc_init_array+0x40>)
 800bbb6:	4c0c      	ldr	r4, [pc, #48]	@ (800bbe8 <__libc_init_array+0x44>)
 800bbb8:	f002 fbd6 	bl	800e368 <_init>
 800bbbc:	1b64      	subs	r4, r4, r5
 800bbbe:	10a4      	asrs	r4, r4, #2
 800bbc0:	2600      	movs	r6, #0
 800bbc2:	42a6      	cmp	r6, r4
 800bbc4:	d105      	bne.n	800bbd2 <__libc_init_array+0x2e>
 800bbc6:	bd70      	pop	{r4, r5, r6, pc}
 800bbc8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbcc:	4798      	blx	r3
 800bbce:	3601      	adds	r6, #1
 800bbd0:	e7ee      	b.n	800bbb0 <__libc_init_array+0xc>
 800bbd2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbd6:	4798      	blx	r3
 800bbd8:	3601      	adds	r6, #1
 800bbda:	e7f2      	b.n	800bbc2 <__libc_init_array+0x1e>
 800bbdc:	0800e888 	.word	0x0800e888
 800bbe0:	0800e888 	.word	0x0800e888
 800bbe4:	0800e888 	.word	0x0800e888
 800bbe8:	0800e88c 	.word	0x0800e88c

0800bbec <__retarget_lock_init_recursive>:
 800bbec:	4770      	bx	lr

0800bbee <__retarget_lock_acquire_recursive>:
 800bbee:	4770      	bx	lr

0800bbf0 <__retarget_lock_release_recursive>:
 800bbf0:	4770      	bx	lr

0800bbf2 <memcpy>:
 800bbf2:	440a      	add	r2, r1
 800bbf4:	4291      	cmp	r1, r2
 800bbf6:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbfa:	d100      	bne.n	800bbfe <memcpy+0xc>
 800bbfc:	4770      	bx	lr
 800bbfe:	b510      	push	{r4, lr}
 800bc00:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc04:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc08:	4291      	cmp	r1, r2
 800bc0a:	d1f9      	bne.n	800bc00 <memcpy+0xe>
 800bc0c:	bd10      	pop	{r4, pc}

0800bc0e <quorem>:
 800bc0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc12:	6903      	ldr	r3, [r0, #16]
 800bc14:	690c      	ldr	r4, [r1, #16]
 800bc16:	42a3      	cmp	r3, r4
 800bc18:	4607      	mov	r7, r0
 800bc1a:	db7e      	blt.n	800bd1a <quorem+0x10c>
 800bc1c:	3c01      	subs	r4, #1
 800bc1e:	f101 0814 	add.w	r8, r1, #20
 800bc22:	00a3      	lsls	r3, r4, #2
 800bc24:	f100 0514 	add.w	r5, r0, #20
 800bc28:	9300      	str	r3, [sp, #0]
 800bc2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc2e:	9301      	str	r3, [sp, #4]
 800bc30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc40:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc44:	d32e      	bcc.n	800bca4 <quorem+0x96>
 800bc46:	f04f 0a00 	mov.w	sl, #0
 800bc4a:	46c4      	mov	ip, r8
 800bc4c:	46ae      	mov	lr, r5
 800bc4e:	46d3      	mov	fp, sl
 800bc50:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bc54:	b298      	uxth	r0, r3
 800bc56:	fb06 a000 	mla	r0, r6, r0, sl
 800bc5a:	0c02      	lsrs	r2, r0, #16
 800bc5c:	0c1b      	lsrs	r3, r3, #16
 800bc5e:	fb06 2303 	mla	r3, r6, r3, r2
 800bc62:	f8de 2000 	ldr.w	r2, [lr]
 800bc66:	b280      	uxth	r0, r0
 800bc68:	b292      	uxth	r2, r2
 800bc6a:	1a12      	subs	r2, r2, r0
 800bc6c:	445a      	add	r2, fp
 800bc6e:	f8de 0000 	ldr.w	r0, [lr]
 800bc72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bc7c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bc80:	b292      	uxth	r2, r2
 800bc82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bc86:	45e1      	cmp	r9, ip
 800bc88:	f84e 2b04 	str.w	r2, [lr], #4
 800bc8c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bc90:	d2de      	bcs.n	800bc50 <quorem+0x42>
 800bc92:	9b00      	ldr	r3, [sp, #0]
 800bc94:	58eb      	ldr	r3, [r5, r3]
 800bc96:	b92b      	cbnz	r3, 800bca4 <quorem+0x96>
 800bc98:	9b01      	ldr	r3, [sp, #4]
 800bc9a:	3b04      	subs	r3, #4
 800bc9c:	429d      	cmp	r5, r3
 800bc9e:	461a      	mov	r2, r3
 800bca0:	d32f      	bcc.n	800bd02 <quorem+0xf4>
 800bca2:	613c      	str	r4, [r7, #16]
 800bca4:	4638      	mov	r0, r7
 800bca6:	f001 f97d 	bl	800cfa4 <__mcmp>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	db25      	blt.n	800bcfa <quorem+0xec>
 800bcae:	4629      	mov	r1, r5
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	f858 2b04 	ldr.w	r2, [r8], #4
 800bcb6:	f8d1 c000 	ldr.w	ip, [r1]
 800bcba:	fa1f fe82 	uxth.w	lr, r2
 800bcbe:	fa1f f38c 	uxth.w	r3, ip
 800bcc2:	eba3 030e 	sub.w	r3, r3, lr
 800bcc6:	4403      	add	r3, r0
 800bcc8:	0c12      	lsrs	r2, r2, #16
 800bcca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bcce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcd8:	45c1      	cmp	r9, r8
 800bcda:	f841 3b04 	str.w	r3, [r1], #4
 800bcde:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bce2:	d2e6      	bcs.n	800bcb2 <quorem+0xa4>
 800bce4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bce8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcec:	b922      	cbnz	r2, 800bcf8 <quorem+0xea>
 800bcee:	3b04      	subs	r3, #4
 800bcf0:	429d      	cmp	r5, r3
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	d30b      	bcc.n	800bd0e <quorem+0x100>
 800bcf6:	613c      	str	r4, [r7, #16]
 800bcf8:	3601      	adds	r6, #1
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	b003      	add	sp, #12
 800bcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd02:	6812      	ldr	r2, [r2, #0]
 800bd04:	3b04      	subs	r3, #4
 800bd06:	2a00      	cmp	r2, #0
 800bd08:	d1cb      	bne.n	800bca2 <quorem+0x94>
 800bd0a:	3c01      	subs	r4, #1
 800bd0c:	e7c6      	b.n	800bc9c <quorem+0x8e>
 800bd0e:	6812      	ldr	r2, [r2, #0]
 800bd10:	3b04      	subs	r3, #4
 800bd12:	2a00      	cmp	r2, #0
 800bd14:	d1ef      	bne.n	800bcf6 <quorem+0xe8>
 800bd16:	3c01      	subs	r4, #1
 800bd18:	e7ea      	b.n	800bcf0 <quorem+0xe2>
 800bd1a:	2000      	movs	r0, #0
 800bd1c:	e7ee      	b.n	800bcfc <quorem+0xee>
	...

0800bd20 <_dtoa_r>:
 800bd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd24:	69c7      	ldr	r7, [r0, #28]
 800bd26:	b097      	sub	sp, #92	@ 0x5c
 800bd28:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bd2c:	ec55 4b10 	vmov	r4, r5, d0
 800bd30:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bd32:	9107      	str	r1, [sp, #28]
 800bd34:	4681      	mov	r9, r0
 800bd36:	920c      	str	r2, [sp, #48]	@ 0x30
 800bd38:	9311      	str	r3, [sp, #68]	@ 0x44
 800bd3a:	b97f      	cbnz	r7, 800bd5c <_dtoa_r+0x3c>
 800bd3c:	2010      	movs	r0, #16
 800bd3e:	f000 fe09 	bl	800c954 <malloc>
 800bd42:	4602      	mov	r2, r0
 800bd44:	f8c9 001c 	str.w	r0, [r9, #28]
 800bd48:	b920      	cbnz	r0, 800bd54 <_dtoa_r+0x34>
 800bd4a:	4ba9      	ldr	r3, [pc, #676]	@ (800bff0 <_dtoa_r+0x2d0>)
 800bd4c:	21ef      	movs	r1, #239	@ 0xef
 800bd4e:	48a9      	ldr	r0, [pc, #676]	@ (800bff4 <_dtoa_r+0x2d4>)
 800bd50:	f001 fc5e 	bl	800d610 <__assert_func>
 800bd54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bd58:	6007      	str	r7, [r0, #0]
 800bd5a:	60c7      	str	r7, [r0, #12]
 800bd5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bd60:	6819      	ldr	r1, [r3, #0]
 800bd62:	b159      	cbz	r1, 800bd7c <_dtoa_r+0x5c>
 800bd64:	685a      	ldr	r2, [r3, #4]
 800bd66:	604a      	str	r2, [r1, #4]
 800bd68:	2301      	movs	r3, #1
 800bd6a:	4093      	lsls	r3, r2
 800bd6c:	608b      	str	r3, [r1, #8]
 800bd6e:	4648      	mov	r0, r9
 800bd70:	f000 fee6 	bl	800cb40 <_Bfree>
 800bd74:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	601a      	str	r2, [r3, #0]
 800bd7c:	1e2b      	subs	r3, r5, #0
 800bd7e:	bfb9      	ittee	lt
 800bd80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bd84:	9305      	strlt	r3, [sp, #20]
 800bd86:	2300      	movge	r3, #0
 800bd88:	6033      	strge	r3, [r6, #0]
 800bd8a:	9f05      	ldr	r7, [sp, #20]
 800bd8c:	4b9a      	ldr	r3, [pc, #616]	@ (800bff8 <_dtoa_r+0x2d8>)
 800bd8e:	bfbc      	itt	lt
 800bd90:	2201      	movlt	r2, #1
 800bd92:	6032      	strlt	r2, [r6, #0]
 800bd94:	43bb      	bics	r3, r7
 800bd96:	d112      	bne.n	800bdbe <_dtoa_r+0x9e>
 800bd98:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bd9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bd9e:	6013      	str	r3, [r2, #0]
 800bda0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bda4:	4323      	orrs	r3, r4
 800bda6:	f000 855a 	beq.w	800c85e <_dtoa_r+0xb3e>
 800bdaa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bdac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c00c <_dtoa_r+0x2ec>
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f000 855c 	beq.w	800c86e <_dtoa_r+0xb4e>
 800bdb6:	f10a 0303 	add.w	r3, sl, #3
 800bdba:	f000 bd56 	b.w	800c86a <_dtoa_r+0xb4a>
 800bdbe:	ed9d 7b04 	vldr	d7, [sp, #16]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	ec51 0b17 	vmov	r0, r1, d7
 800bdc8:	2300      	movs	r3, #0
 800bdca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800bdce:	f7f4 fe8b 	bl	8000ae8 <__aeabi_dcmpeq>
 800bdd2:	4680      	mov	r8, r0
 800bdd4:	b158      	cbz	r0, 800bdee <_dtoa_r+0xce>
 800bdd6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bdd8:	2301      	movs	r3, #1
 800bdda:	6013      	str	r3, [r2, #0]
 800bddc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bdde:	b113      	cbz	r3, 800bde6 <_dtoa_r+0xc6>
 800bde0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800bde2:	4b86      	ldr	r3, [pc, #536]	@ (800bffc <_dtoa_r+0x2dc>)
 800bde4:	6013      	str	r3, [r2, #0]
 800bde6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c010 <_dtoa_r+0x2f0>
 800bdea:	f000 bd40 	b.w	800c86e <_dtoa_r+0xb4e>
 800bdee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800bdf2:	aa14      	add	r2, sp, #80	@ 0x50
 800bdf4:	a915      	add	r1, sp, #84	@ 0x54
 800bdf6:	4648      	mov	r0, r9
 800bdf8:	f001 f984 	bl	800d104 <__d2b>
 800bdfc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800be00:	9002      	str	r0, [sp, #8]
 800be02:	2e00      	cmp	r6, #0
 800be04:	d078      	beq.n	800bef8 <_dtoa_r+0x1d8>
 800be06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be08:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800be0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800be14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800be18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800be1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800be20:	4619      	mov	r1, r3
 800be22:	2200      	movs	r2, #0
 800be24:	4b76      	ldr	r3, [pc, #472]	@ (800c000 <_dtoa_r+0x2e0>)
 800be26:	f7f4 fa3f 	bl	80002a8 <__aeabi_dsub>
 800be2a:	a36b      	add	r3, pc, #428	@ (adr r3, 800bfd8 <_dtoa_r+0x2b8>)
 800be2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be30:	f7f4 fbf2 	bl	8000618 <__aeabi_dmul>
 800be34:	a36a      	add	r3, pc, #424	@ (adr r3, 800bfe0 <_dtoa_r+0x2c0>)
 800be36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3a:	f7f4 fa37 	bl	80002ac <__adddf3>
 800be3e:	4604      	mov	r4, r0
 800be40:	4630      	mov	r0, r6
 800be42:	460d      	mov	r5, r1
 800be44:	f7f4 fb7e 	bl	8000544 <__aeabi_i2d>
 800be48:	a367      	add	r3, pc, #412	@ (adr r3, 800bfe8 <_dtoa_r+0x2c8>)
 800be4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4e:	f7f4 fbe3 	bl	8000618 <__aeabi_dmul>
 800be52:	4602      	mov	r2, r0
 800be54:	460b      	mov	r3, r1
 800be56:	4620      	mov	r0, r4
 800be58:	4629      	mov	r1, r5
 800be5a:	f7f4 fa27 	bl	80002ac <__adddf3>
 800be5e:	4604      	mov	r4, r0
 800be60:	460d      	mov	r5, r1
 800be62:	f7f4 fe89 	bl	8000b78 <__aeabi_d2iz>
 800be66:	2200      	movs	r2, #0
 800be68:	4607      	mov	r7, r0
 800be6a:	2300      	movs	r3, #0
 800be6c:	4620      	mov	r0, r4
 800be6e:	4629      	mov	r1, r5
 800be70:	f7f4 fe44 	bl	8000afc <__aeabi_dcmplt>
 800be74:	b140      	cbz	r0, 800be88 <_dtoa_r+0x168>
 800be76:	4638      	mov	r0, r7
 800be78:	f7f4 fb64 	bl	8000544 <__aeabi_i2d>
 800be7c:	4622      	mov	r2, r4
 800be7e:	462b      	mov	r3, r5
 800be80:	f7f4 fe32 	bl	8000ae8 <__aeabi_dcmpeq>
 800be84:	b900      	cbnz	r0, 800be88 <_dtoa_r+0x168>
 800be86:	3f01      	subs	r7, #1
 800be88:	2f16      	cmp	r7, #22
 800be8a:	d852      	bhi.n	800bf32 <_dtoa_r+0x212>
 800be8c:	4b5d      	ldr	r3, [pc, #372]	@ (800c004 <_dtoa_r+0x2e4>)
 800be8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800be92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800be9a:	f7f4 fe2f 	bl	8000afc <__aeabi_dcmplt>
 800be9e:	2800      	cmp	r0, #0
 800bea0:	d049      	beq.n	800bf36 <_dtoa_r+0x216>
 800bea2:	3f01      	subs	r7, #1
 800bea4:	2300      	movs	r3, #0
 800bea6:	9310      	str	r3, [sp, #64]	@ 0x40
 800bea8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800beaa:	1b9b      	subs	r3, r3, r6
 800beac:	1e5a      	subs	r2, r3, #1
 800beae:	bf45      	ittet	mi
 800beb0:	f1c3 0301 	rsbmi	r3, r3, #1
 800beb4:	9300      	strmi	r3, [sp, #0]
 800beb6:	2300      	movpl	r3, #0
 800beb8:	2300      	movmi	r3, #0
 800beba:	9206      	str	r2, [sp, #24]
 800bebc:	bf54      	ite	pl
 800bebe:	9300      	strpl	r3, [sp, #0]
 800bec0:	9306      	strmi	r3, [sp, #24]
 800bec2:	2f00      	cmp	r7, #0
 800bec4:	db39      	blt.n	800bf3a <_dtoa_r+0x21a>
 800bec6:	9b06      	ldr	r3, [sp, #24]
 800bec8:	970d      	str	r7, [sp, #52]	@ 0x34
 800beca:	443b      	add	r3, r7
 800becc:	9306      	str	r3, [sp, #24]
 800bece:	2300      	movs	r3, #0
 800bed0:	9308      	str	r3, [sp, #32]
 800bed2:	9b07      	ldr	r3, [sp, #28]
 800bed4:	2b09      	cmp	r3, #9
 800bed6:	d863      	bhi.n	800bfa0 <_dtoa_r+0x280>
 800bed8:	2b05      	cmp	r3, #5
 800beda:	bfc4      	itt	gt
 800bedc:	3b04      	subgt	r3, #4
 800bede:	9307      	strgt	r3, [sp, #28]
 800bee0:	9b07      	ldr	r3, [sp, #28]
 800bee2:	f1a3 0302 	sub.w	r3, r3, #2
 800bee6:	bfcc      	ite	gt
 800bee8:	2400      	movgt	r4, #0
 800beea:	2401      	movle	r4, #1
 800beec:	2b03      	cmp	r3, #3
 800beee:	d863      	bhi.n	800bfb8 <_dtoa_r+0x298>
 800bef0:	e8df f003 	tbb	[pc, r3]
 800bef4:	2b375452 	.word	0x2b375452
 800bef8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800befc:	441e      	add	r6, r3
 800befe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bf02:	2b20      	cmp	r3, #32
 800bf04:	bfc1      	itttt	gt
 800bf06:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bf0a:	409f      	lslgt	r7, r3
 800bf0c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bf10:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bf14:	bfd6      	itet	le
 800bf16:	f1c3 0320 	rsble	r3, r3, #32
 800bf1a:	ea47 0003 	orrgt.w	r0, r7, r3
 800bf1e:	fa04 f003 	lslle.w	r0, r4, r3
 800bf22:	f7f4 faff 	bl	8000524 <__aeabi_ui2d>
 800bf26:	2201      	movs	r2, #1
 800bf28:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bf2c:	3e01      	subs	r6, #1
 800bf2e:	9212      	str	r2, [sp, #72]	@ 0x48
 800bf30:	e776      	b.n	800be20 <_dtoa_r+0x100>
 800bf32:	2301      	movs	r3, #1
 800bf34:	e7b7      	b.n	800bea6 <_dtoa_r+0x186>
 800bf36:	9010      	str	r0, [sp, #64]	@ 0x40
 800bf38:	e7b6      	b.n	800bea8 <_dtoa_r+0x188>
 800bf3a:	9b00      	ldr	r3, [sp, #0]
 800bf3c:	1bdb      	subs	r3, r3, r7
 800bf3e:	9300      	str	r3, [sp, #0]
 800bf40:	427b      	negs	r3, r7
 800bf42:	9308      	str	r3, [sp, #32]
 800bf44:	2300      	movs	r3, #0
 800bf46:	930d      	str	r3, [sp, #52]	@ 0x34
 800bf48:	e7c3      	b.n	800bed2 <_dtoa_r+0x1b2>
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf50:	eb07 0b03 	add.w	fp, r7, r3
 800bf54:	f10b 0301 	add.w	r3, fp, #1
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	9303      	str	r3, [sp, #12]
 800bf5c:	bfb8      	it	lt
 800bf5e:	2301      	movlt	r3, #1
 800bf60:	e006      	b.n	800bf70 <_dtoa_r+0x250>
 800bf62:	2301      	movs	r3, #1
 800bf64:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	dd28      	ble.n	800bfbe <_dtoa_r+0x29e>
 800bf6c:	469b      	mov	fp, r3
 800bf6e:	9303      	str	r3, [sp, #12]
 800bf70:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800bf74:	2100      	movs	r1, #0
 800bf76:	2204      	movs	r2, #4
 800bf78:	f102 0514 	add.w	r5, r2, #20
 800bf7c:	429d      	cmp	r5, r3
 800bf7e:	d926      	bls.n	800bfce <_dtoa_r+0x2ae>
 800bf80:	6041      	str	r1, [r0, #4]
 800bf82:	4648      	mov	r0, r9
 800bf84:	f000 fd9c 	bl	800cac0 <_Balloc>
 800bf88:	4682      	mov	sl, r0
 800bf8a:	2800      	cmp	r0, #0
 800bf8c:	d142      	bne.n	800c014 <_dtoa_r+0x2f4>
 800bf8e:	4b1e      	ldr	r3, [pc, #120]	@ (800c008 <_dtoa_r+0x2e8>)
 800bf90:	4602      	mov	r2, r0
 800bf92:	f240 11af 	movw	r1, #431	@ 0x1af
 800bf96:	e6da      	b.n	800bd4e <_dtoa_r+0x2e>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	e7e3      	b.n	800bf64 <_dtoa_r+0x244>
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	e7d5      	b.n	800bf4c <_dtoa_r+0x22c>
 800bfa0:	2401      	movs	r4, #1
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	9307      	str	r3, [sp, #28]
 800bfa6:	9409      	str	r4, [sp, #36]	@ 0x24
 800bfa8:	f04f 3bff 	mov.w	fp, #4294967295
 800bfac:	2200      	movs	r2, #0
 800bfae:	f8cd b00c 	str.w	fp, [sp, #12]
 800bfb2:	2312      	movs	r3, #18
 800bfb4:	920c      	str	r2, [sp, #48]	@ 0x30
 800bfb6:	e7db      	b.n	800bf70 <_dtoa_r+0x250>
 800bfb8:	2301      	movs	r3, #1
 800bfba:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfbc:	e7f4      	b.n	800bfa8 <_dtoa_r+0x288>
 800bfbe:	f04f 0b01 	mov.w	fp, #1
 800bfc2:	f8cd b00c 	str.w	fp, [sp, #12]
 800bfc6:	465b      	mov	r3, fp
 800bfc8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800bfcc:	e7d0      	b.n	800bf70 <_dtoa_r+0x250>
 800bfce:	3101      	adds	r1, #1
 800bfd0:	0052      	lsls	r2, r2, #1
 800bfd2:	e7d1      	b.n	800bf78 <_dtoa_r+0x258>
 800bfd4:	f3af 8000 	nop.w
 800bfd8:	636f4361 	.word	0x636f4361
 800bfdc:	3fd287a7 	.word	0x3fd287a7
 800bfe0:	8b60c8b3 	.word	0x8b60c8b3
 800bfe4:	3fc68a28 	.word	0x3fc68a28
 800bfe8:	509f79fb 	.word	0x509f79fb
 800bfec:	3fd34413 	.word	0x3fd34413
 800bff0:	0800e4c5 	.word	0x0800e4c5
 800bff4:	0800e4dc 	.word	0x0800e4dc
 800bff8:	7ff00000 	.word	0x7ff00000
 800bffc:	0800e495 	.word	0x0800e495
 800c000:	3ff80000 	.word	0x3ff80000
 800c004:	0800e630 	.word	0x0800e630
 800c008:	0800e534 	.word	0x0800e534
 800c00c:	0800e4c1 	.word	0x0800e4c1
 800c010:	0800e494 	.word	0x0800e494
 800c014:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c018:	6018      	str	r0, [r3, #0]
 800c01a:	9b03      	ldr	r3, [sp, #12]
 800c01c:	2b0e      	cmp	r3, #14
 800c01e:	f200 80a1 	bhi.w	800c164 <_dtoa_r+0x444>
 800c022:	2c00      	cmp	r4, #0
 800c024:	f000 809e 	beq.w	800c164 <_dtoa_r+0x444>
 800c028:	2f00      	cmp	r7, #0
 800c02a:	dd33      	ble.n	800c094 <_dtoa_r+0x374>
 800c02c:	4b9c      	ldr	r3, [pc, #624]	@ (800c2a0 <_dtoa_r+0x580>)
 800c02e:	f007 020f 	and.w	r2, r7, #15
 800c032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c036:	ed93 7b00 	vldr	d7, [r3]
 800c03a:	05f8      	lsls	r0, r7, #23
 800c03c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c040:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c044:	d516      	bpl.n	800c074 <_dtoa_r+0x354>
 800c046:	4b97      	ldr	r3, [pc, #604]	@ (800c2a4 <_dtoa_r+0x584>)
 800c048:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c04c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c050:	f7f4 fc0c 	bl	800086c <__aeabi_ddiv>
 800c054:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c058:	f004 040f 	and.w	r4, r4, #15
 800c05c:	2603      	movs	r6, #3
 800c05e:	4d91      	ldr	r5, [pc, #580]	@ (800c2a4 <_dtoa_r+0x584>)
 800c060:	b954      	cbnz	r4, 800c078 <_dtoa_r+0x358>
 800c062:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c066:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c06a:	f7f4 fbff 	bl	800086c <__aeabi_ddiv>
 800c06e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c072:	e028      	b.n	800c0c6 <_dtoa_r+0x3a6>
 800c074:	2602      	movs	r6, #2
 800c076:	e7f2      	b.n	800c05e <_dtoa_r+0x33e>
 800c078:	07e1      	lsls	r1, r4, #31
 800c07a:	d508      	bpl.n	800c08e <_dtoa_r+0x36e>
 800c07c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c080:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c084:	f7f4 fac8 	bl	8000618 <__aeabi_dmul>
 800c088:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c08c:	3601      	adds	r6, #1
 800c08e:	1064      	asrs	r4, r4, #1
 800c090:	3508      	adds	r5, #8
 800c092:	e7e5      	b.n	800c060 <_dtoa_r+0x340>
 800c094:	f000 80af 	beq.w	800c1f6 <_dtoa_r+0x4d6>
 800c098:	427c      	negs	r4, r7
 800c09a:	4b81      	ldr	r3, [pc, #516]	@ (800c2a0 <_dtoa_r+0x580>)
 800c09c:	4d81      	ldr	r5, [pc, #516]	@ (800c2a4 <_dtoa_r+0x584>)
 800c09e:	f004 020f 	and.w	r2, r4, #15
 800c0a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c0ae:	f7f4 fab3 	bl	8000618 <__aeabi_dmul>
 800c0b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0b6:	1124      	asrs	r4, r4, #4
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	2602      	movs	r6, #2
 800c0bc:	2c00      	cmp	r4, #0
 800c0be:	f040 808f 	bne.w	800c1e0 <_dtoa_r+0x4c0>
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1d3      	bne.n	800c06e <_dtoa_r+0x34e>
 800c0c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c0c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	f000 8094 	beq.w	800c1fa <_dtoa_r+0x4da>
 800c0d2:	4b75      	ldr	r3, [pc, #468]	@ (800c2a8 <_dtoa_r+0x588>)
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	4620      	mov	r0, r4
 800c0d8:	4629      	mov	r1, r5
 800c0da:	f7f4 fd0f 	bl	8000afc <__aeabi_dcmplt>
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	f000 808b 	beq.w	800c1fa <_dtoa_r+0x4da>
 800c0e4:	9b03      	ldr	r3, [sp, #12]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f000 8087 	beq.w	800c1fa <_dtoa_r+0x4da>
 800c0ec:	f1bb 0f00 	cmp.w	fp, #0
 800c0f0:	dd34      	ble.n	800c15c <_dtoa_r+0x43c>
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	4b6d      	ldr	r3, [pc, #436]	@ (800c2ac <_dtoa_r+0x58c>)
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	4629      	mov	r1, r5
 800c0fa:	f7f4 fa8d 	bl	8000618 <__aeabi_dmul>
 800c0fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c102:	f107 38ff 	add.w	r8, r7, #4294967295
 800c106:	3601      	adds	r6, #1
 800c108:	465c      	mov	r4, fp
 800c10a:	4630      	mov	r0, r6
 800c10c:	f7f4 fa1a 	bl	8000544 <__aeabi_i2d>
 800c110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c114:	f7f4 fa80 	bl	8000618 <__aeabi_dmul>
 800c118:	4b65      	ldr	r3, [pc, #404]	@ (800c2b0 <_dtoa_r+0x590>)
 800c11a:	2200      	movs	r2, #0
 800c11c:	f7f4 f8c6 	bl	80002ac <__adddf3>
 800c120:	4605      	mov	r5, r0
 800c122:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c126:	2c00      	cmp	r4, #0
 800c128:	d16a      	bne.n	800c200 <_dtoa_r+0x4e0>
 800c12a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c12e:	4b61      	ldr	r3, [pc, #388]	@ (800c2b4 <_dtoa_r+0x594>)
 800c130:	2200      	movs	r2, #0
 800c132:	f7f4 f8b9 	bl	80002a8 <__aeabi_dsub>
 800c136:	4602      	mov	r2, r0
 800c138:	460b      	mov	r3, r1
 800c13a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c13e:	462a      	mov	r2, r5
 800c140:	4633      	mov	r3, r6
 800c142:	f7f4 fcf9 	bl	8000b38 <__aeabi_dcmpgt>
 800c146:	2800      	cmp	r0, #0
 800c148:	f040 8298 	bne.w	800c67c <_dtoa_r+0x95c>
 800c14c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c150:	462a      	mov	r2, r5
 800c152:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c156:	f7f4 fcd1 	bl	8000afc <__aeabi_dcmplt>
 800c15a:	bb38      	cbnz	r0, 800c1ac <_dtoa_r+0x48c>
 800c15c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c160:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c164:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c166:	2b00      	cmp	r3, #0
 800c168:	f2c0 8157 	blt.w	800c41a <_dtoa_r+0x6fa>
 800c16c:	2f0e      	cmp	r7, #14
 800c16e:	f300 8154 	bgt.w	800c41a <_dtoa_r+0x6fa>
 800c172:	4b4b      	ldr	r3, [pc, #300]	@ (800c2a0 <_dtoa_r+0x580>)
 800c174:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c178:	ed93 7b00 	vldr	d7, [r3]
 800c17c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c17e:	2b00      	cmp	r3, #0
 800c180:	ed8d 7b00 	vstr	d7, [sp]
 800c184:	f280 80e5 	bge.w	800c352 <_dtoa_r+0x632>
 800c188:	9b03      	ldr	r3, [sp, #12]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	f300 80e1 	bgt.w	800c352 <_dtoa_r+0x632>
 800c190:	d10c      	bne.n	800c1ac <_dtoa_r+0x48c>
 800c192:	4b48      	ldr	r3, [pc, #288]	@ (800c2b4 <_dtoa_r+0x594>)
 800c194:	2200      	movs	r2, #0
 800c196:	ec51 0b17 	vmov	r0, r1, d7
 800c19a:	f7f4 fa3d 	bl	8000618 <__aeabi_dmul>
 800c19e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1a2:	f7f4 fcbf 	bl	8000b24 <__aeabi_dcmpge>
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	f000 8266 	beq.w	800c678 <_dtoa_r+0x958>
 800c1ac:	2400      	movs	r4, #0
 800c1ae:	4625      	mov	r5, r4
 800c1b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c1b2:	4656      	mov	r6, sl
 800c1b4:	ea6f 0803 	mvn.w	r8, r3
 800c1b8:	2700      	movs	r7, #0
 800c1ba:	4621      	mov	r1, r4
 800c1bc:	4648      	mov	r0, r9
 800c1be:	f000 fcbf 	bl	800cb40 <_Bfree>
 800c1c2:	2d00      	cmp	r5, #0
 800c1c4:	f000 80bd 	beq.w	800c342 <_dtoa_r+0x622>
 800c1c8:	b12f      	cbz	r7, 800c1d6 <_dtoa_r+0x4b6>
 800c1ca:	42af      	cmp	r7, r5
 800c1cc:	d003      	beq.n	800c1d6 <_dtoa_r+0x4b6>
 800c1ce:	4639      	mov	r1, r7
 800c1d0:	4648      	mov	r0, r9
 800c1d2:	f000 fcb5 	bl	800cb40 <_Bfree>
 800c1d6:	4629      	mov	r1, r5
 800c1d8:	4648      	mov	r0, r9
 800c1da:	f000 fcb1 	bl	800cb40 <_Bfree>
 800c1de:	e0b0      	b.n	800c342 <_dtoa_r+0x622>
 800c1e0:	07e2      	lsls	r2, r4, #31
 800c1e2:	d505      	bpl.n	800c1f0 <_dtoa_r+0x4d0>
 800c1e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c1e8:	f7f4 fa16 	bl	8000618 <__aeabi_dmul>
 800c1ec:	3601      	adds	r6, #1
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	1064      	asrs	r4, r4, #1
 800c1f2:	3508      	adds	r5, #8
 800c1f4:	e762      	b.n	800c0bc <_dtoa_r+0x39c>
 800c1f6:	2602      	movs	r6, #2
 800c1f8:	e765      	b.n	800c0c6 <_dtoa_r+0x3a6>
 800c1fa:	9c03      	ldr	r4, [sp, #12]
 800c1fc:	46b8      	mov	r8, r7
 800c1fe:	e784      	b.n	800c10a <_dtoa_r+0x3ea>
 800c200:	4b27      	ldr	r3, [pc, #156]	@ (800c2a0 <_dtoa_r+0x580>)
 800c202:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c204:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c208:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c20c:	4454      	add	r4, sl
 800c20e:	2900      	cmp	r1, #0
 800c210:	d054      	beq.n	800c2bc <_dtoa_r+0x59c>
 800c212:	4929      	ldr	r1, [pc, #164]	@ (800c2b8 <_dtoa_r+0x598>)
 800c214:	2000      	movs	r0, #0
 800c216:	f7f4 fb29 	bl	800086c <__aeabi_ddiv>
 800c21a:	4633      	mov	r3, r6
 800c21c:	462a      	mov	r2, r5
 800c21e:	f7f4 f843 	bl	80002a8 <__aeabi_dsub>
 800c222:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c226:	4656      	mov	r6, sl
 800c228:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c22c:	f7f4 fca4 	bl	8000b78 <__aeabi_d2iz>
 800c230:	4605      	mov	r5, r0
 800c232:	f7f4 f987 	bl	8000544 <__aeabi_i2d>
 800c236:	4602      	mov	r2, r0
 800c238:	460b      	mov	r3, r1
 800c23a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c23e:	f7f4 f833 	bl	80002a8 <__aeabi_dsub>
 800c242:	3530      	adds	r5, #48	@ 0x30
 800c244:	4602      	mov	r2, r0
 800c246:	460b      	mov	r3, r1
 800c248:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c24c:	f806 5b01 	strb.w	r5, [r6], #1
 800c250:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c254:	f7f4 fc52 	bl	8000afc <__aeabi_dcmplt>
 800c258:	2800      	cmp	r0, #0
 800c25a:	d172      	bne.n	800c342 <_dtoa_r+0x622>
 800c25c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c260:	4911      	ldr	r1, [pc, #68]	@ (800c2a8 <_dtoa_r+0x588>)
 800c262:	2000      	movs	r0, #0
 800c264:	f7f4 f820 	bl	80002a8 <__aeabi_dsub>
 800c268:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c26c:	f7f4 fc46 	bl	8000afc <__aeabi_dcmplt>
 800c270:	2800      	cmp	r0, #0
 800c272:	f040 80b4 	bne.w	800c3de <_dtoa_r+0x6be>
 800c276:	42a6      	cmp	r6, r4
 800c278:	f43f af70 	beq.w	800c15c <_dtoa_r+0x43c>
 800c27c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c280:	4b0a      	ldr	r3, [pc, #40]	@ (800c2ac <_dtoa_r+0x58c>)
 800c282:	2200      	movs	r2, #0
 800c284:	f7f4 f9c8 	bl	8000618 <__aeabi_dmul>
 800c288:	4b08      	ldr	r3, [pc, #32]	@ (800c2ac <_dtoa_r+0x58c>)
 800c28a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c28e:	2200      	movs	r2, #0
 800c290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c294:	f7f4 f9c0 	bl	8000618 <__aeabi_dmul>
 800c298:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c29c:	e7c4      	b.n	800c228 <_dtoa_r+0x508>
 800c29e:	bf00      	nop
 800c2a0:	0800e630 	.word	0x0800e630
 800c2a4:	0800e608 	.word	0x0800e608
 800c2a8:	3ff00000 	.word	0x3ff00000
 800c2ac:	40240000 	.word	0x40240000
 800c2b0:	401c0000 	.word	0x401c0000
 800c2b4:	40140000 	.word	0x40140000
 800c2b8:	3fe00000 	.word	0x3fe00000
 800c2bc:	4631      	mov	r1, r6
 800c2be:	4628      	mov	r0, r5
 800c2c0:	f7f4 f9aa 	bl	8000618 <__aeabi_dmul>
 800c2c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c2c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c2ca:	4656      	mov	r6, sl
 800c2cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2d0:	f7f4 fc52 	bl	8000b78 <__aeabi_d2iz>
 800c2d4:	4605      	mov	r5, r0
 800c2d6:	f7f4 f935 	bl	8000544 <__aeabi_i2d>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	460b      	mov	r3, r1
 800c2de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2e2:	f7f3 ffe1 	bl	80002a8 <__aeabi_dsub>
 800c2e6:	3530      	adds	r5, #48	@ 0x30
 800c2e8:	f806 5b01 	strb.w	r5, [r6], #1
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	42a6      	cmp	r6, r4
 800c2f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c2f6:	f04f 0200 	mov.w	r2, #0
 800c2fa:	d124      	bne.n	800c346 <_dtoa_r+0x626>
 800c2fc:	4baf      	ldr	r3, [pc, #700]	@ (800c5bc <_dtoa_r+0x89c>)
 800c2fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c302:	f7f3 ffd3 	bl	80002ac <__adddf3>
 800c306:	4602      	mov	r2, r0
 800c308:	460b      	mov	r3, r1
 800c30a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c30e:	f7f4 fc13 	bl	8000b38 <__aeabi_dcmpgt>
 800c312:	2800      	cmp	r0, #0
 800c314:	d163      	bne.n	800c3de <_dtoa_r+0x6be>
 800c316:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c31a:	49a8      	ldr	r1, [pc, #672]	@ (800c5bc <_dtoa_r+0x89c>)
 800c31c:	2000      	movs	r0, #0
 800c31e:	f7f3 ffc3 	bl	80002a8 <__aeabi_dsub>
 800c322:	4602      	mov	r2, r0
 800c324:	460b      	mov	r3, r1
 800c326:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c32a:	f7f4 fbe7 	bl	8000afc <__aeabi_dcmplt>
 800c32e:	2800      	cmp	r0, #0
 800c330:	f43f af14 	beq.w	800c15c <_dtoa_r+0x43c>
 800c334:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c336:	1e73      	subs	r3, r6, #1
 800c338:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c33a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c33e:	2b30      	cmp	r3, #48	@ 0x30
 800c340:	d0f8      	beq.n	800c334 <_dtoa_r+0x614>
 800c342:	4647      	mov	r7, r8
 800c344:	e03b      	b.n	800c3be <_dtoa_r+0x69e>
 800c346:	4b9e      	ldr	r3, [pc, #632]	@ (800c5c0 <_dtoa_r+0x8a0>)
 800c348:	f7f4 f966 	bl	8000618 <__aeabi_dmul>
 800c34c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c350:	e7bc      	b.n	800c2cc <_dtoa_r+0x5ac>
 800c352:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c356:	4656      	mov	r6, sl
 800c358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c35c:	4620      	mov	r0, r4
 800c35e:	4629      	mov	r1, r5
 800c360:	f7f4 fa84 	bl	800086c <__aeabi_ddiv>
 800c364:	f7f4 fc08 	bl	8000b78 <__aeabi_d2iz>
 800c368:	4680      	mov	r8, r0
 800c36a:	f7f4 f8eb 	bl	8000544 <__aeabi_i2d>
 800c36e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c372:	f7f4 f951 	bl	8000618 <__aeabi_dmul>
 800c376:	4602      	mov	r2, r0
 800c378:	460b      	mov	r3, r1
 800c37a:	4620      	mov	r0, r4
 800c37c:	4629      	mov	r1, r5
 800c37e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c382:	f7f3 ff91 	bl	80002a8 <__aeabi_dsub>
 800c386:	f806 4b01 	strb.w	r4, [r6], #1
 800c38a:	9d03      	ldr	r5, [sp, #12]
 800c38c:	eba6 040a 	sub.w	r4, r6, sl
 800c390:	42a5      	cmp	r5, r4
 800c392:	4602      	mov	r2, r0
 800c394:	460b      	mov	r3, r1
 800c396:	d133      	bne.n	800c400 <_dtoa_r+0x6e0>
 800c398:	f7f3 ff88 	bl	80002ac <__adddf3>
 800c39c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	460d      	mov	r5, r1
 800c3a4:	f7f4 fbc8 	bl	8000b38 <__aeabi_dcmpgt>
 800c3a8:	b9c0      	cbnz	r0, 800c3dc <_dtoa_r+0x6bc>
 800c3aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	4629      	mov	r1, r5
 800c3b2:	f7f4 fb99 	bl	8000ae8 <__aeabi_dcmpeq>
 800c3b6:	b110      	cbz	r0, 800c3be <_dtoa_r+0x69e>
 800c3b8:	f018 0f01 	tst.w	r8, #1
 800c3bc:	d10e      	bne.n	800c3dc <_dtoa_r+0x6bc>
 800c3be:	9902      	ldr	r1, [sp, #8]
 800c3c0:	4648      	mov	r0, r9
 800c3c2:	f000 fbbd 	bl	800cb40 <_Bfree>
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	7033      	strb	r3, [r6, #0]
 800c3ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c3cc:	3701      	adds	r7, #1
 800c3ce:	601f      	str	r7, [r3, #0]
 800c3d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f000 824b 	beq.w	800c86e <_dtoa_r+0xb4e>
 800c3d8:	601e      	str	r6, [r3, #0]
 800c3da:	e248      	b.n	800c86e <_dtoa_r+0xb4e>
 800c3dc:	46b8      	mov	r8, r7
 800c3de:	4633      	mov	r3, r6
 800c3e0:	461e      	mov	r6, r3
 800c3e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c3e6:	2a39      	cmp	r2, #57	@ 0x39
 800c3e8:	d106      	bne.n	800c3f8 <_dtoa_r+0x6d8>
 800c3ea:	459a      	cmp	sl, r3
 800c3ec:	d1f8      	bne.n	800c3e0 <_dtoa_r+0x6c0>
 800c3ee:	2230      	movs	r2, #48	@ 0x30
 800c3f0:	f108 0801 	add.w	r8, r8, #1
 800c3f4:	f88a 2000 	strb.w	r2, [sl]
 800c3f8:	781a      	ldrb	r2, [r3, #0]
 800c3fa:	3201      	adds	r2, #1
 800c3fc:	701a      	strb	r2, [r3, #0]
 800c3fe:	e7a0      	b.n	800c342 <_dtoa_r+0x622>
 800c400:	4b6f      	ldr	r3, [pc, #444]	@ (800c5c0 <_dtoa_r+0x8a0>)
 800c402:	2200      	movs	r2, #0
 800c404:	f7f4 f908 	bl	8000618 <__aeabi_dmul>
 800c408:	2200      	movs	r2, #0
 800c40a:	2300      	movs	r3, #0
 800c40c:	4604      	mov	r4, r0
 800c40e:	460d      	mov	r5, r1
 800c410:	f7f4 fb6a 	bl	8000ae8 <__aeabi_dcmpeq>
 800c414:	2800      	cmp	r0, #0
 800c416:	d09f      	beq.n	800c358 <_dtoa_r+0x638>
 800c418:	e7d1      	b.n	800c3be <_dtoa_r+0x69e>
 800c41a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c41c:	2a00      	cmp	r2, #0
 800c41e:	f000 80ea 	beq.w	800c5f6 <_dtoa_r+0x8d6>
 800c422:	9a07      	ldr	r2, [sp, #28]
 800c424:	2a01      	cmp	r2, #1
 800c426:	f300 80cd 	bgt.w	800c5c4 <_dtoa_r+0x8a4>
 800c42a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c42c:	2a00      	cmp	r2, #0
 800c42e:	f000 80c1 	beq.w	800c5b4 <_dtoa_r+0x894>
 800c432:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c436:	9c08      	ldr	r4, [sp, #32]
 800c438:	9e00      	ldr	r6, [sp, #0]
 800c43a:	9a00      	ldr	r2, [sp, #0]
 800c43c:	441a      	add	r2, r3
 800c43e:	9200      	str	r2, [sp, #0]
 800c440:	9a06      	ldr	r2, [sp, #24]
 800c442:	2101      	movs	r1, #1
 800c444:	441a      	add	r2, r3
 800c446:	4648      	mov	r0, r9
 800c448:	9206      	str	r2, [sp, #24]
 800c44a:	f000 fc2d 	bl	800cca8 <__i2b>
 800c44e:	4605      	mov	r5, r0
 800c450:	b166      	cbz	r6, 800c46c <_dtoa_r+0x74c>
 800c452:	9b06      	ldr	r3, [sp, #24]
 800c454:	2b00      	cmp	r3, #0
 800c456:	dd09      	ble.n	800c46c <_dtoa_r+0x74c>
 800c458:	42b3      	cmp	r3, r6
 800c45a:	9a00      	ldr	r2, [sp, #0]
 800c45c:	bfa8      	it	ge
 800c45e:	4633      	movge	r3, r6
 800c460:	1ad2      	subs	r2, r2, r3
 800c462:	9200      	str	r2, [sp, #0]
 800c464:	9a06      	ldr	r2, [sp, #24]
 800c466:	1af6      	subs	r6, r6, r3
 800c468:	1ad3      	subs	r3, r2, r3
 800c46a:	9306      	str	r3, [sp, #24]
 800c46c:	9b08      	ldr	r3, [sp, #32]
 800c46e:	b30b      	cbz	r3, 800c4b4 <_dtoa_r+0x794>
 800c470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c472:	2b00      	cmp	r3, #0
 800c474:	f000 80c6 	beq.w	800c604 <_dtoa_r+0x8e4>
 800c478:	2c00      	cmp	r4, #0
 800c47a:	f000 80c0 	beq.w	800c5fe <_dtoa_r+0x8de>
 800c47e:	4629      	mov	r1, r5
 800c480:	4622      	mov	r2, r4
 800c482:	4648      	mov	r0, r9
 800c484:	f000 fcc8 	bl	800ce18 <__pow5mult>
 800c488:	9a02      	ldr	r2, [sp, #8]
 800c48a:	4601      	mov	r1, r0
 800c48c:	4605      	mov	r5, r0
 800c48e:	4648      	mov	r0, r9
 800c490:	f000 fc20 	bl	800ccd4 <__multiply>
 800c494:	9902      	ldr	r1, [sp, #8]
 800c496:	4680      	mov	r8, r0
 800c498:	4648      	mov	r0, r9
 800c49a:	f000 fb51 	bl	800cb40 <_Bfree>
 800c49e:	9b08      	ldr	r3, [sp, #32]
 800c4a0:	1b1b      	subs	r3, r3, r4
 800c4a2:	9308      	str	r3, [sp, #32]
 800c4a4:	f000 80b1 	beq.w	800c60a <_dtoa_r+0x8ea>
 800c4a8:	9a08      	ldr	r2, [sp, #32]
 800c4aa:	4641      	mov	r1, r8
 800c4ac:	4648      	mov	r0, r9
 800c4ae:	f000 fcb3 	bl	800ce18 <__pow5mult>
 800c4b2:	9002      	str	r0, [sp, #8]
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	4648      	mov	r0, r9
 800c4b8:	f000 fbf6 	bl	800cca8 <__i2b>
 800c4bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c4be:	4604      	mov	r4, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f000 81d8 	beq.w	800c876 <_dtoa_r+0xb56>
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	4601      	mov	r1, r0
 800c4ca:	4648      	mov	r0, r9
 800c4cc:	f000 fca4 	bl	800ce18 <__pow5mult>
 800c4d0:	9b07      	ldr	r3, [sp, #28]
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	4604      	mov	r4, r0
 800c4d6:	f300 809f 	bgt.w	800c618 <_dtoa_r+0x8f8>
 800c4da:	9b04      	ldr	r3, [sp, #16]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f040 8097 	bne.w	800c610 <_dtoa_r+0x8f0>
 800c4e2:	9b05      	ldr	r3, [sp, #20]
 800c4e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	f040 8093 	bne.w	800c614 <_dtoa_r+0x8f4>
 800c4ee:	9b05      	ldr	r3, [sp, #20]
 800c4f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c4f4:	0d1b      	lsrs	r3, r3, #20
 800c4f6:	051b      	lsls	r3, r3, #20
 800c4f8:	b133      	cbz	r3, 800c508 <_dtoa_r+0x7e8>
 800c4fa:	9b00      	ldr	r3, [sp, #0]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	9300      	str	r3, [sp, #0]
 800c500:	9b06      	ldr	r3, [sp, #24]
 800c502:	3301      	adds	r3, #1
 800c504:	9306      	str	r3, [sp, #24]
 800c506:	2301      	movs	r3, #1
 800c508:	9308      	str	r3, [sp, #32]
 800c50a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f000 81b8 	beq.w	800c882 <_dtoa_r+0xb62>
 800c512:	6923      	ldr	r3, [r4, #16]
 800c514:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c518:	6918      	ldr	r0, [r3, #16]
 800c51a:	f000 fb79 	bl	800cc10 <__hi0bits>
 800c51e:	f1c0 0020 	rsb	r0, r0, #32
 800c522:	9b06      	ldr	r3, [sp, #24]
 800c524:	4418      	add	r0, r3
 800c526:	f010 001f 	ands.w	r0, r0, #31
 800c52a:	f000 8082 	beq.w	800c632 <_dtoa_r+0x912>
 800c52e:	f1c0 0320 	rsb	r3, r0, #32
 800c532:	2b04      	cmp	r3, #4
 800c534:	dd73      	ble.n	800c61e <_dtoa_r+0x8fe>
 800c536:	9b00      	ldr	r3, [sp, #0]
 800c538:	f1c0 001c 	rsb	r0, r0, #28
 800c53c:	4403      	add	r3, r0
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	9b06      	ldr	r3, [sp, #24]
 800c542:	4403      	add	r3, r0
 800c544:	4406      	add	r6, r0
 800c546:	9306      	str	r3, [sp, #24]
 800c548:	9b00      	ldr	r3, [sp, #0]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	dd05      	ble.n	800c55a <_dtoa_r+0x83a>
 800c54e:	9902      	ldr	r1, [sp, #8]
 800c550:	461a      	mov	r2, r3
 800c552:	4648      	mov	r0, r9
 800c554:	f000 fcba 	bl	800cecc <__lshift>
 800c558:	9002      	str	r0, [sp, #8]
 800c55a:	9b06      	ldr	r3, [sp, #24]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	dd05      	ble.n	800c56c <_dtoa_r+0x84c>
 800c560:	4621      	mov	r1, r4
 800c562:	461a      	mov	r2, r3
 800c564:	4648      	mov	r0, r9
 800c566:	f000 fcb1 	bl	800cecc <__lshift>
 800c56a:	4604      	mov	r4, r0
 800c56c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d061      	beq.n	800c636 <_dtoa_r+0x916>
 800c572:	9802      	ldr	r0, [sp, #8]
 800c574:	4621      	mov	r1, r4
 800c576:	f000 fd15 	bl	800cfa4 <__mcmp>
 800c57a:	2800      	cmp	r0, #0
 800c57c:	da5b      	bge.n	800c636 <_dtoa_r+0x916>
 800c57e:	2300      	movs	r3, #0
 800c580:	9902      	ldr	r1, [sp, #8]
 800c582:	220a      	movs	r2, #10
 800c584:	4648      	mov	r0, r9
 800c586:	f000 fafd 	bl	800cb84 <__multadd>
 800c58a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c58c:	9002      	str	r0, [sp, #8]
 800c58e:	f107 38ff 	add.w	r8, r7, #4294967295
 800c592:	2b00      	cmp	r3, #0
 800c594:	f000 8177 	beq.w	800c886 <_dtoa_r+0xb66>
 800c598:	4629      	mov	r1, r5
 800c59a:	2300      	movs	r3, #0
 800c59c:	220a      	movs	r2, #10
 800c59e:	4648      	mov	r0, r9
 800c5a0:	f000 faf0 	bl	800cb84 <__multadd>
 800c5a4:	f1bb 0f00 	cmp.w	fp, #0
 800c5a8:	4605      	mov	r5, r0
 800c5aa:	dc6f      	bgt.n	800c68c <_dtoa_r+0x96c>
 800c5ac:	9b07      	ldr	r3, [sp, #28]
 800c5ae:	2b02      	cmp	r3, #2
 800c5b0:	dc49      	bgt.n	800c646 <_dtoa_r+0x926>
 800c5b2:	e06b      	b.n	800c68c <_dtoa_r+0x96c>
 800c5b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c5b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c5ba:	e73c      	b.n	800c436 <_dtoa_r+0x716>
 800c5bc:	3fe00000 	.word	0x3fe00000
 800c5c0:	40240000 	.word	0x40240000
 800c5c4:	9b03      	ldr	r3, [sp, #12]
 800c5c6:	1e5c      	subs	r4, r3, #1
 800c5c8:	9b08      	ldr	r3, [sp, #32]
 800c5ca:	42a3      	cmp	r3, r4
 800c5cc:	db09      	blt.n	800c5e2 <_dtoa_r+0x8c2>
 800c5ce:	1b1c      	subs	r4, r3, r4
 800c5d0:	9b03      	ldr	r3, [sp, #12]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	f6bf af30 	bge.w	800c438 <_dtoa_r+0x718>
 800c5d8:	9b00      	ldr	r3, [sp, #0]
 800c5da:	9a03      	ldr	r2, [sp, #12]
 800c5dc:	1a9e      	subs	r6, r3, r2
 800c5de:	2300      	movs	r3, #0
 800c5e0:	e72b      	b.n	800c43a <_dtoa_r+0x71a>
 800c5e2:	9b08      	ldr	r3, [sp, #32]
 800c5e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c5e6:	9408      	str	r4, [sp, #32]
 800c5e8:	1ae3      	subs	r3, r4, r3
 800c5ea:	441a      	add	r2, r3
 800c5ec:	9e00      	ldr	r6, [sp, #0]
 800c5ee:	9b03      	ldr	r3, [sp, #12]
 800c5f0:	920d      	str	r2, [sp, #52]	@ 0x34
 800c5f2:	2400      	movs	r4, #0
 800c5f4:	e721      	b.n	800c43a <_dtoa_r+0x71a>
 800c5f6:	9c08      	ldr	r4, [sp, #32]
 800c5f8:	9e00      	ldr	r6, [sp, #0]
 800c5fa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c5fc:	e728      	b.n	800c450 <_dtoa_r+0x730>
 800c5fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c602:	e751      	b.n	800c4a8 <_dtoa_r+0x788>
 800c604:	9a08      	ldr	r2, [sp, #32]
 800c606:	9902      	ldr	r1, [sp, #8]
 800c608:	e750      	b.n	800c4ac <_dtoa_r+0x78c>
 800c60a:	f8cd 8008 	str.w	r8, [sp, #8]
 800c60e:	e751      	b.n	800c4b4 <_dtoa_r+0x794>
 800c610:	2300      	movs	r3, #0
 800c612:	e779      	b.n	800c508 <_dtoa_r+0x7e8>
 800c614:	9b04      	ldr	r3, [sp, #16]
 800c616:	e777      	b.n	800c508 <_dtoa_r+0x7e8>
 800c618:	2300      	movs	r3, #0
 800c61a:	9308      	str	r3, [sp, #32]
 800c61c:	e779      	b.n	800c512 <_dtoa_r+0x7f2>
 800c61e:	d093      	beq.n	800c548 <_dtoa_r+0x828>
 800c620:	9a00      	ldr	r2, [sp, #0]
 800c622:	331c      	adds	r3, #28
 800c624:	441a      	add	r2, r3
 800c626:	9200      	str	r2, [sp, #0]
 800c628:	9a06      	ldr	r2, [sp, #24]
 800c62a:	441a      	add	r2, r3
 800c62c:	441e      	add	r6, r3
 800c62e:	9206      	str	r2, [sp, #24]
 800c630:	e78a      	b.n	800c548 <_dtoa_r+0x828>
 800c632:	4603      	mov	r3, r0
 800c634:	e7f4      	b.n	800c620 <_dtoa_r+0x900>
 800c636:	9b03      	ldr	r3, [sp, #12]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	46b8      	mov	r8, r7
 800c63c:	dc20      	bgt.n	800c680 <_dtoa_r+0x960>
 800c63e:	469b      	mov	fp, r3
 800c640:	9b07      	ldr	r3, [sp, #28]
 800c642:	2b02      	cmp	r3, #2
 800c644:	dd1e      	ble.n	800c684 <_dtoa_r+0x964>
 800c646:	f1bb 0f00 	cmp.w	fp, #0
 800c64a:	f47f adb1 	bne.w	800c1b0 <_dtoa_r+0x490>
 800c64e:	4621      	mov	r1, r4
 800c650:	465b      	mov	r3, fp
 800c652:	2205      	movs	r2, #5
 800c654:	4648      	mov	r0, r9
 800c656:	f000 fa95 	bl	800cb84 <__multadd>
 800c65a:	4601      	mov	r1, r0
 800c65c:	4604      	mov	r4, r0
 800c65e:	9802      	ldr	r0, [sp, #8]
 800c660:	f000 fca0 	bl	800cfa4 <__mcmp>
 800c664:	2800      	cmp	r0, #0
 800c666:	f77f ada3 	ble.w	800c1b0 <_dtoa_r+0x490>
 800c66a:	4656      	mov	r6, sl
 800c66c:	2331      	movs	r3, #49	@ 0x31
 800c66e:	f806 3b01 	strb.w	r3, [r6], #1
 800c672:	f108 0801 	add.w	r8, r8, #1
 800c676:	e59f      	b.n	800c1b8 <_dtoa_r+0x498>
 800c678:	9c03      	ldr	r4, [sp, #12]
 800c67a:	46b8      	mov	r8, r7
 800c67c:	4625      	mov	r5, r4
 800c67e:	e7f4      	b.n	800c66a <_dtoa_r+0x94a>
 800c680:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c686:	2b00      	cmp	r3, #0
 800c688:	f000 8101 	beq.w	800c88e <_dtoa_r+0xb6e>
 800c68c:	2e00      	cmp	r6, #0
 800c68e:	dd05      	ble.n	800c69c <_dtoa_r+0x97c>
 800c690:	4629      	mov	r1, r5
 800c692:	4632      	mov	r2, r6
 800c694:	4648      	mov	r0, r9
 800c696:	f000 fc19 	bl	800cecc <__lshift>
 800c69a:	4605      	mov	r5, r0
 800c69c:	9b08      	ldr	r3, [sp, #32]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d05c      	beq.n	800c75c <_dtoa_r+0xa3c>
 800c6a2:	6869      	ldr	r1, [r5, #4]
 800c6a4:	4648      	mov	r0, r9
 800c6a6:	f000 fa0b 	bl	800cac0 <_Balloc>
 800c6aa:	4606      	mov	r6, r0
 800c6ac:	b928      	cbnz	r0, 800c6ba <_dtoa_r+0x99a>
 800c6ae:	4b82      	ldr	r3, [pc, #520]	@ (800c8b8 <_dtoa_r+0xb98>)
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c6b6:	f7ff bb4a 	b.w	800bd4e <_dtoa_r+0x2e>
 800c6ba:	692a      	ldr	r2, [r5, #16]
 800c6bc:	3202      	adds	r2, #2
 800c6be:	0092      	lsls	r2, r2, #2
 800c6c0:	f105 010c 	add.w	r1, r5, #12
 800c6c4:	300c      	adds	r0, #12
 800c6c6:	f7ff fa94 	bl	800bbf2 <memcpy>
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	4631      	mov	r1, r6
 800c6ce:	4648      	mov	r0, r9
 800c6d0:	f000 fbfc 	bl	800cecc <__lshift>
 800c6d4:	f10a 0301 	add.w	r3, sl, #1
 800c6d8:	9300      	str	r3, [sp, #0]
 800c6da:	eb0a 030b 	add.w	r3, sl, fp
 800c6de:	9308      	str	r3, [sp, #32]
 800c6e0:	9b04      	ldr	r3, [sp, #16]
 800c6e2:	f003 0301 	and.w	r3, r3, #1
 800c6e6:	462f      	mov	r7, r5
 800c6e8:	9306      	str	r3, [sp, #24]
 800c6ea:	4605      	mov	r5, r0
 800c6ec:	9b00      	ldr	r3, [sp, #0]
 800c6ee:	9802      	ldr	r0, [sp, #8]
 800c6f0:	4621      	mov	r1, r4
 800c6f2:	f103 3bff 	add.w	fp, r3, #4294967295
 800c6f6:	f7ff fa8a 	bl	800bc0e <quorem>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	3330      	adds	r3, #48	@ 0x30
 800c6fe:	9003      	str	r0, [sp, #12]
 800c700:	4639      	mov	r1, r7
 800c702:	9802      	ldr	r0, [sp, #8]
 800c704:	9309      	str	r3, [sp, #36]	@ 0x24
 800c706:	f000 fc4d 	bl	800cfa4 <__mcmp>
 800c70a:	462a      	mov	r2, r5
 800c70c:	9004      	str	r0, [sp, #16]
 800c70e:	4621      	mov	r1, r4
 800c710:	4648      	mov	r0, r9
 800c712:	f000 fc63 	bl	800cfdc <__mdiff>
 800c716:	68c2      	ldr	r2, [r0, #12]
 800c718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c71a:	4606      	mov	r6, r0
 800c71c:	bb02      	cbnz	r2, 800c760 <_dtoa_r+0xa40>
 800c71e:	4601      	mov	r1, r0
 800c720:	9802      	ldr	r0, [sp, #8]
 800c722:	f000 fc3f 	bl	800cfa4 <__mcmp>
 800c726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c728:	4602      	mov	r2, r0
 800c72a:	4631      	mov	r1, r6
 800c72c:	4648      	mov	r0, r9
 800c72e:	920c      	str	r2, [sp, #48]	@ 0x30
 800c730:	9309      	str	r3, [sp, #36]	@ 0x24
 800c732:	f000 fa05 	bl	800cb40 <_Bfree>
 800c736:	9b07      	ldr	r3, [sp, #28]
 800c738:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c73a:	9e00      	ldr	r6, [sp, #0]
 800c73c:	ea42 0103 	orr.w	r1, r2, r3
 800c740:	9b06      	ldr	r3, [sp, #24]
 800c742:	4319      	orrs	r1, r3
 800c744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c746:	d10d      	bne.n	800c764 <_dtoa_r+0xa44>
 800c748:	2b39      	cmp	r3, #57	@ 0x39
 800c74a:	d027      	beq.n	800c79c <_dtoa_r+0xa7c>
 800c74c:	9a04      	ldr	r2, [sp, #16]
 800c74e:	2a00      	cmp	r2, #0
 800c750:	dd01      	ble.n	800c756 <_dtoa_r+0xa36>
 800c752:	9b03      	ldr	r3, [sp, #12]
 800c754:	3331      	adds	r3, #49	@ 0x31
 800c756:	f88b 3000 	strb.w	r3, [fp]
 800c75a:	e52e      	b.n	800c1ba <_dtoa_r+0x49a>
 800c75c:	4628      	mov	r0, r5
 800c75e:	e7b9      	b.n	800c6d4 <_dtoa_r+0x9b4>
 800c760:	2201      	movs	r2, #1
 800c762:	e7e2      	b.n	800c72a <_dtoa_r+0xa0a>
 800c764:	9904      	ldr	r1, [sp, #16]
 800c766:	2900      	cmp	r1, #0
 800c768:	db04      	blt.n	800c774 <_dtoa_r+0xa54>
 800c76a:	9807      	ldr	r0, [sp, #28]
 800c76c:	4301      	orrs	r1, r0
 800c76e:	9806      	ldr	r0, [sp, #24]
 800c770:	4301      	orrs	r1, r0
 800c772:	d120      	bne.n	800c7b6 <_dtoa_r+0xa96>
 800c774:	2a00      	cmp	r2, #0
 800c776:	ddee      	ble.n	800c756 <_dtoa_r+0xa36>
 800c778:	9902      	ldr	r1, [sp, #8]
 800c77a:	9300      	str	r3, [sp, #0]
 800c77c:	2201      	movs	r2, #1
 800c77e:	4648      	mov	r0, r9
 800c780:	f000 fba4 	bl	800cecc <__lshift>
 800c784:	4621      	mov	r1, r4
 800c786:	9002      	str	r0, [sp, #8]
 800c788:	f000 fc0c 	bl	800cfa4 <__mcmp>
 800c78c:	2800      	cmp	r0, #0
 800c78e:	9b00      	ldr	r3, [sp, #0]
 800c790:	dc02      	bgt.n	800c798 <_dtoa_r+0xa78>
 800c792:	d1e0      	bne.n	800c756 <_dtoa_r+0xa36>
 800c794:	07da      	lsls	r2, r3, #31
 800c796:	d5de      	bpl.n	800c756 <_dtoa_r+0xa36>
 800c798:	2b39      	cmp	r3, #57	@ 0x39
 800c79a:	d1da      	bne.n	800c752 <_dtoa_r+0xa32>
 800c79c:	2339      	movs	r3, #57	@ 0x39
 800c79e:	f88b 3000 	strb.w	r3, [fp]
 800c7a2:	4633      	mov	r3, r6
 800c7a4:	461e      	mov	r6, r3
 800c7a6:	3b01      	subs	r3, #1
 800c7a8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c7ac:	2a39      	cmp	r2, #57	@ 0x39
 800c7ae:	d04e      	beq.n	800c84e <_dtoa_r+0xb2e>
 800c7b0:	3201      	adds	r2, #1
 800c7b2:	701a      	strb	r2, [r3, #0]
 800c7b4:	e501      	b.n	800c1ba <_dtoa_r+0x49a>
 800c7b6:	2a00      	cmp	r2, #0
 800c7b8:	dd03      	ble.n	800c7c2 <_dtoa_r+0xaa2>
 800c7ba:	2b39      	cmp	r3, #57	@ 0x39
 800c7bc:	d0ee      	beq.n	800c79c <_dtoa_r+0xa7c>
 800c7be:	3301      	adds	r3, #1
 800c7c0:	e7c9      	b.n	800c756 <_dtoa_r+0xa36>
 800c7c2:	9a00      	ldr	r2, [sp, #0]
 800c7c4:	9908      	ldr	r1, [sp, #32]
 800c7c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c7ca:	428a      	cmp	r2, r1
 800c7cc:	d028      	beq.n	800c820 <_dtoa_r+0xb00>
 800c7ce:	9902      	ldr	r1, [sp, #8]
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	220a      	movs	r2, #10
 800c7d4:	4648      	mov	r0, r9
 800c7d6:	f000 f9d5 	bl	800cb84 <__multadd>
 800c7da:	42af      	cmp	r7, r5
 800c7dc:	9002      	str	r0, [sp, #8]
 800c7de:	f04f 0300 	mov.w	r3, #0
 800c7e2:	f04f 020a 	mov.w	r2, #10
 800c7e6:	4639      	mov	r1, r7
 800c7e8:	4648      	mov	r0, r9
 800c7ea:	d107      	bne.n	800c7fc <_dtoa_r+0xadc>
 800c7ec:	f000 f9ca 	bl	800cb84 <__multadd>
 800c7f0:	4607      	mov	r7, r0
 800c7f2:	4605      	mov	r5, r0
 800c7f4:	9b00      	ldr	r3, [sp, #0]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	9300      	str	r3, [sp, #0]
 800c7fa:	e777      	b.n	800c6ec <_dtoa_r+0x9cc>
 800c7fc:	f000 f9c2 	bl	800cb84 <__multadd>
 800c800:	4629      	mov	r1, r5
 800c802:	4607      	mov	r7, r0
 800c804:	2300      	movs	r3, #0
 800c806:	220a      	movs	r2, #10
 800c808:	4648      	mov	r0, r9
 800c80a:	f000 f9bb 	bl	800cb84 <__multadd>
 800c80e:	4605      	mov	r5, r0
 800c810:	e7f0      	b.n	800c7f4 <_dtoa_r+0xad4>
 800c812:	f1bb 0f00 	cmp.w	fp, #0
 800c816:	bfcc      	ite	gt
 800c818:	465e      	movgt	r6, fp
 800c81a:	2601      	movle	r6, #1
 800c81c:	4456      	add	r6, sl
 800c81e:	2700      	movs	r7, #0
 800c820:	9902      	ldr	r1, [sp, #8]
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	2201      	movs	r2, #1
 800c826:	4648      	mov	r0, r9
 800c828:	f000 fb50 	bl	800cecc <__lshift>
 800c82c:	4621      	mov	r1, r4
 800c82e:	9002      	str	r0, [sp, #8]
 800c830:	f000 fbb8 	bl	800cfa4 <__mcmp>
 800c834:	2800      	cmp	r0, #0
 800c836:	dcb4      	bgt.n	800c7a2 <_dtoa_r+0xa82>
 800c838:	d102      	bne.n	800c840 <_dtoa_r+0xb20>
 800c83a:	9b00      	ldr	r3, [sp, #0]
 800c83c:	07db      	lsls	r3, r3, #31
 800c83e:	d4b0      	bmi.n	800c7a2 <_dtoa_r+0xa82>
 800c840:	4633      	mov	r3, r6
 800c842:	461e      	mov	r6, r3
 800c844:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c848:	2a30      	cmp	r2, #48	@ 0x30
 800c84a:	d0fa      	beq.n	800c842 <_dtoa_r+0xb22>
 800c84c:	e4b5      	b.n	800c1ba <_dtoa_r+0x49a>
 800c84e:	459a      	cmp	sl, r3
 800c850:	d1a8      	bne.n	800c7a4 <_dtoa_r+0xa84>
 800c852:	2331      	movs	r3, #49	@ 0x31
 800c854:	f108 0801 	add.w	r8, r8, #1
 800c858:	f88a 3000 	strb.w	r3, [sl]
 800c85c:	e4ad      	b.n	800c1ba <_dtoa_r+0x49a>
 800c85e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c860:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c8bc <_dtoa_r+0xb9c>
 800c864:	b11b      	cbz	r3, 800c86e <_dtoa_r+0xb4e>
 800c866:	f10a 0308 	add.w	r3, sl, #8
 800c86a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c86c:	6013      	str	r3, [r2, #0]
 800c86e:	4650      	mov	r0, sl
 800c870:	b017      	add	sp, #92	@ 0x5c
 800c872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c876:	9b07      	ldr	r3, [sp, #28]
 800c878:	2b01      	cmp	r3, #1
 800c87a:	f77f ae2e 	ble.w	800c4da <_dtoa_r+0x7ba>
 800c87e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c880:	9308      	str	r3, [sp, #32]
 800c882:	2001      	movs	r0, #1
 800c884:	e64d      	b.n	800c522 <_dtoa_r+0x802>
 800c886:	f1bb 0f00 	cmp.w	fp, #0
 800c88a:	f77f aed9 	ble.w	800c640 <_dtoa_r+0x920>
 800c88e:	4656      	mov	r6, sl
 800c890:	9802      	ldr	r0, [sp, #8]
 800c892:	4621      	mov	r1, r4
 800c894:	f7ff f9bb 	bl	800bc0e <quorem>
 800c898:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c89c:	f806 3b01 	strb.w	r3, [r6], #1
 800c8a0:	eba6 020a 	sub.w	r2, r6, sl
 800c8a4:	4593      	cmp	fp, r2
 800c8a6:	ddb4      	ble.n	800c812 <_dtoa_r+0xaf2>
 800c8a8:	9902      	ldr	r1, [sp, #8]
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	220a      	movs	r2, #10
 800c8ae:	4648      	mov	r0, r9
 800c8b0:	f000 f968 	bl	800cb84 <__multadd>
 800c8b4:	9002      	str	r0, [sp, #8]
 800c8b6:	e7eb      	b.n	800c890 <_dtoa_r+0xb70>
 800c8b8:	0800e534 	.word	0x0800e534
 800c8bc:	0800e4b8 	.word	0x0800e4b8

0800c8c0 <_free_r>:
 800c8c0:	b538      	push	{r3, r4, r5, lr}
 800c8c2:	4605      	mov	r5, r0
 800c8c4:	2900      	cmp	r1, #0
 800c8c6:	d041      	beq.n	800c94c <_free_r+0x8c>
 800c8c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8cc:	1f0c      	subs	r4, r1, #4
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	bfb8      	it	lt
 800c8d2:	18e4      	addlt	r4, r4, r3
 800c8d4:	f000 f8e8 	bl	800caa8 <__malloc_lock>
 800c8d8:	4a1d      	ldr	r2, [pc, #116]	@ (800c950 <_free_r+0x90>)
 800c8da:	6813      	ldr	r3, [r2, #0]
 800c8dc:	b933      	cbnz	r3, 800c8ec <_free_r+0x2c>
 800c8de:	6063      	str	r3, [r4, #4]
 800c8e0:	6014      	str	r4, [r2, #0]
 800c8e2:	4628      	mov	r0, r5
 800c8e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8e8:	f000 b8e4 	b.w	800cab4 <__malloc_unlock>
 800c8ec:	42a3      	cmp	r3, r4
 800c8ee:	d908      	bls.n	800c902 <_free_r+0x42>
 800c8f0:	6820      	ldr	r0, [r4, #0]
 800c8f2:	1821      	adds	r1, r4, r0
 800c8f4:	428b      	cmp	r3, r1
 800c8f6:	bf01      	itttt	eq
 800c8f8:	6819      	ldreq	r1, [r3, #0]
 800c8fa:	685b      	ldreq	r3, [r3, #4]
 800c8fc:	1809      	addeq	r1, r1, r0
 800c8fe:	6021      	streq	r1, [r4, #0]
 800c900:	e7ed      	b.n	800c8de <_free_r+0x1e>
 800c902:	461a      	mov	r2, r3
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	b10b      	cbz	r3, 800c90c <_free_r+0x4c>
 800c908:	42a3      	cmp	r3, r4
 800c90a:	d9fa      	bls.n	800c902 <_free_r+0x42>
 800c90c:	6811      	ldr	r1, [r2, #0]
 800c90e:	1850      	adds	r0, r2, r1
 800c910:	42a0      	cmp	r0, r4
 800c912:	d10b      	bne.n	800c92c <_free_r+0x6c>
 800c914:	6820      	ldr	r0, [r4, #0]
 800c916:	4401      	add	r1, r0
 800c918:	1850      	adds	r0, r2, r1
 800c91a:	4283      	cmp	r3, r0
 800c91c:	6011      	str	r1, [r2, #0]
 800c91e:	d1e0      	bne.n	800c8e2 <_free_r+0x22>
 800c920:	6818      	ldr	r0, [r3, #0]
 800c922:	685b      	ldr	r3, [r3, #4]
 800c924:	6053      	str	r3, [r2, #4]
 800c926:	4408      	add	r0, r1
 800c928:	6010      	str	r0, [r2, #0]
 800c92a:	e7da      	b.n	800c8e2 <_free_r+0x22>
 800c92c:	d902      	bls.n	800c934 <_free_r+0x74>
 800c92e:	230c      	movs	r3, #12
 800c930:	602b      	str	r3, [r5, #0]
 800c932:	e7d6      	b.n	800c8e2 <_free_r+0x22>
 800c934:	6820      	ldr	r0, [r4, #0]
 800c936:	1821      	adds	r1, r4, r0
 800c938:	428b      	cmp	r3, r1
 800c93a:	bf04      	itt	eq
 800c93c:	6819      	ldreq	r1, [r3, #0]
 800c93e:	685b      	ldreq	r3, [r3, #4]
 800c940:	6063      	str	r3, [r4, #4]
 800c942:	bf04      	itt	eq
 800c944:	1809      	addeq	r1, r1, r0
 800c946:	6021      	streq	r1, [r4, #0]
 800c948:	6054      	str	r4, [r2, #4]
 800c94a:	e7ca      	b.n	800c8e2 <_free_r+0x22>
 800c94c:	bd38      	pop	{r3, r4, r5, pc}
 800c94e:	bf00      	nop
 800c950:	20004fa0 	.word	0x20004fa0

0800c954 <malloc>:
 800c954:	4b02      	ldr	r3, [pc, #8]	@ (800c960 <malloc+0xc>)
 800c956:	4601      	mov	r1, r0
 800c958:	6818      	ldr	r0, [r3, #0]
 800c95a:	f000 b825 	b.w	800c9a8 <_malloc_r>
 800c95e:	bf00      	nop
 800c960:	2000001c 	.word	0x2000001c

0800c964 <sbrk_aligned>:
 800c964:	b570      	push	{r4, r5, r6, lr}
 800c966:	4e0f      	ldr	r6, [pc, #60]	@ (800c9a4 <sbrk_aligned+0x40>)
 800c968:	460c      	mov	r4, r1
 800c96a:	6831      	ldr	r1, [r6, #0]
 800c96c:	4605      	mov	r5, r0
 800c96e:	b911      	cbnz	r1, 800c976 <sbrk_aligned+0x12>
 800c970:	f000 fe3e 	bl	800d5f0 <_sbrk_r>
 800c974:	6030      	str	r0, [r6, #0]
 800c976:	4621      	mov	r1, r4
 800c978:	4628      	mov	r0, r5
 800c97a:	f000 fe39 	bl	800d5f0 <_sbrk_r>
 800c97e:	1c43      	adds	r3, r0, #1
 800c980:	d103      	bne.n	800c98a <sbrk_aligned+0x26>
 800c982:	f04f 34ff 	mov.w	r4, #4294967295
 800c986:	4620      	mov	r0, r4
 800c988:	bd70      	pop	{r4, r5, r6, pc}
 800c98a:	1cc4      	adds	r4, r0, #3
 800c98c:	f024 0403 	bic.w	r4, r4, #3
 800c990:	42a0      	cmp	r0, r4
 800c992:	d0f8      	beq.n	800c986 <sbrk_aligned+0x22>
 800c994:	1a21      	subs	r1, r4, r0
 800c996:	4628      	mov	r0, r5
 800c998:	f000 fe2a 	bl	800d5f0 <_sbrk_r>
 800c99c:	3001      	adds	r0, #1
 800c99e:	d1f2      	bne.n	800c986 <sbrk_aligned+0x22>
 800c9a0:	e7ef      	b.n	800c982 <sbrk_aligned+0x1e>
 800c9a2:	bf00      	nop
 800c9a4:	20004f9c 	.word	0x20004f9c

0800c9a8 <_malloc_r>:
 800c9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9ac:	1ccd      	adds	r5, r1, #3
 800c9ae:	f025 0503 	bic.w	r5, r5, #3
 800c9b2:	3508      	adds	r5, #8
 800c9b4:	2d0c      	cmp	r5, #12
 800c9b6:	bf38      	it	cc
 800c9b8:	250c      	movcc	r5, #12
 800c9ba:	2d00      	cmp	r5, #0
 800c9bc:	4606      	mov	r6, r0
 800c9be:	db01      	blt.n	800c9c4 <_malloc_r+0x1c>
 800c9c0:	42a9      	cmp	r1, r5
 800c9c2:	d904      	bls.n	800c9ce <_malloc_r+0x26>
 800c9c4:	230c      	movs	r3, #12
 800c9c6:	6033      	str	r3, [r6, #0]
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800caa4 <_malloc_r+0xfc>
 800c9d2:	f000 f869 	bl	800caa8 <__malloc_lock>
 800c9d6:	f8d8 3000 	ldr.w	r3, [r8]
 800c9da:	461c      	mov	r4, r3
 800c9dc:	bb44      	cbnz	r4, 800ca30 <_malloc_r+0x88>
 800c9de:	4629      	mov	r1, r5
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	f7ff ffbf 	bl	800c964 <sbrk_aligned>
 800c9e6:	1c43      	adds	r3, r0, #1
 800c9e8:	4604      	mov	r4, r0
 800c9ea:	d158      	bne.n	800ca9e <_malloc_r+0xf6>
 800c9ec:	f8d8 4000 	ldr.w	r4, [r8]
 800c9f0:	4627      	mov	r7, r4
 800c9f2:	2f00      	cmp	r7, #0
 800c9f4:	d143      	bne.n	800ca7e <_malloc_r+0xd6>
 800c9f6:	2c00      	cmp	r4, #0
 800c9f8:	d04b      	beq.n	800ca92 <_malloc_r+0xea>
 800c9fa:	6823      	ldr	r3, [r4, #0]
 800c9fc:	4639      	mov	r1, r7
 800c9fe:	4630      	mov	r0, r6
 800ca00:	eb04 0903 	add.w	r9, r4, r3
 800ca04:	f000 fdf4 	bl	800d5f0 <_sbrk_r>
 800ca08:	4581      	cmp	r9, r0
 800ca0a:	d142      	bne.n	800ca92 <_malloc_r+0xea>
 800ca0c:	6821      	ldr	r1, [r4, #0]
 800ca0e:	1a6d      	subs	r5, r5, r1
 800ca10:	4629      	mov	r1, r5
 800ca12:	4630      	mov	r0, r6
 800ca14:	f7ff ffa6 	bl	800c964 <sbrk_aligned>
 800ca18:	3001      	adds	r0, #1
 800ca1a:	d03a      	beq.n	800ca92 <_malloc_r+0xea>
 800ca1c:	6823      	ldr	r3, [r4, #0]
 800ca1e:	442b      	add	r3, r5
 800ca20:	6023      	str	r3, [r4, #0]
 800ca22:	f8d8 3000 	ldr.w	r3, [r8]
 800ca26:	685a      	ldr	r2, [r3, #4]
 800ca28:	bb62      	cbnz	r2, 800ca84 <_malloc_r+0xdc>
 800ca2a:	f8c8 7000 	str.w	r7, [r8]
 800ca2e:	e00f      	b.n	800ca50 <_malloc_r+0xa8>
 800ca30:	6822      	ldr	r2, [r4, #0]
 800ca32:	1b52      	subs	r2, r2, r5
 800ca34:	d420      	bmi.n	800ca78 <_malloc_r+0xd0>
 800ca36:	2a0b      	cmp	r2, #11
 800ca38:	d917      	bls.n	800ca6a <_malloc_r+0xc2>
 800ca3a:	1961      	adds	r1, r4, r5
 800ca3c:	42a3      	cmp	r3, r4
 800ca3e:	6025      	str	r5, [r4, #0]
 800ca40:	bf18      	it	ne
 800ca42:	6059      	strne	r1, [r3, #4]
 800ca44:	6863      	ldr	r3, [r4, #4]
 800ca46:	bf08      	it	eq
 800ca48:	f8c8 1000 	streq.w	r1, [r8]
 800ca4c:	5162      	str	r2, [r4, r5]
 800ca4e:	604b      	str	r3, [r1, #4]
 800ca50:	4630      	mov	r0, r6
 800ca52:	f000 f82f 	bl	800cab4 <__malloc_unlock>
 800ca56:	f104 000b 	add.w	r0, r4, #11
 800ca5a:	1d23      	adds	r3, r4, #4
 800ca5c:	f020 0007 	bic.w	r0, r0, #7
 800ca60:	1ac2      	subs	r2, r0, r3
 800ca62:	bf1c      	itt	ne
 800ca64:	1a1b      	subne	r3, r3, r0
 800ca66:	50a3      	strne	r3, [r4, r2]
 800ca68:	e7af      	b.n	800c9ca <_malloc_r+0x22>
 800ca6a:	6862      	ldr	r2, [r4, #4]
 800ca6c:	42a3      	cmp	r3, r4
 800ca6e:	bf0c      	ite	eq
 800ca70:	f8c8 2000 	streq.w	r2, [r8]
 800ca74:	605a      	strne	r2, [r3, #4]
 800ca76:	e7eb      	b.n	800ca50 <_malloc_r+0xa8>
 800ca78:	4623      	mov	r3, r4
 800ca7a:	6864      	ldr	r4, [r4, #4]
 800ca7c:	e7ae      	b.n	800c9dc <_malloc_r+0x34>
 800ca7e:	463c      	mov	r4, r7
 800ca80:	687f      	ldr	r7, [r7, #4]
 800ca82:	e7b6      	b.n	800c9f2 <_malloc_r+0x4a>
 800ca84:	461a      	mov	r2, r3
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	42a3      	cmp	r3, r4
 800ca8a:	d1fb      	bne.n	800ca84 <_malloc_r+0xdc>
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	6053      	str	r3, [r2, #4]
 800ca90:	e7de      	b.n	800ca50 <_malloc_r+0xa8>
 800ca92:	230c      	movs	r3, #12
 800ca94:	6033      	str	r3, [r6, #0]
 800ca96:	4630      	mov	r0, r6
 800ca98:	f000 f80c 	bl	800cab4 <__malloc_unlock>
 800ca9c:	e794      	b.n	800c9c8 <_malloc_r+0x20>
 800ca9e:	6005      	str	r5, [r0, #0]
 800caa0:	e7d6      	b.n	800ca50 <_malloc_r+0xa8>
 800caa2:	bf00      	nop
 800caa4:	20004fa0 	.word	0x20004fa0

0800caa8 <__malloc_lock>:
 800caa8:	4801      	ldr	r0, [pc, #4]	@ (800cab0 <__malloc_lock+0x8>)
 800caaa:	f7ff b8a0 	b.w	800bbee <__retarget_lock_acquire_recursive>
 800caae:	bf00      	nop
 800cab0:	20004f98 	.word	0x20004f98

0800cab4 <__malloc_unlock>:
 800cab4:	4801      	ldr	r0, [pc, #4]	@ (800cabc <__malloc_unlock+0x8>)
 800cab6:	f7ff b89b 	b.w	800bbf0 <__retarget_lock_release_recursive>
 800caba:	bf00      	nop
 800cabc:	20004f98 	.word	0x20004f98

0800cac0 <_Balloc>:
 800cac0:	b570      	push	{r4, r5, r6, lr}
 800cac2:	69c6      	ldr	r6, [r0, #28]
 800cac4:	4604      	mov	r4, r0
 800cac6:	460d      	mov	r5, r1
 800cac8:	b976      	cbnz	r6, 800cae8 <_Balloc+0x28>
 800caca:	2010      	movs	r0, #16
 800cacc:	f7ff ff42 	bl	800c954 <malloc>
 800cad0:	4602      	mov	r2, r0
 800cad2:	61e0      	str	r0, [r4, #28]
 800cad4:	b920      	cbnz	r0, 800cae0 <_Balloc+0x20>
 800cad6:	4b18      	ldr	r3, [pc, #96]	@ (800cb38 <_Balloc+0x78>)
 800cad8:	4818      	ldr	r0, [pc, #96]	@ (800cb3c <_Balloc+0x7c>)
 800cada:	216b      	movs	r1, #107	@ 0x6b
 800cadc:	f000 fd98 	bl	800d610 <__assert_func>
 800cae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cae4:	6006      	str	r6, [r0, #0]
 800cae6:	60c6      	str	r6, [r0, #12]
 800cae8:	69e6      	ldr	r6, [r4, #28]
 800caea:	68f3      	ldr	r3, [r6, #12]
 800caec:	b183      	cbz	r3, 800cb10 <_Balloc+0x50>
 800caee:	69e3      	ldr	r3, [r4, #28]
 800caf0:	68db      	ldr	r3, [r3, #12]
 800caf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800caf6:	b9b8      	cbnz	r0, 800cb28 <_Balloc+0x68>
 800caf8:	2101      	movs	r1, #1
 800cafa:	fa01 f605 	lsl.w	r6, r1, r5
 800cafe:	1d72      	adds	r2, r6, #5
 800cb00:	0092      	lsls	r2, r2, #2
 800cb02:	4620      	mov	r0, r4
 800cb04:	f000 fda2 	bl	800d64c <_calloc_r>
 800cb08:	b160      	cbz	r0, 800cb24 <_Balloc+0x64>
 800cb0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb0e:	e00e      	b.n	800cb2e <_Balloc+0x6e>
 800cb10:	2221      	movs	r2, #33	@ 0x21
 800cb12:	2104      	movs	r1, #4
 800cb14:	4620      	mov	r0, r4
 800cb16:	f000 fd99 	bl	800d64c <_calloc_r>
 800cb1a:	69e3      	ldr	r3, [r4, #28]
 800cb1c:	60f0      	str	r0, [r6, #12]
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1e4      	bne.n	800caee <_Balloc+0x2e>
 800cb24:	2000      	movs	r0, #0
 800cb26:	bd70      	pop	{r4, r5, r6, pc}
 800cb28:	6802      	ldr	r2, [r0, #0]
 800cb2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb2e:	2300      	movs	r3, #0
 800cb30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb34:	e7f7      	b.n	800cb26 <_Balloc+0x66>
 800cb36:	bf00      	nop
 800cb38:	0800e4c5 	.word	0x0800e4c5
 800cb3c:	0800e545 	.word	0x0800e545

0800cb40 <_Bfree>:
 800cb40:	b570      	push	{r4, r5, r6, lr}
 800cb42:	69c6      	ldr	r6, [r0, #28]
 800cb44:	4605      	mov	r5, r0
 800cb46:	460c      	mov	r4, r1
 800cb48:	b976      	cbnz	r6, 800cb68 <_Bfree+0x28>
 800cb4a:	2010      	movs	r0, #16
 800cb4c:	f7ff ff02 	bl	800c954 <malloc>
 800cb50:	4602      	mov	r2, r0
 800cb52:	61e8      	str	r0, [r5, #28]
 800cb54:	b920      	cbnz	r0, 800cb60 <_Bfree+0x20>
 800cb56:	4b09      	ldr	r3, [pc, #36]	@ (800cb7c <_Bfree+0x3c>)
 800cb58:	4809      	ldr	r0, [pc, #36]	@ (800cb80 <_Bfree+0x40>)
 800cb5a:	218f      	movs	r1, #143	@ 0x8f
 800cb5c:	f000 fd58 	bl	800d610 <__assert_func>
 800cb60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb64:	6006      	str	r6, [r0, #0]
 800cb66:	60c6      	str	r6, [r0, #12]
 800cb68:	b13c      	cbz	r4, 800cb7a <_Bfree+0x3a>
 800cb6a:	69eb      	ldr	r3, [r5, #28]
 800cb6c:	6862      	ldr	r2, [r4, #4]
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb74:	6021      	str	r1, [r4, #0]
 800cb76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}
 800cb7c:	0800e4c5 	.word	0x0800e4c5
 800cb80:	0800e545 	.word	0x0800e545

0800cb84 <__multadd>:
 800cb84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb88:	690d      	ldr	r5, [r1, #16]
 800cb8a:	4607      	mov	r7, r0
 800cb8c:	460c      	mov	r4, r1
 800cb8e:	461e      	mov	r6, r3
 800cb90:	f101 0c14 	add.w	ip, r1, #20
 800cb94:	2000      	movs	r0, #0
 800cb96:	f8dc 3000 	ldr.w	r3, [ip]
 800cb9a:	b299      	uxth	r1, r3
 800cb9c:	fb02 6101 	mla	r1, r2, r1, r6
 800cba0:	0c1e      	lsrs	r6, r3, #16
 800cba2:	0c0b      	lsrs	r3, r1, #16
 800cba4:	fb02 3306 	mla	r3, r2, r6, r3
 800cba8:	b289      	uxth	r1, r1
 800cbaa:	3001      	adds	r0, #1
 800cbac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cbb0:	4285      	cmp	r5, r0
 800cbb2:	f84c 1b04 	str.w	r1, [ip], #4
 800cbb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cbba:	dcec      	bgt.n	800cb96 <__multadd+0x12>
 800cbbc:	b30e      	cbz	r6, 800cc02 <__multadd+0x7e>
 800cbbe:	68a3      	ldr	r3, [r4, #8]
 800cbc0:	42ab      	cmp	r3, r5
 800cbc2:	dc19      	bgt.n	800cbf8 <__multadd+0x74>
 800cbc4:	6861      	ldr	r1, [r4, #4]
 800cbc6:	4638      	mov	r0, r7
 800cbc8:	3101      	adds	r1, #1
 800cbca:	f7ff ff79 	bl	800cac0 <_Balloc>
 800cbce:	4680      	mov	r8, r0
 800cbd0:	b928      	cbnz	r0, 800cbde <__multadd+0x5a>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	4b0c      	ldr	r3, [pc, #48]	@ (800cc08 <__multadd+0x84>)
 800cbd6:	480d      	ldr	r0, [pc, #52]	@ (800cc0c <__multadd+0x88>)
 800cbd8:	21ba      	movs	r1, #186	@ 0xba
 800cbda:	f000 fd19 	bl	800d610 <__assert_func>
 800cbde:	6922      	ldr	r2, [r4, #16]
 800cbe0:	3202      	adds	r2, #2
 800cbe2:	f104 010c 	add.w	r1, r4, #12
 800cbe6:	0092      	lsls	r2, r2, #2
 800cbe8:	300c      	adds	r0, #12
 800cbea:	f7ff f802 	bl	800bbf2 <memcpy>
 800cbee:	4621      	mov	r1, r4
 800cbf0:	4638      	mov	r0, r7
 800cbf2:	f7ff ffa5 	bl	800cb40 <_Bfree>
 800cbf6:	4644      	mov	r4, r8
 800cbf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cbfc:	3501      	adds	r5, #1
 800cbfe:	615e      	str	r6, [r3, #20]
 800cc00:	6125      	str	r5, [r4, #16]
 800cc02:	4620      	mov	r0, r4
 800cc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc08:	0800e534 	.word	0x0800e534
 800cc0c:	0800e545 	.word	0x0800e545

0800cc10 <__hi0bits>:
 800cc10:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cc14:	4603      	mov	r3, r0
 800cc16:	bf36      	itet	cc
 800cc18:	0403      	lslcc	r3, r0, #16
 800cc1a:	2000      	movcs	r0, #0
 800cc1c:	2010      	movcc	r0, #16
 800cc1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc22:	bf3c      	itt	cc
 800cc24:	021b      	lslcc	r3, r3, #8
 800cc26:	3008      	addcc	r0, #8
 800cc28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc2c:	bf3c      	itt	cc
 800cc2e:	011b      	lslcc	r3, r3, #4
 800cc30:	3004      	addcc	r0, #4
 800cc32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc36:	bf3c      	itt	cc
 800cc38:	009b      	lslcc	r3, r3, #2
 800cc3a:	3002      	addcc	r0, #2
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	db05      	blt.n	800cc4c <__hi0bits+0x3c>
 800cc40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cc44:	f100 0001 	add.w	r0, r0, #1
 800cc48:	bf08      	it	eq
 800cc4a:	2020      	moveq	r0, #32
 800cc4c:	4770      	bx	lr

0800cc4e <__lo0bits>:
 800cc4e:	6803      	ldr	r3, [r0, #0]
 800cc50:	4602      	mov	r2, r0
 800cc52:	f013 0007 	ands.w	r0, r3, #7
 800cc56:	d00b      	beq.n	800cc70 <__lo0bits+0x22>
 800cc58:	07d9      	lsls	r1, r3, #31
 800cc5a:	d421      	bmi.n	800cca0 <__lo0bits+0x52>
 800cc5c:	0798      	lsls	r0, r3, #30
 800cc5e:	bf49      	itett	mi
 800cc60:	085b      	lsrmi	r3, r3, #1
 800cc62:	089b      	lsrpl	r3, r3, #2
 800cc64:	2001      	movmi	r0, #1
 800cc66:	6013      	strmi	r3, [r2, #0]
 800cc68:	bf5c      	itt	pl
 800cc6a:	6013      	strpl	r3, [r2, #0]
 800cc6c:	2002      	movpl	r0, #2
 800cc6e:	4770      	bx	lr
 800cc70:	b299      	uxth	r1, r3
 800cc72:	b909      	cbnz	r1, 800cc78 <__lo0bits+0x2a>
 800cc74:	0c1b      	lsrs	r3, r3, #16
 800cc76:	2010      	movs	r0, #16
 800cc78:	b2d9      	uxtb	r1, r3
 800cc7a:	b909      	cbnz	r1, 800cc80 <__lo0bits+0x32>
 800cc7c:	3008      	adds	r0, #8
 800cc7e:	0a1b      	lsrs	r3, r3, #8
 800cc80:	0719      	lsls	r1, r3, #28
 800cc82:	bf04      	itt	eq
 800cc84:	091b      	lsreq	r3, r3, #4
 800cc86:	3004      	addeq	r0, #4
 800cc88:	0799      	lsls	r1, r3, #30
 800cc8a:	bf04      	itt	eq
 800cc8c:	089b      	lsreq	r3, r3, #2
 800cc8e:	3002      	addeq	r0, #2
 800cc90:	07d9      	lsls	r1, r3, #31
 800cc92:	d403      	bmi.n	800cc9c <__lo0bits+0x4e>
 800cc94:	085b      	lsrs	r3, r3, #1
 800cc96:	f100 0001 	add.w	r0, r0, #1
 800cc9a:	d003      	beq.n	800cca4 <__lo0bits+0x56>
 800cc9c:	6013      	str	r3, [r2, #0]
 800cc9e:	4770      	bx	lr
 800cca0:	2000      	movs	r0, #0
 800cca2:	4770      	bx	lr
 800cca4:	2020      	movs	r0, #32
 800cca6:	4770      	bx	lr

0800cca8 <__i2b>:
 800cca8:	b510      	push	{r4, lr}
 800ccaa:	460c      	mov	r4, r1
 800ccac:	2101      	movs	r1, #1
 800ccae:	f7ff ff07 	bl	800cac0 <_Balloc>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	b928      	cbnz	r0, 800ccc2 <__i2b+0x1a>
 800ccb6:	4b05      	ldr	r3, [pc, #20]	@ (800cccc <__i2b+0x24>)
 800ccb8:	4805      	ldr	r0, [pc, #20]	@ (800ccd0 <__i2b+0x28>)
 800ccba:	f240 1145 	movw	r1, #325	@ 0x145
 800ccbe:	f000 fca7 	bl	800d610 <__assert_func>
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	6144      	str	r4, [r0, #20]
 800ccc6:	6103      	str	r3, [r0, #16]
 800ccc8:	bd10      	pop	{r4, pc}
 800ccca:	bf00      	nop
 800cccc:	0800e534 	.word	0x0800e534
 800ccd0:	0800e545 	.word	0x0800e545

0800ccd4 <__multiply>:
 800ccd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccd8:	4617      	mov	r7, r2
 800ccda:	690a      	ldr	r2, [r1, #16]
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	bfa8      	it	ge
 800cce2:	463b      	movge	r3, r7
 800cce4:	4689      	mov	r9, r1
 800cce6:	bfa4      	itt	ge
 800cce8:	460f      	movge	r7, r1
 800ccea:	4699      	movge	r9, r3
 800ccec:	693d      	ldr	r5, [r7, #16]
 800ccee:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	6879      	ldr	r1, [r7, #4]
 800ccf6:	eb05 060a 	add.w	r6, r5, sl
 800ccfa:	42b3      	cmp	r3, r6
 800ccfc:	b085      	sub	sp, #20
 800ccfe:	bfb8      	it	lt
 800cd00:	3101      	addlt	r1, #1
 800cd02:	f7ff fedd 	bl	800cac0 <_Balloc>
 800cd06:	b930      	cbnz	r0, 800cd16 <__multiply+0x42>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	4b41      	ldr	r3, [pc, #260]	@ (800ce10 <__multiply+0x13c>)
 800cd0c:	4841      	ldr	r0, [pc, #260]	@ (800ce14 <__multiply+0x140>)
 800cd0e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cd12:	f000 fc7d 	bl	800d610 <__assert_func>
 800cd16:	f100 0414 	add.w	r4, r0, #20
 800cd1a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cd1e:	4623      	mov	r3, r4
 800cd20:	2200      	movs	r2, #0
 800cd22:	4573      	cmp	r3, lr
 800cd24:	d320      	bcc.n	800cd68 <__multiply+0x94>
 800cd26:	f107 0814 	add.w	r8, r7, #20
 800cd2a:	f109 0114 	add.w	r1, r9, #20
 800cd2e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cd32:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cd36:	9302      	str	r3, [sp, #8]
 800cd38:	1beb      	subs	r3, r5, r7
 800cd3a:	3b15      	subs	r3, #21
 800cd3c:	f023 0303 	bic.w	r3, r3, #3
 800cd40:	3304      	adds	r3, #4
 800cd42:	3715      	adds	r7, #21
 800cd44:	42bd      	cmp	r5, r7
 800cd46:	bf38      	it	cc
 800cd48:	2304      	movcc	r3, #4
 800cd4a:	9301      	str	r3, [sp, #4]
 800cd4c:	9b02      	ldr	r3, [sp, #8]
 800cd4e:	9103      	str	r1, [sp, #12]
 800cd50:	428b      	cmp	r3, r1
 800cd52:	d80c      	bhi.n	800cd6e <__multiply+0x9a>
 800cd54:	2e00      	cmp	r6, #0
 800cd56:	dd03      	ble.n	800cd60 <__multiply+0x8c>
 800cd58:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d055      	beq.n	800ce0c <__multiply+0x138>
 800cd60:	6106      	str	r6, [r0, #16]
 800cd62:	b005      	add	sp, #20
 800cd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd68:	f843 2b04 	str.w	r2, [r3], #4
 800cd6c:	e7d9      	b.n	800cd22 <__multiply+0x4e>
 800cd6e:	f8b1 a000 	ldrh.w	sl, [r1]
 800cd72:	f1ba 0f00 	cmp.w	sl, #0
 800cd76:	d01f      	beq.n	800cdb8 <__multiply+0xe4>
 800cd78:	46c4      	mov	ip, r8
 800cd7a:	46a1      	mov	r9, r4
 800cd7c:	2700      	movs	r7, #0
 800cd7e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cd82:	f8d9 3000 	ldr.w	r3, [r9]
 800cd86:	fa1f fb82 	uxth.w	fp, r2
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	fb0a 330b 	mla	r3, sl, fp, r3
 800cd90:	443b      	add	r3, r7
 800cd92:	f8d9 7000 	ldr.w	r7, [r9]
 800cd96:	0c12      	lsrs	r2, r2, #16
 800cd98:	0c3f      	lsrs	r7, r7, #16
 800cd9a:	fb0a 7202 	mla	r2, sl, r2, r7
 800cd9e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cda8:	4565      	cmp	r5, ip
 800cdaa:	f849 3b04 	str.w	r3, [r9], #4
 800cdae:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800cdb2:	d8e4      	bhi.n	800cd7e <__multiply+0xaa>
 800cdb4:	9b01      	ldr	r3, [sp, #4]
 800cdb6:	50e7      	str	r7, [r4, r3]
 800cdb8:	9b03      	ldr	r3, [sp, #12]
 800cdba:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cdbe:	3104      	adds	r1, #4
 800cdc0:	f1b9 0f00 	cmp.w	r9, #0
 800cdc4:	d020      	beq.n	800ce08 <__multiply+0x134>
 800cdc6:	6823      	ldr	r3, [r4, #0]
 800cdc8:	4647      	mov	r7, r8
 800cdca:	46a4      	mov	ip, r4
 800cdcc:	f04f 0a00 	mov.w	sl, #0
 800cdd0:	f8b7 b000 	ldrh.w	fp, [r7]
 800cdd4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cdd8:	fb09 220b 	mla	r2, r9, fp, r2
 800cddc:	4452      	add	r2, sl
 800cdde:	b29b      	uxth	r3, r3
 800cde0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cde4:	f84c 3b04 	str.w	r3, [ip], #4
 800cde8:	f857 3b04 	ldr.w	r3, [r7], #4
 800cdec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cdf0:	f8bc 3000 	ldrh.w	r3, [ip]
 800cdf4:	fb09 330a 	mla	r3, r9, sl, r3
 800cdf8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cdfc:	42bd      	cmp	r5, r7
 800cdfe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce02:	d8e5      	bhi.n	800cdd0 <__multiply+0xfc>
 800ce04:	9a01      	ldr	r2, [sp, #4]
 800ce06:	50a3      	str	r3, [r4, r2]
 800ce08:	3404      	adds	r4, #4
 800ce0a:	e79f      	b.n	800cd4c <__multiply+0x78>
 800ce0c:	3e01      	subs	r6, #1
 800ce0e:	e7a1      	b.n	800cd54 <__multiply+0x80>
 800ce10:	0800e534 	.word	0x0800e534
 800ce14:	0800e545 	.word	0x0800e545

0800ce18 <__pow5mult>:
 800ce18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce1c:	4615      	mov	r5, r2
 800ce1e:	f012 0203 	ands.w	r2, r2, #3
 800ce22:	4607      	mov	r7, r0
 800ce24:	460e      	mov	r6, r1
 800ce26:	d007      	beq.n	800ce38 <__pow5mult+0x20>
 800ce28:	4c25      	ldr	r4, [pc, #148]	@ (800cec0 <__pow5mult+0xa8>)
 800ce2a:	3a01      	subs	r2, #1
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce32:	f7ff fea7 	bl	800cb84 <__multadd>
 800ce36:	4606      	mov	r6, r0
 800ce38:	10ad      	asrs	r5, r5, #2
 800ce3a:	d03d      	beq.n	800ceb8 <__pow5mult+0xa0>
 800ce3c:	69fc      	ldr	r4, [r7, #28]
 800ce3e:	b97c      	cbnz	r4, 800ce60 <__pow5mult+0x48>
 800ce40:	2010      	movs	r0, #16
 800ce42:	f7ff fd87 	bl	800c954 <malloc>
 800ce46:	4602      	mov	r2, r0
 800ce48:	61f8      	str	r0, [r7, #28]
 800ce4a:	b928      	cbnz	r0, 800ce58 <__pow5mult+0x40>
 800ce4c:	4b1d      	ldr	r3, [pc, #116]	@ (800cec4 <__pow5mult+0xac>)
 800ce4e:	481e      	ldr	r0, [pc, #120]	@ (800cec8 <__pow5mult+0xb0>)
 800ce50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ce54:	f000 fbdc 	bl	800d610 <__assert_func>
 800ce58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce5c:	6004      	str	r4, [r0, #0]
 800ce5e:	60c4      	str	r4, [r0, #12]
 800ce60:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ce64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ce68:	b94c      	cbnz	r4, 800ce7e <__pow5mult+0x66>
 800ce6a:	f240 2171 	movw	r1, #625	@ 0x271
 800ce6e:	4638      	mov	r0, r7
 800ce70:	f7ff ff1a 	bl	800cca8 <__i2b>
 800ce74:	2300      	movs	r3, #0
 800ce76:	f8c8 0008 	str.w	r0, [r8, #8]
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	6003      	str	r3, [r0, #0]
 800ce7e:	f04f 0900 	mov.w	r9, #0
 800ce82:	07eb      	lsls	r3, r5, #31
 800ce84:	d50a      	bpl.n	800ce9c <__pow5mult+0x84>
 800ce86:	4631      	mov	r1, r6
 800ce88:	4622      	mov	r2, r4
 800ce8a:	4638      	mov	r0, r7
 800ce8c:	f7ff ff22 	bl	800ccd4 <__multiply>
 800ce90:	4631      	mov	r1, r6
 800ce92:	4680      	mov	r8, r0
 800ce94:	4638      	mov	r0, r7
 800ce96:	f7ff fe53 	bl	800cb40 <_Bfree>
 800ce9a:	4646      	mov	r6, r8
 800ce9c:	106d      	asrs	r5, r5, #1
 800ce9e:	d00b      	beq.n	800ceb8 <__pow5mult+0xa0>
 800cea0:	6820      	ldr	r0, [r4, #0]
 800cea2:	b938      	cbnz	r0, 800ceb4 <__pow5mult+0x9c>
 800cea4:	4622      	mov	r2, r4
 800cea6:	4621      	mov	r1, r4
 800cea8:	4638      	mov	r0, r7
 800ceaa:	f7ff ff13 	bl	800ccd4 <__multiply>
 800ceae:	6020      	str	r0, [r4, #0]
 800ceb0:	f8c0 9000 	str.w	r9, [r0]
 800ceb4:	4604      	mov	r4, r0
 800ceb6:	e7e4      	b.n	800ce82 <__pow5mult+0x6a>
 800ceb8:	4630      	mov	r0, r6
 800ceba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cebe:	bf00      	nop
 800cec0:	0800e5f8 	.word	0x0800e5f8
 800cec4:	0800e4c5 	.word	0x0800e4c5
 800cec8:	0800e545 	.word	0x0800e545

0800cecc <__lshift>:
 800cecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ced0:	460c      	mov	r4, r1
 800ced2:	6849      	ldr	r1, [r1, #4]
 800ced4:	6923      	ldr	r3, [r4, #16]
 800ced6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ceda:	68a3      	ldr	r3, [r4, #8]
 800cedc:	4607      	mov	r7, r0
 800cede:	4691      	mov	r9, r2
 800cee0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cee4:	f108 0601 	add.w	r6, r8, #1
 800cee8:	42b3      	cmp	r3, r6
 800ceea:	db0b      	blt.n	800cf04 <__lshift+0x38>
 800ceec:	4638      	mov	r0, r7
 800ceee:	f7ff fde7 	bl	800cac0 <_Balloc>
 800cef2:	4605      	mov	r5, r0
 800cef4:	b948      	cbnz	r0, 800cf0a <__lshift+0x3e>
 800cef6:	4602      	mov	r2, r0
 800cef8:	4b28      	ldr	r3, [pc, #160]	@ (800cf9c <__lshift+0xd0>)
 800cefa:	4829      	ldr	r0, [pc, #164]	@ (800cfa0 <__lshift+0xd4>)
 800cefc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cf00:	f000 fb86 	bl	800d610 <__assert_func>
 800cf04:	3101      	adds	r1, #1
 800cf06:	005b      	lsls	r3, r3, #1
 800cf08:	e7ee      	b.n	800cee8 <__lshift+0x1c>
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	f100 0114 	add.w	r1, r0, #20
 800cf10:	f100 0210 	add.w	r2, r0, #16
 800cf14:	4618      	mov	r0, r3
 800cf16:	4553      	cmp	r3, sl
 800cf18:	db33      	blt.n	800cf82 <__lshift+0xb6>
 800cf1a:	6920      	ldr	r0, [r4, #16]
 800cf1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf20:	f104 0314 	add.w	r3, r4, #20
 800cf24:	f019 091f 	ands.w	r9, r9, #31
 800cf28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cf30:	d02b      	beq.n	800cf8a <__lshift+0xbe>
 800cf32:	f1c9 0e20 	rsb	lr, r9, #32
 800cf36:	468a      	mov	sl, r1
 800cf38:	2200      	movs	r2, #0
 800cf3a:	6818      	ldr	r0, [r3, #0]
 800cf3c:	fa00 f009 	lsl.w	r0, r0, r9
 800cf40:	4310      	orrs	r0, r2
 800cf42:	f84a 0b04 	str.w	r0, [sl], #4
 800cf46:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf4a:	459c      	cmp	ip, r3
 800cf4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800cf50:	d8f3      	bhi.n	800cf3a <__lshift+0x6e>
 800cf52:	ebac 0304 	sub.w	r3, ip, r4
 800cf56:	3b15      	subs	r3, #21
 800cf58:	f023 0303 	bic.w	r3, r3, #3
 800cf5c:	3304      	adds	r3, #4
 800cf5e:	f104 0015 	add.w	r0, r4, #21
 800cf62:	4560      	cmp	r0, ip
 800cf64:	bf88      	it	hi
 800cf66:	2304      	movhi	r3, #4
 800cf68:	50ca      	str	r2, [r1, r3]
 800cf6a:	b10a      	cbz	r2, 800cf70 <__lshift+0xa4>
 800cf6c:	f108 0602 	add.w	r6, r8, #2
 800cf70:	3e01      	subs	r6, #1
 800cf72:	4638      	mov	r0, r7
 800cf74:	612e      	str	r6, [r5, #16]
 800cf76:	4621      	mov	r1, r4
 800cf78:	f7ff fde2 	bl	800cb40 <_Bfree>
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf82:	f842 0f04 	str.w	r0, [r2, #4]!
 800cf86:	3301      	adds	r3, #1
 800cf88:	e7c5      	b.n	800cf16 <__lshift+0x4a>
 800cf8a:	3904      	subs	r1, #4
 800cf8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf90:	f841 2f04 	str.w	r2, [r1, #4]!
 800cf94:	459c      	cmp	ip, r3
 800cf96:	d8f9      	bhi.n	800cf8c <__lshift+0xc0>
 800cf98:	e7ea      	b.n	800cf70 <__lshift+0xa4>
 800cf9a:	bf00      	nop
 800cf9c:	0800e534 	.word	0x0800e534
 800cfa0:	0800e545 	.word	0x0800e545

0800cfa4 <__mcmp>:
 800cfa4:	690a      	ldr	r2, [r1, #16]
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	6900      	ldr	r0, [r0, #16]
 800cfaa:	1a80      	subs	r0, r0, r2
 800cfac:	b530      	push	{r4, r5, lr}
 800cfae:	d10e      	bne.n	800cfce <__mcmp+0x2a>
 800cfb0:	3314      	adds	r3, #20
 800cfb2:	3114      	adds	r1, #20
 800cfb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cfb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cfbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cfc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cfc4:	4295      	cmp	r5, r2
 800cfc6:	d003      	beq.n	800cfd0 <__mcmp+0x2c>
 800cfc8:	d205      	bcs.n	800cfd6 <__mcmp+0x32>
 800cfca:	f04f 30ff 	mov.w	r0, #4294967295
 800cfce:	bd30      	pop	{r4, r5, pc}
 800cfd0:	42a3      	cmp	r3, r4
 800cfd2:	d3f3      	bcc.n	800cfbc <__mcmp+0x18>
 800cfd4:	e7fb      	b.n	800cfce <__mcmp+0x2a>
 800cfd6:	2001      	movs	r0, #1
 800cfd8:	e7f9      	b.n	800cfce <__mcmp+0x2a>
	...

0800cfdc <__mdiff>:
 800cfdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfe0:	4689      	mov	r9, r1
 800cfe2:	4606      	mov	r6, r0
 800cfe4:	4611      	mov	r1, r2
 800cfe6:	4648      	mov	r0, r9
 800cfe8:	4614      	mov	r4, r2
 800cfea:	f7ff ffdb 	bl	800cfa4 <__mcmp>
 800cfee:	1e05      	subs	r5, r0, #0
 800cff0:	d112      	bne.n	800d018 <__mdiff+0x3c>
 800cff2:	4629      	mov	r1, r5
 800cff4:	4630      	mov	r0, r6
 800cff6:	f7ff fd63 	bl	800cac0 <_Balloc>
 800cffa:	4602      	mov	r2, r0
 800cffc:	b928      	cbnz	r0, 800d00a <__mdiff+0x2e>
 800cffe:	4b3f      	ldr	r3, [pc, #252]	@ (800d0fc <__mdiff+0x120>)
 800d000:	f240 2137 	movw	r1, #567	@ 0x237
 800d004:	483e      	ldr	r0, [pc, #248]	@ (800d100 <__mdiff+0x124>)
 800d006:	f000 fb03 	bl	800d610 <__assert_func>
 800d00a:	2301      	movs	r3, #1
 800d00c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d010:	4610      	mov	r0, r2
 800d012:	b003      	add	sp, #12
 800d014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d018:	bfbc      	itt	lt
 800d01a:	464b      	movlt	r3, r9
 800d01c:	46a1      	movlt	r9, r4
 800d01e:	4630      	mov	r0, r6
 800d020:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d024:	bfba      	itte	lt
 800d026:	461c      	movlt	r4, r3
 800d028:	2501      	movlt	r5, #1
 800d02a:	2500      	movge	r5, #0
 800d02c:	f7ff fd48 	bl	800cac0 <_Balloc>
 800d030:	4602      	mov	r2, r0
 800d032:	b918      	cbnz	r0, 800d03c <__mdiff+0x60>
 800d034:	4b31      	ldr	r3, [pc, #196]	@ (800d0fc <__mdiff+0x120>)
 800d036:	f240 2145 	movw	r1, #581	@ 0x245
 800d03a:	e7e3      	b.n	800d004 <__mdiff+0x28>
 800d03c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d040:	6926      	ldr	r6, [r4, #16]
 800d042:	60c5      	str	r5, [r0, #12]
 800d044:	f109 0310 	add.w	r3, r9, #16
 800d048:	f109 0514 	add.w	r5, r9, #20
 800d04c:	f104 0e14 	add.w	lr, r4, #20
 800d050:	f100 0b14 	add.w	fp, r0, #20
 800d054:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d058:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d05c:	9301      	str	r3, [sp, #4]
 800d05e:	46d9      	mov	r9, fp
 800d060:	f04f 0c00 	mov.w	ip, #0
 800d064:	9b01      	ldr	r3, [sp, #4]
 800d066:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d06a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d06e:	9301      	str	r3, [sp, #4]
 800d070:	fa1f f38a 	uxth.w	r3, sl
 800d074:	4619      	mov	r1, r3
 800d076:	b283      	uxth	r3, r0
 800d078:	1acb      	subs	r3, r1, r3
 800d07a:	0c00      	lsrs	r0, r0, #16
 800d07c:	4463      	add	r3, ip
 800d07e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d082:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d086:	b29b      	uxth	r3, r3
 800d088:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d08c:	4576      	cmp	r6, lr
 800d08e:	f849 3b04 	str.w	r3, [r9], #4
 800d092:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d096:	d8e5      	bhi.n	800d064 <__mdiff+0x88>
 800d098:	1b33      	subs	r3, r6, r4
 800d09a:	3b15      	subs	r3, #21
 800d09c:	f023 0303 	bic.w	r3, r3, #3
 800d0a0:	3415      	adds	r4, #21
 800d0a2:	3304      	adds	r3, #4
 800d0a4:	42a6      	cmp	r6, r4
 800d0a6:	bf38      	it	cc
 800d0a8:	2304      	movcc	r3, #4
 800d0aa:	441d      	add	r5, r3
 800d0ac:	445b      	add	r3, fp
 800d0ae:	461e      	mov	r6, r3
 800d0b0:	462c      	mov	r4, r5
 800d0b2:	4544      	cmp	r4, r8
 800d0b4:	d30e      	bcc.n	800d0d4 <__mdiff+0xf8>
 800d0b6:	f108 0103 	add.w	r1, r8, #3
 800d0ba:	1b49      	subs	r1, r1, r5
 800d0bc:	f021 0103 	bic.w	r1, r1, #3
 800d0c0:	3d03      	subs	r5, #3
 800d0c2:	45a8      	cmp	r8, r5
 800d0c4:	bf38      	it	cc
 800d0c6:	2100      	movcc	r1, #0
 800d0c8:	440b      	add	r3, r1
 800d0ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d0ce:	b191      	cbz	r1, 800d0f6 <__mdiff+0x11a>
 800d0d0:	6117      	str	r7, [r2, #16]
 800d0d2:	e79d      	b.n	800d010 <__mdiff+0x34>
 800d0d4:	f854 1b04 	ldr.w	r1, [r4], #4
 800d0d8:	46e6      	mov	lr, ip
 800d0da:	0c08      	lsrs	r0, r1, #16
 800d0dc:	fa1c fc81 	uxtah	ip, ip, r1
 800d0e0:	4471      	add	r1, lr
 800d0e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d0e6:	b289      	uxth	r1, r1
 800d0e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d0ec:	f846 1b04 	str.w	r1, [r6], #4
 800d0f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d0f4:	e7dd      	b.n	800d0b2 <__mdiff+0xd6>
 800d0f6:	3f01      	subs	r7, #1
 800d0f8:	e7e7      	b.n	800d0ca <__mdiff+0xee>
 800d0fa:	bf00      	nop
 800d0fc:	0800e534 	.word	0x0800e534
 800d100:	0800e545 	.word	0x0800e545

0800d104 <__d2b>:
 800d104:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d108:	460f      	mov	r7, r1
 800d10a:	2101      	movs	r1, #1
 800d10c:	ec59 8b10 	vmov	r8, r9, d0
 800d110:	4616      	mov	r6, r2
 800d112:	f7ff fcd5 	bl	800cac0 <_Balloc>
 800d116:	4604      	mov	r4, r0
 800d118:	b930      	cbnz	r0, 800d128 <__d2b+0x24>
 800d11a:	4602      	mov	r2, r0
 800d11c:	4b23      	ldr	r3, [pc, #140]	@ (800d1ac <__d2b+0xa8>)
 800d11e:	4824      	ldr	r0, [pc, #144]	@ (800d1b0 <__d2b+0xac>)
 800d120:	f240 310f 	movw	r1, #783	@ 0x30f
 800d124:	f000 fa74 	bl	800d610 <__assert_func>
 800d128:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d12c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d130:	b10d      	cbz	r5, 800d136 <__d2b+0x32>
 800d132:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d136:	9301      	str	r3, [sp, #4]
 800d138:	f1b8 0300 	subs.w	r3, r8, #0
 800d13c:	d023      	beq.n	800d186 <__d2b+0x82>
 800d13e:	4668      	mov	r0, sp
 800d140:	9300      	str	r3, [sp, #0]
 800d142:	f7ff fd84 	bl	800cc4e <__lo0bits>
 800d146:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d14a:	b1d0      	cbz	r0, 800d182 <__d2b+0x7e>
 800d14c:	f1c0 0320 	rsb	r3, r0, #32
 800d150:	fa02 f303 	lsl.w	r3, r2, r3
 800d154:	430b      	orrs	r3, r1
 800d156:	40c2      	lsrs	r2, r0
 800d158:	6163      	str	r3, [r4, #20]
 800d15a:	9201      	str	r2, [sp, #4]
 800d15c:	9b01      	ldr	r3, [sp, #4]
 800d15e:	61a3      	str	r3, [r4, #24]
 800d160:	2b00      	cmp	r3, #0
 800d162:	bf0c      	ite	eq
 800d164:	2201      	moveq	r2, #1
 800d166:	2202      	movne	r2, #2
 800d168:	6122      	str	r2, [r4, #16]
 800d16a:	b1a5      	cbz	r5, 800d196 <__d2b+0x92>
 800d16c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d170:	4405      	add	r5, r0
 800d172:	603d      	str	r5, [r7, #0]
 800d174:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d178:	6030      	str	r0, [r6, #0]
 800d17a:	4620      	mov	r0, r4
 800d17c:	b003      	add	sp, #12
 800d17e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d182:	6161      	str	r1, [r4, #20]
 800d184:	e7ea      	b.n	800d15c <__d2b+0x58>
 800d186:	a801      	add	r0, sp, #4
 800d188:	f7ff fd61 	bl	800cc4e <__lo0bits>
 800d18c:	9b01      	ldr	r3, [sp, #4]
 800d18e:	6163      	str	r3, [r4, #20]
 800d190:	3020      	adds	r0, #32
 800d192:	2201      	movs	r2, #1
 800d194:	e7e8      	b.n	800d168 <__d2b+0x64>
 800d196:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d19a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d19e:	6038      	str	r0, [r7, #0]
 800d1a0:	6918      	ldr	r0, [r3, #16]
 800d1a2:	f7ff fd35 	bl	800cc10 <__hi0bits>
 800d1a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d1aa:	e7e5      	b.n	800d178 <__d2b+0x74>
 800d1ac:	0800e534 	.word	0x0800e534
 800d1b0:	0800e545 	.word	0x0800e545

0800d1b4 <__ssputs_r>:
 800d1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1b8:	688e      	ldr	r6, [r1, #8]
 800d1ba:	461f      	mov	r7, r3
 800d1bc:	42be      	cmp	r6, r7
 800d1be:	680b      	ldr	r3, [r1, #0]
 800d1c0:	4682      	mov	sl, r0
 800d1c2:	460c      	mov	r4, r1
 800d1c4:	4690      	mov	r8, r2
 800d1c6:	d82d      	bhi.n	800d224 <__ssputs_r+0x70>
 800d1c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d1cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d1d0:	d026      	beq.n	800d220 <__ssputs_r+0x6c>
 800d1d2:	6965      	ldr	r5, [r4, #20]
 800d1d4:	6909      	ldr	r1, [r1, #16]
 800d1d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1da:	eba3 0901 	sub.w	r9, r3, r1
 800d1de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d1e2:	1c7b      	adds	r3, r7, #1
 800d1e4:	444b      	add	r3, r9
 800d1e6:	106d      	asrs	r5, r5, #1
 800d1e8:	429d      	cmp	r5, r3
 800d1ea:	bf38      	it	cc
 800d1ec:	461d      	movcc	r5, r3
 800d1ee:	0553      	lsls	r3, r2, #21
 800d1f0:	d527      	bpl.n	800d242 <__ssputs_r+0x8e>
 800d1f2:	4629      	mov	r1, r5
 800d1f4:	f7ff fbd8 	bl	800c9a8 <_malloc_r>
 800d1f8:	4606      	mov	r6, r0
 800d1fa:	b360      	cbz	r0, 800d256 <__ssputs_r+0xa2>
 800d1fc:	6921      	ldr	r1, [r4, #16]
 800d1fe:	464a      	mov	r2, r9
 800d200:	f7fe fcf7 	bl	800bbf2 <memcpy>
 800d204:	89a3      	ldrh	r3, [r4, #12]
 800d206:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d20a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d20e:	81a3      	strh	r3, [r4, #12]
 800d210:	6126      	str	r6, [r4, #16]
 800d212:	6165      	str	r5, [r4, #20]
 800d214:	444e      	add	r6, r9
 800d216:	eba5 0509 	sub.w	r5, r5, r9
 800d21a:	6026      	str	r6, [r4, #0]
 800d21c:	60a5      	str	r5, [r4, #8]
 800d21e:	463e      	mov	r6, r7
 800d220:	42be      	cmp	r6, r7
 800d222:	d900      	bls.n	800d226 <__ssputs_r+0x72>
 800d224:	463e      	mov	r6, r7
 800d226:	6820      	ldr	r0, [r4, #0]
 800d228:	4632      	mov	r2, r6
 800d22a:	4641      	mov	r1, r8
 800d22c:	f000 f9c6 	bl	800d5bc <memmove>
 800d230:	68a3      	ldr	r3, [r4, #8]
 800d232:	1b9b      	subs	r3, r3, r6
 800d234:	60a3      	str	r3, [r4, #8]
 800d236:	6823      	ldr	r3, [r4, #0]
 800d238:	4433      	add	r3, r6
 800d23a:	6023      	str	r3, [r4, #0]
 800d23c:	2000      	movs	r0, #0
 800d23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d242:	462a      	mov	r2, r5
 800d244:	f000 fa28 	bl	800d698 <_realloc_r>
 800d248:	4606      	mov	r6, r0
 800d24a:	2800      	cmp	r0, #0
 800d24c:	d1e0      	bne.n	800d210 <__ssputs_r+0x5c>
 800d24e:	6921      	ldr	r1, [r4, #16]
 800d250:	4650      	mov	r0, sl
 800d252:	f7ff fb35 	bl	800c8c0 <_free_r>
 800d256:	230c      	movs	r3, #12
 800d258:	f8ca 3000 	str.w	r3, [sl]
 800d25c:	89a3      	ldrh	r3, [r4, #12]
 800d25e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d262:	81a3      	strh	r3, [r4, #12]
 800d264:	f04f 30ff 	mov.w	r0, #4294967295
 800d268:	e7e9      	b.n	800d23e <__ssputs_r+0x8a>
	...

0800d26c <_svfiprintf_r>:
 800d26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d270:	4698      	mov	r8, r3
 800d272:	898b      	ldrh	r3, [r1, #12]
 800d274:	061b      	lsls	r3, r3, #24
 800d276:	b09d      	sub	sp, #116	@ 0x74
 800d278:	4607      	mov	r7, r0
 800d27a:	460d      	mov	r5, r1
 800d27c:	4614      	mov	r4, r2
 800d27e:	d510      	bpl.n	800d2a2 <_svfiprintf_r+0x36>
 800d280:	690b      	ldr	r3, [r1, #16]
 800d282:	b973      	cbnz	r3, 800d2a2 <_svfiprintf_r+0x36>
 800d284:	2140      	movs	r1, #64	@ 0x40
 800d286:	f7ff fb8f 	bl	800c9a8 <_malloc_r>
 800d28a:	6028      	str	r0, [r5, #0]
 800d28c:	6128      	str	r0, [r5, #16]
 800d28e:	b930      	cbnz	r0, 800d29e <_svfiprintf_r+0x32>
 800d290:	230c      	movs	r3, #12
 800d292:	603b      	str	r3, [r7, #0]
 800d294:	f04f 30ff 	mov.w	r0, #4294967295
 800d298:	b01d      	add	sp, #116	@ 0x74
 800d29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d29e:	2340      	movs	r3, #64	@ 0x40
 800d2a0:	616b      	str	r3, [r5, #20]
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2a6:	2320      	movs	r3, #32
 800d2a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d2ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2b0:	2330      	movs	r3, #48	@ 0x30
 800d2b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d450 <_svfiprintf_r+0x1e4>
 800d2b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d2ba:	f04f 0901 	mov.w	r9, #1
 800d2be:	4623      	mov	r3, r4
 800d2c0:	469a      	mov	sl, r3
 800d2c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2c6:	b10a      	cbz	r2, 800d2cc <_svfiprintf_r+0x60>
 800d2c8:	2a25      	cmp	r2, #37	@ 0x25
 800d2ca:	d1f9      	bne.n	800d2c0 <_svfiprintf_r+0x54>
 800d2cc:	ebba 0b04 	subs.w	fp, sl, r4
 800d2d0:	d00b      	beq.n	800d2ea <_svfiprintf_r+0x7e>
 800d2d2:	465b      	mov	r3, fp
 800d2d4:	4622      	mov	r2, r4
 800d2d6:	4629      	mov	r1, r5
 800d2d8:	4638      	mov	r0, r7
 800d2da:	f7ff ff6b 	bl	800d1b4 <__ssputs_r>
 800d2de:	3001      	adds	r0, #1
 800d2e0:	f000 80a7 	beq.w	800d432 <_svfiprintf_r+0x1c6>
 800d2e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2e6:	445a      	add	r2, fp
 800d2e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2ea:	f89a 3000 	ldrb.w	r3, [sl]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	f000 809f 	beq.w	800d432 <_svfiprintf_r+0x1c6>
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	f04f 32ff 	mov.w	r2, #4294967295
 800d2fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2fe:	f10a 0a01 	add.w	sl, sl, #1
 800d302:	9304      	str	r3, [sp, #16]
 800d304:	9307      	str	r3, [sp, #28]
 800d306:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d30a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d30c:	4654      	mov	r4, sl
 800d30e:	2205      	movs	r2, #5
 800d310:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d314:	484e      	ldr	r0, [pc, #312]	@ (800d450 <_svfiprintf_r+0x1e4>)
 800d316:	f7f2 ff6b 	bl	80001f0 <memchr>
 800d31a:	9a04      	ldr	r2, [sp, #16]
 800d31c:	b9d8      	cbnz	r0, 800d356 <_svfiprintf_r+0xea>
 800d31e:	06d0      	lsls	r0, r2, #27
 800d320:	bf44      	itt	mi
 800d322:	2320      	movmi	r3, #32
 800d324:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d328:	0711      	lsls	r1, r2, #28
 800d32a:	bf44      	itt	mi
 800d32c:	232b      	movmi	r3, #43	@ 0x2b
 800d32e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d332:	f89a 3000 	ldrb.w	r3, [sl]
 800d336:	2b2a      	cmp	r3, #42	@ 0x2a
 800d338:	d015      	beq.n	800d366 <_svfiprintf_r+0xfa>
 800d33a:	9a07      	ldr	r2, [sp, #28]
 800d33c:	4654      	mov	r4, sl
 800d33e:	2000      	movs	r0, #0
 800d340:	f04f 0c0a 	mov.w	ip, #10
 800d344:	4621      	mov	r1, r4
 800d346:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d34a:	3b30      	subs	r3, #48	@ 0x30
 800d34c:	2b09      	cmp	r3, #9
 800d34e:	d94b      	bls.n	800d3e8 <_svfiprintf_r+0x17c>
 800d350:	b1b0      	cbz	r0, 800d380 <_svfiprintf_r+0x114>
 800d352:	9207      	str	r2, [sp, #28]
 800d354:	e014      	b.n	800d380 <_svfiprintf_r+0x114>
 800d356:	eba0 0308 	sub.w	r3, r0, r8
 800d35a:	fa09 f303 	lsl.w	r3, r9, r3
 800d35e:	4313      	orrs	r3, r2
 800d360:	9304      	str	r3, [sp, #16]
 800d362:	46a2      	mov	sl, r4
 800d364:	e7d2      	b.n	800d30c <_svfiprintf_r+0xa0>
 800d366:	9b03      	ldr	r3, [sp, #12]
 800d368:	1d19      	adds	r1, r3, #4
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	9103      	str	r1, [sp, #12]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	bfbb      	ittet	lt
 800d372:	425b      	neglt	r3, r3
 800d374:	f042 0202 	orrlt.w	r2, r2, #2
 800d378:	9307      	strge	r3, [sp, #28]
 800d37a:	9307      	strlt	r3, [sp, #28]
 800d37c:	bfb8      	it	lt
 800d37e:	9204      	strlt	r2, [sp, #16]
 800d380:	7823      	ldrb	r3, [r4, #0]
 800d382:	2b2e      	cmp	r3, #46	@ 0x2e
 800d384:	d10a      	bne.n	800d39c <_svfiprintf_r+0x130>
 800d386:	7863      	ldrb	r3, [r4, #1]
 800d388:	2b2a      	cmp	r3, #42	@ 0x2a
 800d38a:	d132      	bne.n	800d3f2 <_svfiprintf_r+0x186>
 800d38c:	9b03      	ldr	r3, [sp, #12]
 800d38e:	1d1a      	adds	r2, r3, #4
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	9203      	str	r2, [sp, #12]
 800d394:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d398:	3402      	adds	r4, #2
 800d39a:	9305      	str	r3, [sp, #20]
 800d39c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d460 <_svfiprintf_r+0x1f4>
 800d3a0:	7821      	ldrb	r1, [r4, #0]
 800d3a2:	2203      	movs	r2, #3
 800d3a4:	4650      	mov	r0, sl
 800d3a6:	f7f2 ff23 	bl	80001f0 <memchr>
 800d3aa:	b138      	cbz	r0, 800d3bc <_svfiprintf_r+0x150>
 800d3ac:	9b04      	ldr	r3, [sp, #16]
 800d3ae:	eba0 000a 	sub.w	r0, r0, sl
 800d3b2:	2240      	movs	r2, #64	@ 0x40
 800d3b4:	4082      	lsls	r2, r0
 800d3b6:	4313      	orrs	r3, r2
 800d3b8:	3401      	adds	r4, #1
 800d3ba:	9304      	str	r3, [sp, #16]
 800d3bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3c0:	4824      	ldr	r0, [pc, #144]	@ (800d454 <_svfiprintf_r+0x1e8>)
 800d3c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d3c6:	2206      	movs	r2, #6
 800d3c8:	f7f2 ff12 	bl	80001f0 <memchr>
 800d3cc:	2800      	cmp	r0, #0
 800d3ce:	d036      	beq.n	800d43e <_svfiprintf_r+0x1d2>
 800d3d0:	4b21      	ldr	r3, [pc, #132]	@ (800d458 <_svfiprintf_r+0x1ec>)
 800d3d2:	bb1b      	cbnz	r3, 800d41c <_svfiprintf_r+0x1b0>
 800d3d4:	9b03      	ldr	r3, [sp, #12]
 800d3d6:	3307      	adds	r3, #7
 800d3d8:	f023 0307 	bic.w	r3, r3, #7
 800d3dc:	3308      	adds	r3, #8
 800d3de:	9303      	str	r3, [sp, #12]
 800d3e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3e2:	4433      	add	r3, r6
 800d3e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3e6:	e76a      	b.n	800d2be <_svfiprintf_r+0x52>
 800d3e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3ec:	460c      	mov	r4, r1
 800d3ee:	2001      	movs	r0, #1
 800d3f0:	e7a8      	b.n	800d344 <_svfiprintf_r+0xd8>
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	3401      	adds	r4, #1
 800d3f6:	9305      	str	r3, [sp, #20]
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	f04f 0c0a 	mov.w	ip, #10
 800d3fe:	4620      	mov	r0, r4
 800d400:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d404:	3a30      	subs	r2, #48	@ 0x30
 800d406:	2a09      	cmp	r2, #9
 800d408:	d903      	bls.n	800d412 <_svfiprintf_r+0x1a6>
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d0c6      	beq.n	800d39c <_svfiprintf_r+0x130>
 800d40e:	9105      	str	r1, [sp, #20]
 800d410:	e7c4      	b.n	800d39c <_svfiprintf_r+0x130>
 800d412:	fb0c 2101 	mla	r1, ip, r1, r2
 800d416:	4604      	mov	r4, r0
 800d418:	2301      	movs	r3, #1
 800d41a:	e7f0      	b.n	800d3fe <_svfiprintf_r+0x192>
 800d41c:	ab03      	add	r3, sp, #12
 800d41e:	9300      	str	r3, [sp, #0]
 800d420:	462a      	mov	r2, r5
 800d422:	4b0e      	ldr	r3, [pc, #56]	@ (800d45c <_svfiprintf_r+0x1f0>)
 800d424:	a904      	add	r1, sp, #16
 800d426:	4638      	mov	r0, r7
 800d428:	f7fd fe86 	bl	800b138 <_printf_float>
 800d42c:	1c42      	adds	r2, r0, #1
 800d42e:	4606      	mov	r6, r0
 800d430:	d1d6      	bne.n	800d3e0 <_svfiprintf_r+0x174>
 800d432:	89ab      	ldrh	r3, [r5, #12]
 800d434:	065b      	lsls	r3, r3, #25
 800d436:	f53f af2d 	bmi.w	800d294 <_svfiprintf_r+0x28>
 800d43a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d43c:	e72c      	b.n	800d298 <_svfiprintf_r+0x2c>
 800d43e:	ab03      	add	r3, sp, #12
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	462a      	mov	r2, r5
 800d444:	4b05      	ldr	r3, [pc, #20]	@ (800d45c <_svfiprintf_r+0x1f0>)
 800d446:	a904      	add	r1, sp, #16
 800d448:	4638      	mov	r0, r7
 800d44a:	f7fe f90d 	bl	800b668 <_printf_i>
 800d44e:	e7ed      	b.n	800d42c <_svfiprintf_r+0x1c0>
 800d450:	0800e59e 	.word	0x0800e59e
 800d454:	0800e5a8 	.word	0x0800e5a8
 800d458:	0800b139 	.word	0x0800b139
 800d45c:	0800d1b5 	.word	0x0800d1b5
 800d460:	0800e5a4 	.word	0x0800e5a4

0800d464 <__sflush_r>:
 800d464:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d46c:	0716      	lsls	r6, r2, #28
 800d46e:	4605      	mov	r5, r0
 800d470:	460c      	mov	r4, r1
 800d472:	d454      	bmi.n	800d51e <__sflush_r+0xba>
 800d474:	684b      	ldr	r3, [r1, #4]
 800d476:	2b00      	cmp	r3, #0
 800d478:	dc02      	bgt.n	800d480 <__sflush_r+0x1c>
 800d47a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	dd48      	ble.n	800d512 <__sflush_r+0xae>
 800d480:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d482:	2e00      	cmp	r6, #0
 800d484:	d045      	beq.n	800d512 <__sflush_r+0xae>
 800d486:	2300      	movs	r3, #0
 800d488:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d48c:	682f      	ldr	r7, [r5, #0]
 800d48e:	6a21      	ldr	r1, [r4, #32]
 800d490:	602b      	str	r3, [r5, #0]
 800d492:	d030      	beq.n	800d4f6 <__sflush_r+0x92>
 800d494:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d496:	89a3      	ldrh	r3, [r4, #12]
 800d498:	0759      	lsls	r1, r3, #29
 800d49a:	d505      	bpl.n	800d4a8 <__sflush_r+0x44>
 800d49c:	6863      	ldr	r3, [r4, #4]
 800d49e:	1ad2      	subs	r2, r2, r3
 800d4a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d4a2:	b10b      	cbz	r3, 800d4a8 <__sflush_r+0x44>
 800d4a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d4a6:	1ad2      	subs	r2, r2, r3
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d4ac:	6a21      	ldr	r1, [r4, #32]
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	47b0      	blx	r6
 800d4b2:	1c43      	adds	r3, r0, #1
 800d4b4:	89a3      	ldrh	r3, [r4, #12]
 800d4b6:	d106      	bne.n	800d4c6 <__sflush_r+0x62>
 800d4b8:	6829      	ldr	r1, [r5, #0]
 800d4ba:	291d      	cmp	r1, #29
 800d4bc:	d82b      	bhi.n	800d516 <__sflush_r+0xb2>
 800d4be:	4a2a      	ldr	r2, [pc, #168]	@ (800d568 <__sflush_r+0x104>)
 800d4c0:	40ca      	lsrs	r2, r1
 800d4c2:	07d6      	lsls	r6, r2, #31
 800d4c4:	d527      	bpl.n	800d516 <__sflush_r+0xb2>
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	6062      	str	r2, [r4, #4]
 800d4ca:	04d9      	lsls	r1, r3, #19
 800d4cc:	6922      	ldr	r2, [r4, #16]
 800d4ce:	6022      	str	r2, [r4, #0]
 800d4d0:	d504      	bpl.n	800d4dc <__sflush_r+0x78>
 800d4d2:	1c42      	adds	r2, r0, #1
 800d4d4:	d101      	bne.n	800d4da <__sflush_r+0x76>
 800d4d6:	682b      	ldr	r3, [r5, #0]
 800d4d8:	b903      	cbnz	r3, 800d4dc <__sflush_r+0x78>
 800d4da:	6560      	str	r0, [r4, #84]	@ 0x54
 800d4dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4de:	602f      	str	r7, [r5, #0]
 800d4e0:	b1b9      	cbz	r1, 800d512 <__sflush_r+0xae>
 800d4e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4e6:	4299      	cmp	r1, r3
 800d4e8:	d002      	beq.n	800d4f0 <__sflush_r+0x8c>
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	f7ff f9e8 	bl	800c8c0 <_free_r>
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4f4:	e00d      	b.n	800d512 <__sflush_r+0xae>
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	4628      	mov	r0, r5
 800d4fa:	47b0      	blx	r6
 800d4fc:	4602      	mov	r2, r0
 800d4fe:	1c50      	adds	r0, r2, #1
 800d500:	d1c9      	bne.n	800d496 <__sflush_r+0x32>
 800d502:	682b      	ldr	r3, [r5, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d0c6      	beq.n	800d496 <__sflush_r+0x32>
 800d508:	2b1d      	cmp	r3, #29
 800d50a:	d001      	beq.n	800d510 <__sflush_r+0xac>
 800d50c:	2b16      	cmp	r3, #22
 800d50e:	d11e      	bne.n	800d54e <__sflush_r+0xea>
 800d510:	602f      	str	r7, [r5, #0]
 800d512:	2000      	movs	r0, #0
 800d514:	e022      	b.n	800d55c <__sflush_r+0xf8>
 800d516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d51a:	b21b      	sxth	r3, r3
 800d51c:	e01b      	b.n	800d556 <__sflush_r+0xf2>
 800d51e:	690f      	ldr	r7, [r1, #16]
 800d520:	2f00      	cmp	r7, #0
 800d522:	d0f6      	beq.n	800d512 <__sflush_r+0xae>
 800d524:	0793      	lsls	r3, r2, #30
 800d526:	680e      	ldr	r6, [r1, #0]
 800d528:	bf08      	it	eq
 800d52a:	694b      	ldreq	r3, [r1, #20]
 800d52c:	600f      	str	r7, [r1, #0]
 800d52e:	bf18      	it	ne
 800d530:	2300      	movne	r3, #0
 800d532:	eba6 0807 	sub.w	r8, r6, r7
 800d536:	608b      	str	r3, [r1, #8]
 800d538:	f1b8 0f00 	cmp.w	r8, #0
 800d53c:	dde9      	ble.n	800d512 <__sflush_r+0xae>
 800d53e:	6a21      	ldr	r1, [r4, #32]
 800d540:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d542:	4643      	mov	r3, r8
 800d544:	463a      	mov	r2, r7
 800d546:	4628      	mov	r0, r5
 800d548:	47b0      	blx	r6
 800d54a:	2800      	cmp	r0, #0
 800d54c:	dc08      	bgt.n	800d560 <__sflush_r+0xfc>
 800d54e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d556:	81a3      	strh	r3, [r4, #12]
 800d558:	f04f 30ff 	mov.w	r0, #4294967295
 800d55c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d560:	4407      	add	r7, r0
 800d562:	eba8 0800 	sub.w	r8, r8, r0
 800d566:	e7e7      	b.n	800d538 <__sflush_r+0xd4>
 800d568:	20400001 	.word	0x20400001

0800d56c <_fflush_r>:
 800d56c:	b538      	push	{r3, r4, r5, lr}
 800d56e:	690b      	ldr	r3, [r1, #16]
 800d570:	4605      	mov	r5, r0
 800d572:	460c      	mov	r4, r1
 800d574:	b913      	cbnz	r3, 800d57c <_fflush_r+0x10>
 800d576:	2500      	movs	r5, #0
 800d578:	4628      	mov	r0, r5
 800d57a:	bd38      	pop	{r3, r4, r5, pc}
 800d57c:	b118      	cbz	r0, 800d586 <_fflush_r+0x1a>
 800d57e:	6a03      	ldr	r3, [r0, #32]
 800d580:	b90b      	cbnz	r3, 800d586 <_fflush_r+0x1a>
 800d582:	f7fe fa1b 	bl	800b9bc <__sinit>
 800d586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d0f3      	beq.n	800d576 <_fflush_r+0xa>
 800d58e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d590:	07d0      	lsls	r0, r2, #31
 800d592:	d404      	bmi.n	800d59e <_fflush_r+0x32>
 800d594:	0599      	lsls	r1, r3, #22
 800d596:	d402      	bmi.n	800d59e <_fflush_r+0x32>
 800d598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d59a:	f7fe fb28 	bl	800bbee <__retarget_lock_acquire_recursive>
 800d59e:	4628      	mov	r0, r5
 800d5a0:	4621      	mov	r1, r4
 800d5a2:	f7ff ff5f 	bl	800d464 <__sflush_r>
 800d5a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d5a8:	07da      	lsls	r2, r3, #31
 800d5aa:	4605      	mov	r5, r0
 800d5ac:	d4e4      	bmi.n	800d578 <_fflush_r+0xc>
 800d5ae:	89a3      	ldrh	r3, [r4, #12]
 800d5b0:	059b      	lsls	r3, r3, #22
 800d5b2:	d4e1      	bmi.n	800d578 <_fflush_r+0xc>
 800d5b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d5b6:	f7fe fb1b 	bl	800bbf0 <__retarget_lock_release_recursive>
 800d5ba:	e7dd      	b.n	800d578 <_fflush_r+0xc>

0800d5bc <memmove>:
 800d5bc:	4288      	cmp	r0, r1
 800d5be:	b510      	push	{r4, lr}
 800d5c0:	eb01 0402 	add.w	r4, r1, r2
 800d5c4:	d902      	bls.n	800d5cc <memmove+0x10>
 800d5c6:	4284      	cmp	r4, r0
 800d5c8:	4623      	mov	r3, r4
 800d5ca:	d807      	bhi.n	800d5dc <memmove+0x20>
 800d5cc:	1e43      	subs	r3, r0, #1
 800d5ce:	42a1      	cmp	r1, r4
 800d5d0:	d008      	beq.n	800d5e4 <memmove+0x28>
 800d5d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d5da:	e7f8      	b.n	800d5ce <memmove+0x12>
 800d5dc:	4402      	add	r2, r0
 800d5de:	4601      	mov	r1, r0
 800d5e0:	428a      	cmp	r2, r1
 800d5e2:	d100      	bne.n	800d5e6 <memmove+0x2a>
 800d5e4:	bd10      	pop	{r4, pc}
 800d5e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d5ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d5ee:	e7f7      	b.n	800d5e0 <memmove+0x24>

0800d5f0 <_sbrk_r>:
 800d5f0:	b538      	push	{r3, r4, r5, lr}
 800d5f2:	4d06      	ldr	r5, [pc, #24]	@ (800d60c <_sbrk_r+0x1c>)
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	4604      	mov	r4, r0
 800d5f8:	4608      	mov	r0, r1
 800d5fa:	602b      	str	r3, [r5, #0]
 800d5fc:	f7f4 feea 	bl	80023d4 <_sbrk>
 800d600:	1c43      	adds	r3, r0, #1
 800d602:	d102      	bne.n	800d60a <_sbrk_r+0x1a>
 800d604:	682b      	ldr	r3, [r5, #0]
 800d606:	b103      	cbz	r3, 800d60a <_sbrk_r+0x1a>
 800d608:	6023      	str	r3, [r4, #0]
 800d60a:	bd38      	pop	{r3, r4, r5, pc}
 800d60c:	20004f94 	.word	0x20004f94

0800d610 <__assert_func>:
 800d610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d612:	4614      	mov	r4, r2
 800d614:	461a      	mov	r2, r3
 800d616:	4b09      	ldr	r3, [pc, #36]	@ (800d63c <__assert_func+0x2c>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4605      	mov	r5, r0
 800d61c:	68d8      	ldr	r0, [r3, #12]
 800d61e:	b14c      	cbz	r4, 800d634 <__assert_func+0x24>
 800d620:	4b07      	ldr	r3, [pc, #28]	@ (800d640 <__assert_func+0x30>)
 800d622:	9100      	str	r1, [sp, #0]
 800d624:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d628:	4906      	ldr	r1, [pc, #24]	@ (800d644 <__assert_func+0x34>)
 800d62a:	462b      	mov	r3, r5
 800d62c:	f000 f870 	bl	800d710 <fiprintf>
 800d630:	f000 f880 	bl	800d734 <abort>
 800d634:	4b04      	ldr	r3, [pc, #16]	@ (800d648 <__assert_func+0x38>)
 800d636:	461c      	mov	r4, r3
 800d638:	e7f3      	b.n	800d622 <__assert_func+0x12>
 800d63a:	bf00      	nop
 800d63c:	2000001c 	.word	0x2000001c
 800d640:	0800e5b9 	.word	0x0800e5b9
 800d644:	0800e5c6 	.word	0x0800e5c6
 800d648:	0800e5f4 	.word	0x0800e5f4

0800d64c <_calloc_r>:
 800d64c:	b570      	push	{r4, r5, r6, lr}
 800d64e:	fba1 5402 	umull	r5, r4, r1, r2
 800d652:	b934      	cbnz	r4, 800d662 <_calloc_r+0x16>
 800d654:	4629      	mov	r1, r5
 800d656:	f7ff f9a7 	bl	800c9a8 <_malloc_r>
 800d65a:	4606      	mov	r6, r0
 800d65c:	b928      	cbnz	r0, 800d66a <_calloc_r+0x1e>
 800d65e:	4630      	mov	r0, r6
 800d660:	bd70      	pop	{r4, r5, r6, pc}
 800d662:	220c      	movs	r2, #12
 800d664:	6002      	str	r2, [r0, #0]
 800d666:	2600      	movs	r6, #0
 800d668:	e7f9      	b.n	800d65e <_calloc_r+0x12>
 800d66a:	462a      	mov	r2, r5
 800d66c:	4621      	mov	r1, r4
 800d66e:	f7fe fa40 	bl	800baf2 <memset>
 800d672:	e7f4      	b.n	800d65e <_calloc_r+0x12>

0800d674 <__ascii_mbtowc>:
 800d674:	b082      	sub	sp, #8
 800d676:	b901      	cbnz	r1, 800d67a <__ascii_mbtowc+0x6>
 800d678:	a901      	add	r1, sp, #4
 800d67a:	b142      	cbz	r2, 800d68e <__ascii_mbtowc+0x1a>
 800d67c:	b14b      	cbz	r3, 800d692 <__ascii_mbtowc+0x1e>
 800d67e:	7813      	ldrb	r3, [r2, #0]
 800d680:	600b      	str	r3, [r1, #0]
 800d682:	7812      	ldrb	r2, [r2, #0]
 800d684:	1e10      	subs	r0, r2, #0
 800d686:	bf18      	it	ne
 800d688:	2001      	movne	r0, #1
 800d68a:	b002      	add	sp, #8
 800d68c:	4770      	bx	lr
 800d68e:	4610      	mov	r0, r2
 800d690:	e7fb      	b.n	800d68a <__ascii_mbtowc+0x16>
 800d692:	f06f 0001 	mvn.w	r0, #1
 800d696:	e7f8      	b.n	800d68a <__ascii_mbtowc+0x16>

0800d698 <_realloc_r>:
 800d698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d69c:	4607      	mov	r7, r0
 800d69e:	4614      	mov	r4, r2
 800d6a0:	460d      	mov	r5, r1
 800d6a2:	b921      	cbnz	r1, 800d6ae <_realloc_r+0x16>
 800d6a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6a8:	4611      	mov	r1, r2
 800d6aa:	f7ff b97d 	b.w	800c9a8 <_malloc_r>
 800d6ae:	b92a      	cbnz	r2, 800d6bc <_realloc_r+0x24>
 800d6b0:	f7ff f906 	bl	800c8c0 <_free_r>
 800d6b4:	4625      	mov	r5, r4
 800d6b6:	4628      	mov	r0, r5
 800d6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6bc:	f000 f841 	bl	800d742 <_malloc_usable_size_r>
 800d6c0:	4284      	cmp	r4, r0
 800d6c2:	4606      	mov	r6, r0
 800d6c4:	d802      	bhi.n	800d6cc <_realloc_r+0x34>
 800d6c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d6ca:	d8f4      	bhi.n	800d6b6 <_realloc_r+0x1e>
 800d6cc:	4621      	mov	r1, r4
 800d6ce:	4638      	mov	r0, r7
 800d6d0:	f7ff f96a 	bl	800c9a8 <_malloc_r>
 800d6d4:	4680      	mov	r8, r0
 800d6d6:	b908      	cbnz	r0, 800d6dc <_realloc_r+0x44>
 800d6d8:	4645      	mov	r5, r8
 800d6da:	e7ec      	b.n	800d6b6 <_realloc_r+0x1e>
 800d6dc:	42b4      	cmp	r4, r6
 800d6de:	4622      	mov	r2, r4
 800d6e0:	4629      	mov	r1, r5
 800d6e2:	bf28      	it	cs
 800d6e4:	4632      	movcs	r2, r6
 800d6e6:	f7fe fa84 	bl	800bbf2 <memcpy>
 800d6ea:	4629      	mov	r1, r5
 800d6ec:	4638      	mov	r0, r7
 800d6ee:	f7ff f8e7 	bl	800c8c0 <_free_r>
 800d6f2:	e7f1      	b.n	800d6d8 <_realloc_r+0x40>

0800d6f4 <__ascii_wctomb>:
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	4608      	mov	r0, r1
 800d6f8:	b141      	cbz	r1, 800d70c <__ascii_wctomb+0x18>
 800d6fa:	2aff      	cmp	r2, #255	@ 0xff
 800d6fc:	d904      	bls.n	800d708 <__ascii_wctomb+0x14>
 800d6fe:	228a      	movs	r2, #138	@ 0x8a
 800d700:	601a      	str	r2, [r3, #0]
 800d702:	f04f 30ff 	mov.w	r0, #4294967295
 800d706:	4770      	bx	lr
 800d708:	700a      	strb	r2, [r1, #0]
 800d70a:	2001      	movs	r0, #1
 800d70c:	4770      	bx	lr
	...

0800d710 <fiprintf>:
 800d710:	b40e      	push	{r1, r2, r3}
 800d712:	b503      	push	{r0, r1, lr}
 800d714:	4601      	mov	r1, r0
 800d716:	ab03      	add	r3, sp, #12
 800d718:	4805      	ldr	r0, [pc, #20]	@ (800d730 <fiprintf+0x20>)
 800d71a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d71e:	6800      	ldr	r0, [r0, #0]
 800d720:	9301      	str	r3, [sp, #4]
 800d722:	f000 f83f 	bl	800d7a4 <_vfiprintf_r>
 800d726:	b002      	add	sp, #8
 800d728:	f85d eb04 	ldr.w	lr, [sp], #4
 800d72c:	b003      	add	sp, #12
 800d72e:	4770      	bx	lr
 800d730:	2000001c 	.word	0x2000001c

0800d734 <abort>:
 800d734:	b508      	push	{r3, lr}
 800d736:	2006      	movs	r0, #6
 800d738:	f000 fa08 	bl	800db4c <raise>
 800d73c:	2001      	movs	r0, #1
 800d73e:	f7f4 fdd1 	bl	80022e4 <_exit>

0800d742 <_malloc_usable_size_r>:
 800d742:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d746:	1f18      	subs	r0, r3, #4
 800d748:	2b00      	cmp	r3, #0
 800d74a:	bfbc      	itt	lt
 800d74c:	580b      	ldrlt	r3, [r1, r0]
 800d74e:	18c0      	addlt	r0, r0, r3
 800d750:	4770      	bx	lr

0800d752 <__sfputc_r>:
 800d752:	6893      	ldr	r3, [r2, #8]
 800d754:	3b01      	subs	r3, #1
 800d756:	2b00      	cmp	r3, #0
 800d758:	b410      	push	{r4}
 800d75a:	6093      	str	r3, [r2, #8]
 800d75c:	da08      	bge.n	800d770 <__sfputc_r+0x1e>
 800d75e:	6994      	ldr	r4, [r2, #24]
 800d760:	42a3      	cmp	r3, r4
 800d762:	db01      	blt.n	800d768 <__sfputc_r+0x16>
 800d764:	290a      	cmp	r1, #10
 800d766:	d103      	bne.n	800d770 <__sfputc_r+0x1e>
 800d768:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d76c:	f000 b932 	b.w	800d9d4 <__swbuf_r>
 800d770:	6813      	ldr	r3, [r2, #0]
 800d772:	1c58      	adds	r0, r3, #1
 800d774:	6010      	str	r0, [r2, #0]
 800d776:	7019      	strb	r1, [r3, #0]
 800d778:	4608      	mov	r0, r1
 800d77a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <__sfputs_r>:
 800d780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d782:	4606      	mov	r6, r0
 800d784:	460f      	mov	r7, r1
 800d786:	4614      	mov	r4, r2
 800d788:	18d5      	adds	r5, r2, r3
 800d78a:	42ac      	cmp	r4, r5
 800d78c:	d101      	bne.n	800d792 <__sfputs_r+0x12>
 800d78e:	2000      	movs	r0, #0
 800d790:	e007      	b.n	800d7a2 <__sfputs_r+0x22>
 800d792:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d796:	463a      	mov	r2, r7
 800d798:	4630      	mov	r0, r6
 800d79a:	f7ff ffda 	bl	800d752 <__sfputc_r>
 800d79e:	1c43      	adds	r3, r0, #1
 800d7a0:	d1f3      	bne.n	800d78a <__sfputs_r+0xa>
 800d7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d7a4 <_vfiprintf_r>:
 800d7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a8:	460d      	mov	r5, r1
 800d7aa:	b09d      	sub	sp, #116	@ 0x74
 800d7ac:	4614      	mov	r4, r2
 800d7ae:	4698      	mov	r8, r3
 800d7b0:	4606      	mov	r6, r0
 800d7b2:	b118      	cbz	r0, 800d7bc <_vfiprintf_r+0x18>
 800d7b4:	6a03      	ldr	r3, [r0, #32]
 800d7b6:	b90b      	cbnz	r3, 800d7bc <_vfiprintf_r+0x18>
 800d7b8:	f7fe f900 	bl	800b9bc <__sinit>
 800d7bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7be:	07d9      	lsls	r1, r3, #31
 800d7c0:	d405      	bmi.n	800d7ce <_vfiprintf_r+0x2a>
 800d7c2:	89ab      	ldrh	r3, [r5, #12]
 800d7c4:	059a      	lsls	r2, r3, #22
 800d7c6:	d402      	bmi.n	800d7ce <_vfiprintf_r+0x2a>
 800d7c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7ca:	f7fe fa10 	bl	800bbee <__retarget_lock_acquire_recursive>
 800d7ce:	89ab      	ldrh	r3, [r5, #12]
 800d7d0:	071b      	lsls	r3, r3, #28
 800d7d2:	d501      	bpl.n	800d7d8 <_vfiprintf_r+0x34>
 800d7d4:	692b      	ldr	r3, [r5, #16]
 800d7d6:	b99b      	cbnz	r3, 800d800 <_vfiprintf_r+0x5c>
 800d7d8:	4629      	mov	r1, r5
 800d7da:	4630      	mov	r0, r6
 800d7dc:	f000 f938 	bl	800da50 <__swsetup_r>
 800d7e0:	b170      	cbz	r0, 800d800 <_vfiprintf_r+0x5c>
 800d7e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d7e4:	07dc      	lsls	r4, r3, #31
 800d7e6:	d504      	bpl.n	800d7f2 <_vfiprintf_r+0x4e>
 800d7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ec:	b01d      	add	sp, #116	@ 0x74
 800d7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f2:	89ab      	ldrh	r3, [r5, #12]
 800d7f4:	0598      	lsls	r0, r3, #22
 800d7f6:	d4f7      	bmi.n	800d7e8 <_vfiprintf_r+0x44>
 800d7f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d7fa:	f7fe f9f9 	bl	800bbf0 <__retarget_lock_release_recursive>
 800d7fe:	e7f3      	b.n	800d7e8 <_vfiprintf_r+0x44>
 800d800:	2300      	movs	r3, #0
 800d802:	9309      	str	r3, [sp, #36]	@ 0x24
 800d804:	2320      	movs	r3, #32
 800d806:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d80a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d80e:	2330      	movs	r3, #48	@ 0x30
 800d810:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d9c0 <_vfiprintf_r+0x21c>
 800d814:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d818:	f04f 0901 	mov.w	r9, #1
 800d81c:	4623      	mov	r3, r4
 800d81e:	469a      	mov	sl, r3
 800d820:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d824:	b10a      	cbz	r2, 800d82a <_vfiprintf_r+0x86>
 800d826:	2a25      	cmp	r2, #37	@ 0x25
 800d828:	d1f9      	bne.n	800d81e <_vfiprintf_r+0x7a>
 800d82a:	ebba 0b04 	subs.w	fp, sl, r4
 800d82e:	d00b      	beq.n	800d848 <_vfiprintf_r+0xa4>
 800d830:	465b      	mov	r3, fp
 800d832:	4622      	mov	r2, r4
 800d834:	4629      	mov	r1, r5
 800d836:	4630      	mov	r0, r6
 800d838:	f7ff ffa2 	bl	800d780 <__sfputs_r>
 800d83c:	3001      	adds	r0, #1
 800d83e:	f000 80a7 	beq.w	800d990 <_vfiprintf_r+0x1ec>
 800d842:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d844:	445a      	add	r2, fp
 800d846:	9209      	str	r2, [sp, #36]	@ 0x24
 800d848:	f89a 3000 	ldrb.w	r3, [sl]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	f000 809f 	beq.w	800d990 <_vfiprintf_r+0x1ec>
 800d852:	2300      	movs	r3, #0
 800d854:	f04f 32ff 	mov.w	r2, #4294967295
 800d858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d85c:	f10a 0a01 	add.w	sl, sl, #1
 800d860:	9304      	str	r3, [sp, #16]
 800d862:	9307      	str	r3, [sp, #28]
 800d864:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d868:	931a      	str	r3, [sp, #104]	@ 0x68
 800d86a:	4654      	mov	r4, sl
 800d86c:	2205      	movs	r2, #5
 800d86e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d872:	4853      	ldr	r0, [pc, #332]	@ (800d9c0 <_vfiprintf_r+0x21c>)
 800d874:	f7f2 fcbc 	bl	80001f0 <memchr>
 800d878:	9a04      	ldr	r2, [sp, #16]
 800d87a:	b9d8      	cbnz	r0, 800d8b4 <_vfiprintf_r+0x110>
 800d87c:	06d1      	lsls	r1, r2, #27
 800d87e:	bf44      	itt	mi
 800d880:	2320      	movmi	r3, #32
 800d882:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d886:	0713      	lsls	r3, r2, #28
 800d888:	bf44      	itt	mi
 800d88a:	232b      	movmi	r3, #43	@ 0x2b
 800d88c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d890:	f89a 3000 	ldrb.w	r3, [sl]
 800d894:	2b2a      	cmp	r3, #42	@ 0x2a
 800d896:	d015      	beq.n	800d8c4 <_vfiprintf_r+0x120>
 800d898:	9a07      	ldr	r2, [sp, #28]
 800d89a:	4654      	mov	r4, sl
 800d89c:	2000      	movs	r0, #0
 800d89e:	f04f 0c0a 	mov.w	ip, #10
 800d8a2:	4621      	mov	r1, r4
 800d8a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8a8:	3b30      	subs	r3, #48	@ 0x30
 800d8aa:	2b09      	cmp	r3, #9
 800d8ac:	d94b      	bls.n	800d946 <_vfiprintf_r+0x1a2>
 800d8ae:	b1b0      	cbz	r0, 800d8de <_vfiprintf_r+0x13a>
 800d8b0:	9207      	str	r2, [sp, #28]
 800d8b2:	e014      	b.n	800d8de <_vfiprintf_r+0x13a>
 800d8b4:	eba0 0308 	sub.w	r3, r0, r8
 800d8b8:	fa09 f303 	lsl.w	r3, r9, r3
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	9304      	str	r3, [sp, #16]
 800d8c0:	46a2      	mov	sl, r4
 800d8c2:	e7d2      	b.n	800d86a <_vfiprintf_r+0xc6>
 800d8c4:	9b03      	ldr	r3, [sp, #12]
 800d8c6:	1d19      	adds	r1, r3, #4
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	9103      	str	r1, [sp, #12]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	bfbb      	ittet	lt
 800d8d0:	425b      	neglt	r3, r3
 800d8d2:	f042 0202 	orrlt.w	r2, r2, #2
 800d8d6:	9307      	strge	r3, [sp, #28]
 800d8d8:	9307      	strlt	r3, [sp, #28]
 800d8da:	bfb8      	it	lt
 800d8dc:	9204      	strlt	r2, [sp, #16]
 800d8de:	7823      	ldrb	r3, [r4, #0]
 800d8e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8e2:	d10a      	bne.n	800d8fa <_vfiprintf_r+0x156>
 800d8e4:	7863      	ldrb	r3, [r4, #1]
 800d8e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8e8:	d132      	bne.n	800d950 <_vfiprintf_r+0x1ac>
 800d8ea:	9b03      	ldr	r3, [sp, #12]
 800d8ec:	1d1a      	adds	r2, r3, #4
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	9203      	str	r2, [sp, #12]
 800d8f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d8f6:	3402      	adds	r4, #2
 800d8f8:	9305      	str	r3, [sp, #20]
 800d8fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d9d0 <_vfiprintf_r+0x22c>
 800d8fe:	7821      	ldrb	r1, [r4, #0]
 800d900:	2203      	movs	r2, #3
 800d902:	4650      	mov	r0, sl
 800d904:	f7f2 fc74 	bl	80001f0 <memchr>
 800d908:	b138      	cbz	r0, 800d91a <_vfiprintf_r+0x176>
 800d90a:	9b04      	ldr	r3, [sp, #16]
 800d90c:	eba0 000a 	sub.w	r0, r0, sl
 800d910:	2240      	movs	r2, #64	@ 0x40
 800d912:	4082      	lsls	r2, r0
 800d914:	4313      	orrs	r3, r2
 800d916:	3401      	adds	r4, #1
 800d918:	9304      	str	r3, [sp, #16]
 800d91a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d91e:	4829      	ldr	r0, [pc, #164]	@ (800d9c4 <_vfiprintf_r+0x220>)
 800d920:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d924:	2206      	movs	r2, #6
 800d926:	f7f2 fc63 	bl	80001f0 <memchr>
 800d92a:	2800      	cmp	r0, #0
 800d92c:	d03f      	beq.n	800d9ae <_vfiprintf_r+0x20a>
 800d92e:	4b26      	ldr	r3, [pc, #152]	@ (800d9c8 <_vfiprintf_r+0x224>)
 800d930:	bb1b      	cbnz	r3, 800d97a <_vfiprintf_r+0x1d6>
 800d932:	9b03      	ldr	r3, [sp, #12]
 800d934:	3307      	adds	r3, #7
 800d936:	f023 0307 	bic.w	r3, r3, #7
 800d93a:	3308      	adds	r3, #8
 800d93c:	9303      	str	r3, [sp, #12]
 800d93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d940:	443b      	add	r3, r7
 800d942:	9309      	str	r3, [sp, #36]	@ 0x24
 800d944:	e76a      	b.n	800d81c <_vfiprintf_r+0x78>
 800d946:	fb0c 3202 	mla	r2, ip, r2, r3
 800d94a:	460c      	mov	r4, r1
 800d94c:	2001      	movs	r0, #1
 800d94e:	e7a8      	b.n	800d8a2 <_vfiprintf_r+0xfe>
 800d950:	2300      	movs	r3, #0
 800d952:	3401      	adds	r4, #1
 800d954:	9305      	str	r3, [sp, #20]
 800d956:	4619      	mov	r1, r3
 800d958:	f04f 0c0a 	mov.w	ip, #10
 800d95c:	4620      	mov	r0, r4
 800d95e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d962:	3a30      	subs	r2, #48	@ 0x30
 800d964:	2a09      	cmp	r2, #9
 800d966:	d903      	bls.n	800d970 <_vfiprintf_r+0x1cc>
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d0c6      	beq.n	800d8fa <_vfiprintf_r+0x156>
 800d96c:	9105      	str	r1, [sp, #20]
 800d96e:	e7c4      	b.n	800d8fa <_vfiprintf_r+0x156>
 800d970:	fb0c 2101 	mla	r1, ip, r1, r2
 800d974:	4604      	mov	r4, r0
 800d976:	2301      	movs	r3, #1
 800d978:	e7f0      	b.n	800d95c <_vfiprintf_r+0x1b8>
 800d97a:	ab03      	add	r3, sp, #12
 800d97c:	9300      	str	r3, [sp, #0]
 800d97e:	462a      	mov	r2, r5
 800d980:	4b12      	ldr	r3, [pc, #72]	@ (800d9cc <_vfiprintf_r+0x228>)
 800d982:	a904      	add	r1, sp, #16
 800d984:	4630      	mov	r0, r6
 800d986:	f7fd fbd7 	bl	800b138 <_printf_float>
 800d98a:	4607      	mov	r7, r0
 800d98c:	1c78      	adds	r0, r7, #1
 800d98e:	d1d6      	bne.n	800d93e <_vfiprintf_r+0x19a>
 800d990:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d992:	07d9      	lsls	r1, r3, #31
 800d994:	d405      	bmi.n	800d9a2 <_vfiprintf_r+0x1fe>
 800d996:	89ab      	ldrh	r3, [r5, #12]
 800d998:	059a      	lsls	r2, r3, #22
 800d99a:	d402      	bmi.n	800d9a2 <_vfiprintf_r+0x1fe>
 800d99c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d99e:	f7fe f927 	bl	800bbf0 <__retarget_lock_release_recursive>
 800d9a2:	89ab      	ldrh	r3, [r5, #12]
 800d9a4:	065b      	lsls	r3, r3, #25
 800d9a6:	f53f af1f 	bmi.w	800d7e8 <_vfiprintf_r+0x44>
 800d9aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9ac:	e71e      	b.n	800d7ec <_vfiprintf_r+0x48>
 800d9ae:	ab03      	add	r3, sp, #12
 800d9b0:	9300      	str	r3, [sp, #0]
 800d9b2:	462a      	mov	r2, r5
 800d9b4:	4b05      	ldr	r3, [pc, #20]	@ (800d9cc <_vfiprintf_r+0x228>)
 800d9b6:	a904      	add	r1, sp, #16
 800d9b8:	4630      	mov	r0, r6
 800d9ba:	f7fd fe55 	bl	800b668 <_printf_i>
 800d9be:	e7e4      	b.n	800d98a <_vfiprintf_r+0x1e6>
 800d9c0:	0800e59e 	.word	0x0800e59e
 800d9c4:	0800e5a8 	.word	0x0800e5a8
 800d9c8:	0800b139 	.word	0x0800b139
 800d9cc:	0800d781 	.word	0x0800d781
 800d9d0:	0800e5a4 	.word	0x0800e5a4

0800d9d4 <__swbuf_r>:
 800d9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d6:	460e      	mov	r6, r1
 800d9d8:	4614      	mov	r4, r2
 800d9da:	4605      	mov	r5, r0
 800d9dc:	b118      	cbz	r0, 800d9e6 <__swbuf_r+0x12>
 800d9de:	6a03      	ldr	r3, [r0, #32]
 800d9e0:	b90b      	cbnz	r3, 800d9e6 <__swbuf_r+0x12>
 800d9e2:	f7fd ffeb 	bl	800b9bc <__sinit>
 800d9e6:	69a3      	ldr	r3, [r4, #24]
 800d9e8:	60a3      	str	r3, [r4, #8]
 800d9ea:	89a3      	ldrh	r3, [r4, #12]
 800d9ec:	071a      	lsls	r2, r3, #28
 800d9ee:	d501      	bpl.n	800d9f4 <__swbuf_r+0x20>
 800d9f0:	6923      	ldr	r3, [r4, #16]
 800d9f2:	b943      	cbnz	r3, 800da06 <__swbuf_r+0x32>
 800d9f4:	4621      	mov	r1, r4
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	f000 f82a 	bl	800da50 <__swsetup_r>
 800d9fc:	b118      	cbz	r0, 800da06 <__swbuf_r+0x32>
 800d9fe:	f04f 37ff 	mov.w	r7, #4294967295
 800da02:	4638      	mov	r0, r7
 800da04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800da06:	6823      	ldr	r3, [r4, #0]
 800da08:	6922      	ldr	r2, [r4, #16]
 800da0a:	1a98      	subs	r0, r3, r2
 800da0c:	6963      	ldr	r3, [r4, #20]
 800da0e:	b2f6      	uxtb	r6, r6
 800da10:	4283      	cmp	r3, r0
 800da12:	4637      	mov	r7, r6
 800da14:	dc05      	bgt.n	800da22 <__swbuf_r+0x4e>
 800da16:	4621      	mov	r1, r4
 800da18:	4628      	mov	r0, r5
 800da1a:	f7ff fda7 	bl	800d56c <_fflush_r>
 800da1e:	2800      	cmp	r0, #0
 800da20:	d1ed      	bne.n	800d9fe <__swbuf_r+0x2a>
 800da22:	68a3      	ldr	r3, [r4, #8]
 800da24:	3b01      	subs	r3, #1
 800da26:	60a3      	str	r3, [r4, #8]
 800da28:	6823      	ldr	r3, [r4, #0]
 800da2a:	1c5a      	adds	r2, r3, #1
 800da2c:	6022      	str	r2, [r4, #0]
 800da2e:	701e      	strb	r6, [r3, #0]
 800da30:	6962      	ldr	r2, [r4, #20]
 800da32:	1c43      	adds	r3, r0, #1
 800da34:	429a      	cmp	r2, r3
 800da36:	d004      	beq.n	800da42 <__swbuf_r+0x6e>
 800da38:	89a3      	ldrh	r3, [r4, #12]
 800da3a:	07db      	lsls	r3, r3, #31
 800da3c:	d5e1      	bpl.n	800da02 <__swbuf_r+0x2e>
 800da3e:	2e0a      	cmp	r6, #10
 800da40:	d1df      	bne.n	800da02 <__swbuf_r+0x2e>
 800da42:	4621      	mov	r1, r4
 800da44:	4628      	mov	r0, r5
 800da46:	f7ff fd91 	bl	800d56c <_fflush_r>
 800da4a:	2800      	cmp	r0, #0
 800da4c:	d0d9      	beq.n	800da02 <__swbuf_r+0x2e>
 800da4e:	e7d6      	b.n	800d9fe <__swbuf_r+0x2a>

0800da50 <__swsetup_r>:
 800da50:	b538      	push	{r3, r4, r5, lr}
 800da52:	4b29      	ldr	r3, [pc, #164]	@ (800daf8 <__swsetup_r+0xa8>)
 800da54:	4605      	mov	r5, r0
 800da56:	6818      	ldr	r0, [r3, #0]
 800da58:	460c      	mov	r4, r1
 800da5a:	b118      	cbz	r0, 800da64 <__swsetup_r+0x14>
 800da5c:	6a03      	ldr	r3, [r0, #32]
 800da5e:	b90b      	cbnz	r3, 800da64 <__swsetup_r+0x14>
 800da60:	f7fd ffac 	bl	800b9bc <__sinit>
 800da64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da68:	0719      	lsls	r1, r3, #28
 800da6a:	d422      	bmi.n	800dab2 <__swsetup_r+0x62>
 800da6c:	06da      	lsls	r2, r3, #27
 800da6e:	d407      	bmi.n	800da80 <__swsetup_r+0x30>
 800da70:	2209      	movs	r2, #9
 800da72:	602a      	str	r2, [r5, #0]
 800da74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da78:	81a3      	strh	r3, [r4, #12]
 800da7a:	f04f 30ff 	mov.w	r0, #4294967295
 800da7e:	e033      	b.n	800dae8 <__swsetup_r+0x98>
 800da80:	0758      	lsls	r0, r3, #29
 800da82:	d512      	bpl.n	800daaa <__swsetup_r+0x5a>
 800da84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da86:	b141      	cbz	r1, 800da9a <__swsetup_r+0x4a>
 800da88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da8c:	4299      	cmp	r1, r3
 800da8e:	d002      	beq.n	800da96 <__swsetup_r+0x46>
 800da90:	4628      	mov	r0, r5
 800da92:	f7fe ff15 	bl	800c8c0 <_free_r>
 800da96:	2300      	movs	r3, #0
 800da98:	6363      	str	r3, [r4, #52]	@ 0x34
 800da9a:	89a3      	ldrh	r3, [r4, #12]
 800da9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800daa0:	81a3      	strh	r3, [r4, #12]
 800daa2:	2300      	movs	r3, #0
 800daa4:	6063      	str	r3, [r4, #4]
 800daa6:	6923      	ldr	r3, [r4, #16]
 800daa8:	6023      	str	r3, [r4, #0]
 800daaa:	89a3      	ldrh	r3, [r4, #12]
 800daac:	f043 0308 	orr.w	r3, r3, #8
 800dab0:	81a3      	strh	r3, [r4, #12]
 800dab2:	6923      	ldr	r3, [r4, #16]
 800dab4:	b94b      	cbnz	r3, 800daca <__swsetup_r+0x7a>
 800dab6:	89a3      	ldrh	r3, [r4, #12]
 800dab8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800dabc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dac0:	d003      	beq.n	800daca <__swsetup_r+0x7a>
 800dac2:	4621      	mov	r1, r4
 800dac4:	4628      	mov	r0, r5
 800dac6:	f000 f883 	bl	800dbd0 <__smakebuf_r>
 800daca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dace:	f013 0201 	ands.w	r2, r3, #1
 800dad2:	d00a      	beq.n	800daea <__swsetup_r+0x9a>
 800dad4:	2200      	movs	r2, #0
 800dad6:	60a2      	str	r2, [r4, #8]
 800dad8:	6962      	ldr	r2, [r4, #20]
 800dada:	4252      	negs	r2, r2
 800dadc:	61a2      	str	r2, [r4, #24]
 800dade:	6922      	ldr	r2, [r4, #16]
 800dae0:	b942      	cbnz	r2, 800daf4 <__swsetup_r+0xa4>
 800dae2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800dae6:	d1c5      	bne.n	800da74 <__swsetup_r+0x24>
 800dae8:	bd38      	pop	{r3, r4, r5, pc}
 800daea:	0799      	lsls	r1, r3, #30
 800daec:	bf58      	it	pl
 800daee:	6962      	ldrpl	r2, [r4, #20]
 800daf0:	60a2      	str	r2, [r4, #8]
 800daf2:	e7f4      	b.n	800dade <__swsetup_r+0x8e>
 800daf4:	2000      	movs	r0, #0
 800daf6:	e7f7      	b.n	800dae8 <__swsetup_r+0x98>
 800daf8:	2000001c 	.word	0x2000001c

0800dafc <_raise_r>:
 800dafc:	291f      	cmp	r1, #31
 800dafe:	b538      	push	{r3, r4, r5, lr}
 800db00:	4605      	mov	r5, r0
 800db02:	460c      	mov	r4, r1
 800db04:	d904      	bls.n	800db10 <_raise_r+0x14>
 800db06:	2316      	movs	r3, #22
 800db08:	6003      	str	r3, [r0, #0]
 800db0a:	f04f 30ff 	mov.w	r0, #4294967295
 800db0e:	bd38      	pop	{r3, r4, r5, pc}
 800db10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800db12:	b112      	cbz	r2, 800db1a <_raise_r+0x1e>
 800db14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800db18:	b94b      	cbnz	r3, 800db2e <_raise_r+0x32>
 800db1a:	4628      	mov	r0, r5
 800db1c:	f000 f830 	bl	800db80 <_getpid_r>
 800db20:	4622      	mov	r2, r4
 800db22:	4601      	mov	r1, r0
 800db24:	4628      	mov	r0, r5
 800db26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db2a:	f000 b817 	b.w	800db5c <_kill_r>
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d00a      	beq.n	800db48 <_raise_r+0x4c>
 800db32:	1c59      	adds	r1, r3, #1
 800db34:	d103      	bne.n	800db3e <_raise_r+0x42>
 800db36:	2316      	movs	r3, #22
 800db38:	6003      	str	r3, [r0, #0]
 800db3a:	2001      	movs	r0, #1
 800db3c:	e7e7      	b.n	800db0e <_raise_r+0x12>
 800db3e:	2100      	movs	r1, #0
 800db40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800db44:	4620      	mov	r0, r4
 800db46:	4798      	blx	r3
 800db48:	2000      	movs	r0, #0
 800db4a:	e7e0      	b.n	800db0e <_raise_r+0x12>

0800db4c <raise>:
 800db4c:	4b02      	ldr	r3, [pc, #8]	@ (800db58 <raise+0xc>)
 800db4e:	4601      	mov	r1, r0
 800db50:	6818      	ldr	r0, [r3, #0]
 800db52:	f7ff bfd3 	b.w	800dafc <_raise_r>
 800db56:	bf00      	nop
 800db58:	2000001c 	.word	0x2000001c

0800db5c <_kill_r>:
 800db5c:	b538      	push	{r3, r4, r5, lr}
 800db5e:	4d07      	ldr	r5, [pc, #28]	@ (800db7c <_kill_r+0x20>)
 800db60:	2300      	movs	r3, #0
 800db62:	4604      	mov	r4, r0
 800db64:	4608      	mov	r0, r1
 800db66:	4611      	mov	r1, r2
 800db68:	602b      	str	r3, [r5, #0]
 800db6a:	f7f4 fbab 	bl	80022c4 <_kill>
 800db6e:	1c43      	adds	r3, r0, #1
 800db70:	d102      	bne.n	800db78 <_kill_r+0x1c>
 800db72:	682b      	ldr	r3, [r5, #0]
 800db74:	b103      	cbz	r3, 800db78 <_kill_r+0x1c>
 800db76:	6023      	str	r3, [r4, #0]
 800db78:	bd38      	pop	{r3, r4, r5, pc}
 800db7a:	bf00      	nop
 800db7c:	20004f94 	.word	0x20004f94

0800db80 <_getpid_r>:
 800db80:	f7f4 bb98 	b.w	80022b4 <_getpid>

0800db84 <__swhatbuf_r>:
 800db84:	b570      	push	{r4, r5, r6, lr}
 800db86:	460c      	mov	r4, r1
 800db88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db8c:	2900      	cmp	r1, #0
 800db8e:	b096      	sub	sp, #88	@ 0x58
 800db90:	4615      	mov	r5, r2
 800db92:	461e      	mov	r6, r3
 800db94:	da0d      	bge.n	800dbb2 <__swhatbuf_r+0x2e>
 800db96:	89a3      	ldrh	r3, [r4, #12]
 800db98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800db9c:	f04f 0100 	mov.w	r1, #0
 800dba0:	bf14      	ite	ne
 800dba2:	2340      	movne	r3, #64	@ 0x40
 800dba4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dba8:	2000      	movs	r0, #0
 800dbaa:	6031      	str	r1, [r6, #0]
 800dbac:	602b      	str	r3, [r5, #0]
 800dbae:	b016      	add	sp, #88	@ 0x58
 800dbb0:	bd70      	pop	{r4, r5, r6, pc}
 800dbb2:	466a      	mov	r2, sp
 800dbb4:	f000 f848 	bl	800dc48 <_fstat_r>
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	dbec      	blt.n	800db96 <__swhatbuf_r+0x12>
 800dbbc:	9901      	ldr	r1, [sp, #4]
 800dbbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dbc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dbc6:	4259      	negs	r1, r3
 800dbc8:	4159      	adcs	r1, r3
 800dbca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dbce:	e7eb      	b.n	800dba8 <__swhatbuf_r+0x24>

0800dbd0 <__smakebuf_r>:
 800dbd0:	898b      	ldrh	r3, [r1, #12]
 800dbd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbd4:	079d      	lsls	r5, r3, #30
 800dbd6:	4606      	mov	r6, r0
 800dbd8:	460c      	mov	r4, r1
 800dbda:	d507      	bpl.n	800dbec <__smakebuf_r+0x1c>
 800dbdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dbe0:	6023      	str	r3, [r4, #0]
 800dbe2:	6123      	str	r3, [r4, #16]
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	6163      	str	r3, [r4, #20]
 800dbe8:	b003      	add	sp, #12
 800dbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbec:	ab01      	add	r3, sp, #4
 800dbee:	466a      	mov	r2, sp
 800dbf0:	f7ff ffc8 	bl	800db84 <__swhatbuf_r>
 800dbf4:	9f00      	ldr	r7, [sp, #0]
 800dbf6:	4605      	mov	r5, r0
 800dbf8:	4639      	mov	r1, r7
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	f7fe fed4 	bl	800c9a8 <_malloc_r>
 800dc00:	b948      	cbnz	r0, 800dc16 <__smakebuf_r+0x46>
 800dc02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc06:	059a      	lsls	r2, r3, #22
 800dc08:	d4ee      	bmi.n	800dbe8 <__smakebuf_r+0x18>
 800dc0a:	f023 0303 	bic.w	r3, r3, #3
 800dc0e:	f043 0302 	orr.w	r3, r3, #2
 800dc12:	81a3      	strh	r3, [r4, #12]
 800dc14:	e7e2      	b.n	800dbdc <__smakebuf_r+0xc>
 800dc16:	89a3      	ldrh	r3, [r4, #12]
 800dc18:	6020      	str	r0, [r4, #0]
 800dc1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc1e:	81a3      	strh	r3, [r4, #12]
 800dc20:	9b01      	ldr	r3, [sp, #4]
 800dc22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dc26:	b15b      	cbz	r3, 800dc40 <__smakebuf_r+0x70>
 800dc28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc2c:	4630      	mov	r0, r6
 800dc2e:	f000 f81d 	bl	800dc6c <_isatty_r>
 800dc32:	b128      	cbz	r0, 800dc40 <__smakebuf_r+0x70>
 800dc34:	89a3      	ldrh	r3, [r4, #12]
 800dc36:	f023 0303 	bic.w	r3, r3, #3
 800dc3a:	f043 0301 	orr.w	r3, r3, #1
 800dc3e:	81a3      	strh	r3, [r4, #12]
 800dc40:	89a3      	ldrh	r3, [r4, #12]
 800dc42:	431d      	orrs	r5, r3
 800dc44:	81a5      	strh	r5, [r4, #12]
 800dc46:	e7cf      	b.n	800dbe8 <__smakebuf_r+0x18>

0800dc48 <_fstat_r>:
 800dc48:	b538      	push	{r3, r4, r5, lr}
 800dc4a:	4d07      	ldr	r5, [pc, #28]	@ (800dc68 <_fstat_r+0x20>)
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	4604      	mov	r4, r0
 800dc50:	4608      	mov	r0, r1
 800dc52:	4611      	mov	r1, r2
 800dc54:	602b      	str	r3, [r5, #0]
 800dc56:	f7f4 fb95 	bl	8002384 <_fstat>
 800dc5a:	1c43      	adds	r3, r0, #1
 800dc5c:	d102      	bne.n	800dc64 <_fstat_r+0x1c>
 800dc5e:	682b      	ldr	r3, [r5, #0]
 800dc60:	b103      	cbz	r3, 800dc64 <_fstat_r+0x1c>
 800dc62:	6023      	str	r3, [r4, #0]
 800dc64:	bd38      	pop	{r3, r4, r5, pc}
 800dc66:	bf00      	nop
 800dc68:	20004f94 	.word	0x20004f94

0800dc6c <_isatty_r>:
 800dc6c:	b538      	push	{r3, r4, r5, lr}
 800dc6e:	4d06      	ldr	r5, [pc, #24]	@ (800dc88 <_isatty_r+0x1c>)
 800dc70:	2300      	movs	r3, #0
 800dc72:	4604      	mov	r4, r0
 800dc74:	4608      	mov	r0, r1
 800dc76:	602b      	str	r3, [r5, #0]
 800dc78:	f7f4 fb94 	bl	80023a4 <_isatty>
 800dc7c:	1c43      	adds	r3, r0, #1
 800dc7e:	d102      	bne.n	800dc86 <_isatty_r+0x1a>
 800dc80:	682b      	ldr	r3, [r5, #0]
 800dc82:	b103      	cbz	r3, 800dc86 <_isatty_r+0x1a>
 800dc84:	6023      	str	r3, [r4, #0]
 800dc86:	bd38      	pop	{r3, r4, r5, pc}
 800dc88:	20004f94 	.word	0x20004f94

0800dc8c <atan2>:
 800dc8c:	f000 b904 	b.w	800de98 <__ieee754_atan2>

0800dc90 <sqrt>:
 800dc90:	b538      	push	{r3, r4, r5, lr}
 800dc92:	ed2d 8b02 	vpush	{d8}
 800dc96:	ec55 4b10 	vmov	r4, r5, d0
 800dc9a:	f000 f825 	bl	800dce8 <__ieee754_sqrt>
 800dc9e:	4622      	mov	r2, r4
 800dca0:	462b      	mov	r3, r5
 800dca2:	4620      	mov	r0, r4
 800dca4:	4629      	mov	r1, r5
 800dca6:	eeb0 8a40 	vmov.f32	s16, s0
 800dcaa:	eef0 8a60 	vmov.f32	s17, s1
 800dcae:	f7f2 ff4d 	bl	8000b4c <__aeabi_dcmpun>
 800dcb2:	b990      	cbnz	r0, 800dcda <sqrt+0x4a>
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	4620      	mov	r0, r4
 800dcba:	4629      	mov	r1, r5
 800dcbc:	f7f2 ff1e 	bl	8000afc <__aeabi_dcmplt>
 800dcc0:	b158      	cbz	r0, 800dcda <sqrt+0x4a>
 800dcc2:	f7fd ff69 	bl	800bb98 <__errno>
 800dcc6:	2321      	movs	r3, #33	@ 0x21
 800dcc8:	6003      	str	r3, [r0, #0]
 800dcca:	2200      	movs	r2, #0
 800dccc:	2300      	movs	r3, #0
 800dcce:	4610      	mov	r0, r2
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	f7f2 fdcb 	bl	800086c <__aeabi_ddiv>
 800dcd6:	ec41 0b18 	vmov	d8, r0, r1
 800dcda:	eeb0 0a48 	vmov.f32	s0, s16
 800dcde:	eef0 0a68 	vmov.f32	s1, s17
 800dce2:	ecbd 8b02 	vpop	{d8}
 800dce6:	bd38      	pop	{r3, r4, r5, pc}

0800dce8 <__ieee754_sqrt>:
 800dce8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcec:	4a66      	ldr	r2, [pc, #408]	@ (800de88 <__ieee754_sqrt+0x1a0>)
 800dcee:	ec55 4b10 	vmov	r4, r5, d0
 800dcf2:	43aa      	bics	r2, r5
 800dcf4:	462b      	mov	r3, r5
 800dcf6:	4621      	mov	r1, r4
 800dcf8:	d110      	bne.n	800dd1c <__ieee754_sqrt+0x34>
 800dcfa:	4622      	mov	r2, r4
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	4629      	mov	r1, r5
 800dd00:	f7f2 fc8a 	bl	8000618 <__aeabi_dmul>
 800dd04:	4602      	mov	r2, r0
 800dd06:	460b      	mov	r3, r1
 800dd08:	4620      	mov	r0, r4
 800dd0a:	4629      	mov	r1, r5
 800dd0c:	f7f2 face 	bl	80002ac <__adddf3>
 800dd10:	4604      	mov	r4, r0
 800dd12:	460d      	mov	r5, r1
 800dd14:	ec45 4b10 	vmov	d0, r4, r5
 800dd18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd1c:	2d00      	cmp	r5, #0
 800dd1e:	dc0e      	bgt.n	800dd3e <__ieee754_sqrt+0x56>
 800dd20:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800dd24:	4322      	orrs	r2, r4
 800dd26:	d0f5      	beq.n	800dd14 <__ieee754_sqrt+0x2c>
 800dd28:	b19d      	cbz	r5, 800dd52 <__ieee754_sqrt+0x6a>
 800dd2a:	4622      	mov	r2, r4
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	4629      	mov	r1, r5
 800dd30:	f7f2 faba 	bl	80002a8 <__aeabi_dsub>
 800dd34:	4602      	mov	r2, r0
 800dd36:	460b      	mov	r3, r1
 800dd38:	f7f2 fd98 	bl	800086c <__aeabi_ddiv>
 800dd3c:	e7e8      	b.n	800dd10 <__ieee754_sqrt+0x28>
 800dd3e:	152a      	asrs	r2, r5, #20
 800dd40:	d115      	bne.n	800dd6e <__ieee754_sqrt+0x86>
 800dd42:	2000      	movs	r0, #0
 800dd44:	e009      	b.n	800dd5a <__ieee754_sqrt+0x72>
 800dd46:	0acb      	lsrs	r3, r1, #11
 800dd48:	3a15      	subs	r2, #21
 800dd4a:	0549      	lsls	r1, r1, #21
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d0fa      	beq.n	800dd46 <__ieee754_sqrt+0x5e>
 800dd50:	e7f7      	b.n	800dd42 <__ieee754_sqrt+0x5a>
 800dd52:	462a      	mov	r2, r5
 800dd54:	e7fa      	b.n	800dd4c <__ieee754_sqrt+0x64>
 800dd56:	005b      	lsls	r3, r3, #1
 800dd58:	3001      	adds	r0, #1
 800dd5a:	02dc      	lsls	r4, r3, #11
 800dd5c:	d5fb      	bpl.n	800dd56 <__ieee754_sqrt+0x6e>
 800dd5e:	1e44      	subs	r4, r0, #1
 800dd60:	1b12      	subs	r2, r2, r4
 800dd62:	f1c0 0420 	rsb	r4, r0, #32
 800dd66:	fa21 f404 	lsr.w	r4, r1, r4
 800dd6a:	4323      	orrs	r3, r4
 800dd6c:	4081      	lsls	r1, r0
 800dd6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd72:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800dd76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd7a:	07d2      	lsls	r2, r2, #31
 800dd7c:	bf5c      	itt	pl
 800dd7e:	005b      	lslpl	r3, r3, #1
 800dd80:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800dd84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dd88:	bf58      	it	pl
 800dd8a:	0049      	lslpl	r1, r1, #1
 800dd8c:	2600      	movs	r6, #0
 800dd8e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800dd92:	107f      	asrs	r7, r7, #1
 800dd94:	0049      	lsls	r1, r1, #1
 800dd96:	2016      	movs	r0, #22
 800dd98:	4632      	mov	r2, r6
 800dd9a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800dd9e:	1915      	adds	r5, r2, r4
 800dda0:	429d      	cmp	r5, r3
 800dda2:	bfde      	ittt	le
 800dda4:	192a      	addle	r2, r5, r4
 800dda6:	1b5b      	suble	r3, r3, r5
 800dda8:	1936      	addle	r6, r6, r4
 800ddaa:	0fcd      	lsrs	r5, r1, #31
 800ddac:	3801      	subs	r0, #1
 800ddae:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800ddb2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ddb6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ddba:	d1f0      	bne.n	800dd9e <__ieee754_sqrt+0xb6>
 800ddbc:	4605      	mov	r5, r0
 800ddbe:	2420      	movs	r4, #32
 800ddc0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	eb0c 0e00 	add.w	lr, ip, r0
 800ddca:	dc02      	bgt.n	800ddd2 <__ieee754_sqrt+0xea>
 800ddcc:	d113      	bne.n	800ddf6 <__ieee754_sqrt+0x10e>
 800ddce:	458e      	cmp	lr, r1
 800ddd0:	d811      	bhi.n	800ddf6 <__ieee754_sqrt+0x10e>
 800ddd2:	f1be 0f00 	cmp.w	lr, #0
 800ddd6:	eb0e 000c 	add.w	r0, lr, ip
 800ddda:	da3f      	bge.n	800de5c <__ieee754_sqrt+0x174>
 800dddc:	2800      	cmp	r0, #0
 800ddde:	db3d      	blt.n	800de5c <__ieee754_sqrt+0x174>
 800dde0:	f102 0801 	add.w	r8, r2, #1
 800dde4:	1a9b      	subs	r3, r3, r2
 800dde6:	458e      	cmp	lr, r1
 800dde8:	bf88      	it	hi
 800ddea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ddee:	eba1 010e 	sub.w	r1, r1, lr
 800ddf2:	4465      	add	r5, ip
 800ddf4:	4642      	mov	r2, r8
 800ddf6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ddfa:	3c01      	subs	r4, #1
 800ddfc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800de00:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800de04:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800de08:	d1dc      	bne.n	800ddc4 <__ieee754_sqrt+0xdc>
 800de0a:	4319      	orrs	r1, r3
 800de0c:	d01b      	beq.n	800de46 <__ieee754_sqrt+0x15e>
 800de0e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800de8c <__ieee754_sqrt+0x1a4>
 800de12:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800de90 <__ieee754_sqrt+0x1a8>
 800de16:	e9da 0100 	ldrd	r0, r1, [sl]
 800de1a:	e9db 2300 	ldrd	r2, r3, [fp]
 800de1e:	f7f2 fa43 	bl	80002a8 <__aeabi_dsub>
 800de22:	e9da 8900 	ldrd	r8, r9, [sl]
 800de26:	4602      	mov	r2, r0
 800de28:	460b      	mov	r3, r1
 800de2a:	4640      	mov	r0, r8
 800de2c:	4649      	mov	r1, r9
 800de2e:	f7f2 fe6f 	bl	8000b10 <__aeabi_dcmple>
 800de32:	b140      	cbz	r0, 800de46 <__ieee754_sqrt+0x15e>
 800de34:	f1b5 3fff 	cmp.w	r5, #4294967295
 800de38:	e9da 0100 	ldrd	r0, r1, [sl]
 800de3c:	e9db 2300 	ldrd	r2, r3, [fp]
 800de40:	d10e      	bne.n	800de60 <__ieee754_sqrt+0x178>
 800de42:	3601      	adds	r6, #1
 800de44:	4625      	mov	r5, r4
 800de46:	1073      	asrs	r3, r6, #1
 800de48:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800de4c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800de50:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800de54:	086b      	lsrs	r3, r5, #1
 800de56:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800de5a:	e759      	b.n	800dd10 <__ieee754_sqrt+0x28>
 800de5c:	4690      	mov	r8, r2
 800de5e:	e7c1      	b.n	800dde4 <__ieee754_sqrt+0xfc>
 800de60:	f7f2 fa24 	bl	80002ac <__adddf3>
 800de64:	e9da 8900 	ldrd	r8, r9, [sl]
 800de68:	4602      	mov	r2, r0
 800de6a:	460b      	mov	r3, r1
 800de6c:	4640      	mov	r0, r8
 800de6e:	4649      	mov	r1, r9
 800de70:	f7f2 fe44 	bl	8000afc <__aeabi_dcmplt>
 800de74:	b120      	cbz	r0, 800de80 <__ieee754_sqrt+0x198>
 800de76:	1cab      	adds	r3, r5, #2
 800de78:	bf08      	it	eq
 800de7a:	3601      	addeq	r6, #1
 800de7c:	3502      	adds	r5, #2
 800de7e:	e7e2      	b.n	800de46 <__ieee754_sqrt+0x15e>
 800de80:	1c6b      	adds	r3, r5, #1
 800de82:	f023 0501 	bic.w	r5, r3, #1
 800de86:	e7de      	b.n	800de46 <__ieee754_sqrt+0x15e>
 800de88:	7ff00000 	.word	0x7ff00000
 800de8c:	0800e808 	.word	0x0800e808
 800de90:	0800e800 	.word	0x0800e800
 800de94:	00000000 	.word	0x00000000

0800de98 <__ieee754_atan2>:
 800de98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de9c:	ec57 6b11 	vmov	r6, r7, d1
 800dea0:	4273      	negs	r3, r6
 800dea2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800e020 <__ieee754_atan2+0x188>
 800dea6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800deaa:	4333      	orrs	r3, r6
 800deac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800deb0:	4543      	cmp	r3, r8
 800deb2:	ec51 0b10 	vmov	r0, r1, d0
 800deb6:	4635      	mov	r5, r6
 800deb8:	d809      	bhi.n	800dece <__ieee754_atan2+0x36>
 800deba:	4244      	negs	r4, r0
 800debc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dec0:	4304      	orrs	r4, r0
 800dec2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800dec6:	4544      	cmp	r4, r8
 800dec8:	468e      	mov	lr, r1
 800deca:	4681      	mov	r9, r0
 800decc:	d907      	bls.n	800dede <__ieee754_atan2+0x46>
 800dece:	4632      	mov	r2, r6
 800ded0:	463b      	mov	r3, r7
 800ded2:	f7f2 f9eb 	bl	80002ac <__adddf3>
 800ded6:	ec41 0b10 	vmov	d0, r0, r1
 800deda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dede:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800dee2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800dee6:	4334      	orrs	r4, r6
 800dee8:	d103      	bne.n	800def2 <__ieee754_atan2+0x5a>
 800deea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800deee:	f000 b89b 	b.w	800e028 <atan>
 800def2:	17bc      	asrs	r4, r7, #30
 800def4:	f004 0402 	and.w	r4, r4, #2
 800def8:	ea53 0909 	orrs.w	r9, r3, r9
 800defc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800df00:	d107      	bne.n	800df12 <__ieee754_atan2+0x7a>
 800df02:	2c02      	cmp	r4, #2
 800df04:	d05f      	beq.n	800dfc6 <__ieee754_atan2+0x12e>
 800df06:	2c03      	cmp	r4, #3
 800df08:	d1e5      	bne.n	800ded6 <__ieee754_atan2+0x3e>
 800df0a:	a143      	add	r1, pc, #268	@ (adr r1, 800e018 <__ieee754_atan2+0x180>)
 800df0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df10:	e7e1      	b.n	800ded6 <__ieee754_atan2+0x3e>
 800df12:	4315      	orrs	r5, r2
 800df14:	d106      	bne.n	800df24 <__ieee754_atan2+0x8c>
 800df16:	f1be 0f00 	cmp.w	lr, #0
 800df1a:	db5f      	blt.n	800dfdc <__ieee754_atan2+0x144>
 800df1c:	a136      	add	r1, pc, #216	@ (adr r1, 800dff8 <__ieee754_atan2+0x160>)
 800df1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df22:	e7d8      	b.n	800ded6 <__ieee754_atan2+0x3e>
 800df24:	4542      	cmp	r2, r8
 800df26:	d10f      	bne.n	800df48 <__ieee754_atan2+0xb0>
 800df28:	4293      	cmp	r3, r2
 800df2a:	f104 34ff 	add.w	r4, r4, #4294967295
 800df2e:	d107      	bne.n	800df40 <__ieee754_atan2+0xa8>
 800df30:	2c02      	cmp	r4, #2
 800df32:	d84c      	bhi.n	800dfce <__ieee754_atan2+0x136>
 800df34:	4b36      	ldr	r3, [pc, #216]	@ (800e010 <__ieee754_atan2+0x178>)
 800df36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800df3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800df3e:	e7ca      	b.n	800ded6 <__ieee754_atan2+0x3e>
 800df40:	2c02      	cmp	r4, #2
 800df42:	d848      	bhi.n	800dfd6 <__ieee754_atan2+0x13e>
 800df44:	4b33      	ldr	r3, [pc, #204]	@ (800e014 <__ieee754_atan2+0x17c>)
 800df46:	e7f6      	b.n	800df36 <__ieee754_atan2+0x9e>
 800df48:	4543      	cmp	r3, r8
 800df4a:	d0e4      	beq.n	800df16 <__ieee754_atan2+0x7e>
 800df4c:	1a9b      	subs	r3, r3, r2
 800df4e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800df52:	ea4f 5223 	mov.w	r2, r3, asr #20
 800df56:	da1e      	bge.n	800df96 <__ieee754_atan2+0xfe>
 800df58:	2f00      	cmp	r7, #0
 800df5a:	da01      	bge.n	800df60 <__ieee754_atan2+0xc8>
 800df5c:	323c      	adds	r2, #60	@ 0x3c
 800df5e:	db1e      	blt.n	800df9e <__ieee754_atan2+0x106>
 800df60:	4632      	mov	r2, r6
 800df62:	463b      	mov	r3, r7
 800df64:	f7f2 fc82 	bl	800086c <__aeabi_ddiv>
 800df68:	ec41 0b10 	vmov	d0, r0, r1
 800df6c:	f000 f9f4 	bl	800e358 <fabs>
 800df70:	f000 f85a 	bl	800e028 <atan>
 800df74:	ec51 0b10 	vmov	r0, r1, d0
 800df78:	2c01      	cmp	r4, #1
 800df7a:	d013      	beq.n	800dfa4 <__ieee754_atan2+0x10c>
 800df7c:	2c02      	cmp	r4, #2
 800df7e:	d015      	beq.n	800dfac <__ieee754_atan2+0x114>
 800df80:	2c00      	cmp	r4, #0
 800df82:	d0a8      	beq.n	800ded6 <__ieee754_atan2+0x3e>
 800df84:	a318      	add	r3, pc, #96	@ (adr r3, 800dfe8 <__ieee754_atan2+0x150>)
 800df86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8a:	f7f2 f98d 	bl	80002a8 <__aeabi_dsub>
 800df8e:	a318      	add	r3, pc, #96	@ (adr r3, 800dff0 <__ieee754_atan2+0x158>)
 800df90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df94:	e014      	b.n	800dfc0 <__ieee754_atan2+0x128>
 800df96:	a118      	add	r1, pc, #96	@ (adr r1, 800dff8 <__ieee754_atan2+0x160>)
 800df98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df9c:	e7ec      	b.n	800df78 <__ieee754_atan2+0xe0>
 800df9e:	2000      	movs	r0, #0
 800dfa0:	2100      	movs	r1, #0
 800dfa2:	e7e9      	b.n	800df78 <__ieee754_atan2+0xe0>
 800dfa4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800dfa8:	4619      	mov	r1, r3
 800dfaa:	e794      	b.n	800ded6 <__ieee754_atan2+0x3e>
 800dfac:	a30e      	add	r3, pc, #56	@ (adr r3, 800dfe8 <__ieee754_atan2+0x150>)
 800dfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfb2:	f7f2 f979 	bl	80002a8 <__aeabi_dsub>
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	460b      	mov	r3, r1
 800dfba:	a10d      	add	r1, pc, #52	@ (adr r1, 800dff0 <__ieee754_atan2+0x158>)
 800dfbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfc0:	f7f2 f972 	bl	80002a8 <__aeabi_dsub>
 800dfc4:	e787      	b.n	800ded6 <__ieee754_atan2+0x3e>
 800dfc6:	a10a      	add	r1, pc, #40	@ (adr r1, 800dff0 <__ieee754_atan2+0x158>)
 800dfc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfcc:	e783      	b.n	800ded6 <__ieee754_atan2+0x3e>
 800dfce:	a10c      	add	r1, pc, #48	@ (adr r1, 800e000 <__ieee754_atan2+0x168>)
 800dfd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfd4:	e77f      	b.n	800ded6 <__ieee754_atan2+0x3e>
 800dfd6:	2000      	movs	r0, #0
 800dfd8:	2100      	movs	r1, #0
 800dfda:	e77c      	b.n	800ded6 <__ieee754_atan2+0x3e>
 800dfdc:	a10a      	add	r1, pc, #40	@ (adr r1, 800e008 <__ieee754_atan2+0x170>)
 800dfde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dfe2:	e778      	b.n	800ded6 <__ieee754_atan2+0x3e>
 800dfe4:	f3af 8000 	nop.w
 800dfe8:	33145c07 	.word	0x33145c07
 800dfec:	3ca1a626 	.word	0x3ca1a626
 800dff0:	54442d18 	.word	0x54442d18
 800dff4:	400921fb 	.word	0x400921fb
 800dff8:	54442d18 	.word	0x54442d18
 800dffc:	3ff921fb 	.word	0x3ff921fb
 800e000:	54442d18 	.word	0x54442d18
 800e004:	3fe921fb 	.word	0x3fe921fb
 800e008:	54442d18 	.word	0x54442d18
 800e00c:	bff921fb 	.word	0xbff921fb
 800e010:	0800e828 	.word	0x0800e828
 800e014:	0800e810 	.word	0x0800e810
 800e018:	54442d18 	.word	0x54442d18
 800e01c:	c00921fb 	.word	0xc00921fb
 800e020:	7ff00000 	.word	0x7ff00000
 800e024:	00000000 	.word	0x00000000

0800e028 <atan>:
 800e028:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e02c:	ec55 4b10 	vmov	r4, r5, d0
 800e030:	4bbf      	ldr	r3, [pc, #764]	@ (800e330 <atan+0x308>)
 800e032:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e036:	429e      	cmp	r6, r3
 800e038:	46ab      	mov	fp, r5
 800e03a:	d918      	bls.n	800e06e <atan+0x46>
 800e03c:	4bbd      	ldr	r3, [pc, #756]	@ (800e334 <atan+0x30c>)
 800e03e:	429e      	cmp	r6, r3
 800e040:	d801      	bhi.n	800e046 <atan+0x1e>
 800e042:	d109      	bne.n	800e058 <atan+0x30>
 800e044:	b144      	cbz	r4, 800e058 <atan+0x30>
 800e046:	4622      	mov	r2, r4
 800e048:	462b      	mov	r3, r5
 800e04a:	4620      	mov	r0, r4
 800e04c:	4629      	mov	r1, r5
 800e04e:	f7f2 f92d 	bl	80002ac <__adddf3>
 800e052:	4604      	mov	r4, r0
 800e054:	460d      	mov	r5, r1
 800e056:	e006      	b.n	800e066 <atan+0x3e>
 800e058:	f1bb 0f00 	cmp.w	fp, #0
 800e05c:	f340 812b 	ble.w	800e2b6 <atan+0x28e>
 800e060:	a597      	add	r5, pc, #604	@ (adr r5, 800e2c0 <atan+0x298>)
 800e062:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e066:	ec45 4b10 	vmov	d0, r4, r5
 800e06a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e06e:	4bb2      	ldr	r3, [pc, #712]	@ (800e338 <atan+0x310>)
 800e070:	429e      	cmp	r6, r3
 800e072:	d813      	bhi.n	800e09c <atan+0x74>
 800e074:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800e078:	429e      	cmp	r6, r3
 800e07a:	d80c      	bhi.n	800e096 <atan+0x6e>
 800e07c:	a392      	add	r3, pc, #584	@ (adr r3, 800e2c8 <atan+0x2a0>)
 800e07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e082:	4620      	mov	r0, r4
 800e084:	4629      	mov	r1, r5
 800e086:	f7f2 f911 	bl	80002ac <__adddf3>
 800e08a:	4bac      	ldr	r3, [pc, #688]	@ (800e33c <atan+0x314>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	f7f2 fd53 	bl	8000b38 <__aeabi_dcmpgt>
 800e092:	2800      	cmp	r0, #0
 800e094:	d1e7      	bne.n	800e066 <atan+0x3e>
 800e096:	f04f 3aff 	mov.w	sl, #4294967295
 800e09a:	e029      	b.n	800e0f0 <atan+0xc8>
 800e09c:	f000 f95c 	bl	800e358 <fabs>
 800e0a0:	4ba7      	ldr	r3, [pc, #668]	@ (800e340 <atan+0x318>)
 800e0a2:	429e      	cmp	r6, r3
 800e0a4:	ec55 4b10 	vmov	r4, r5, d0
 800e0a8:	f200 80bc 	bhi.w	800e224 <atan+0x1fc>
 800e0ac:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e0b0:	429e      	cmp	r6, r3
 800e0b2:	f200 809e 	bhi.w	800e1f2 <atan+0x1ca>
 800e0b6:	4622      	mov	r2, r4
 800e0b8:	462b      	mov	r3, r5
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	4629      	mov	r1, r5
 800e0be:	f7f2 f8f5 	bl	80002ac <__adddf3>
 800e0c2:	4b9e      	ldr	r3, [pc, #632]	@ (800e33c <atan+0x314>)
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	f7f2 f8ef 	bl	80002a8 <__aeabi_dsub>
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	4606      	mov	r6, r0
 800e0ce:	460f      	mov	r7, r1
 800e0d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	4629      	mov	r1, r5
 800e0d8:	f7f2 f8e8 	bl	80002ac <__adddf3>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	460b      	mov	r3, r1
 800e0e0:	4630      	mov	r0, r6
 800e0e2:	4639      	mov	r1, r7
 800e0e4:	f7f2 fbc2 	bl	800086c <__aeabi_ddiv>
 800e0e8:	f04f 0a00 	mov.w	sl, #0
 800e0ec:	4604      	mov	r4, r0
 800e0ee:	460d      	mov	r5, r1
 800e0f0:	4622      	mov	r2, r4
 800e0f2:	462b      	mov	r3, r5
 800e0f4:	4620      	mov	r0, r4
 800e0f6:	4629      	mov	r1, r5
 800e0f8:	f7f2 fa8e 	bl	8000618 <__aeabi_dmul>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	460b      	mov	r3, r1
 800e100:	4680      	mov	r8, r0
 800e102:	4689      	mov	r9, r1
 800e104:	f7f2 fa88 	bl	8000618 <__aeabi_dmul>
 800e108:	a371      	add	r3, pc, #452	@ (adr r3, 800e2d0 <atan+0x2a8>)
 800e10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10e:	4606      	mov	r6, r0
 800e110:	460f      	mov	r7, r1
 800e112:	f7f2 fa81 	bl	8000618 <__aeabi_dmul>
 800e116:	a370      	add	r3, pc, #448	@ (adr r3, 800e2d8 <atan+0x2b0>)
 800e118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11c:	f7f2 f8c6 	bl	80002ac <__adddf3>
 800e120:	4632      	mov	r2, r6
 800e122:	463b      	mov	r3, r7
 800e124:	f7f2 fa78 	bl	8000618 <__aeabi_dmul>
 800e128:	a36d      	add	r3, pc, #436	@ (adr r3, 800e2e0 <atan+0x2b8>)
 800e12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12e:	f7f2 f8bd 	bl	80002ac <__adddf3>
 800e132:	4632      	mov	r2, r6
 800e134:	463b      	mov	r3, r7
 800e136:	f7f2 fa6f 	bl	8000618 <__aeabi_dmul>
 800e13a:	a36b      	add	r3, pc, #428	@ (adr r3, 800e2e8 <atan+0x2c0>)
 800e13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e140:	f7f2 f8b4 	bl	80002ac <__adddf3>
 800e144:	4632      	mov	r2, r6
 800e146:	463b      	mov	r3, r7
 800e148:	f7f2 fa66 	bl	8000618 <__aeabi_dmul>
 800e14c:	a368      	add	r3, pc, #416	@ (adr r3, 800e2f0 <atan+0x2c8>)
 800e14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e152:	f7f2 f8ab 	bl	80002ac <__adddf3>
 800e156:	4632      	mov	r2, r6
 800e158:	463b      	mov	r3, r7
 800e15a:	f7f2 fa5d 	bl	8000618 <__aeabi_dmul>
 800e15e:	a366      	add	r3, pc, #408	@ (adr r3, 800e2f8 <atan+0x2d0>)
 800e160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e164:	f7f2 f8a2 	bl	80002ac <__adddf3>
 800e168:	4642      	mov	r2, r8
 800e16a:	464b      	mov	r3, r9
 800e16c:	f7f2 fa54 	bl	8000618 <__aeabi_dmul>
 800e170:	a363      	add	r3, pc, #396	@ (adr r3, 800e300 <atan+0x2d8>)
 800e172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e176:	4680      	mov	r8, r0
 800e178:	4689      	mov	r9, r1
 800e17a:	4630      	mov	r0, r6
 800e17c:	4639      	mov	r1, r7
 800e17e:	f7f2 fa4b 	bl	8000618 <__aeabi_dmul>
 800e182:	a361      	add	r3, pc, #388	@ (adr r3, 800e308 <atan+0x2e0>)
 800e184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e188:	f7f2 f88e 	bl	80002a8 <__aeabi_dsub>
 800e18c:	4632      	mov	r2, r6
 800e18e:	463b      	mov	r3, r7
 800e190:	f7f2 fa42 	bl	8000618 <__aeabi_dmul>
 800e194:	a35e      	add	r3, pc, #376	@ (adr r3, 800e310 <atan+0x2e8>)
 800e196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19a:	f7f2 f885 	bl	80002a8 <__aeabi_dsub>
 800e19e:	4632      	mov	r2, r6
 800e1a0:	463b      	mov	r3, r7
 800e1a2:	f7f2 fa39 	bl	8000618 <__aeabi_dmul>
 800e1a6:	a35c      	add	r3, pc, #368	@ (adr r3, 800e318 <atan+0x2f0>)
 800e1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ac:	f7f2 f87c 	bl	80002a8 <__aeabi_dsub>
 800e1b0:	4632      	mov	r2, r6
 800e1b2:	463b      	mov	r3, r7
 800e1b4:	f7f2 fa30 	bl	8000618 <__aeabi_dmul>
 800e1b8:	a359      	add	r3, pc, #356	@ (adr r3, 800e320 <atan+0x2f8>)
 800e1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1be:	f7f2 f873 	bl	80002a8 <__aeabi_dsub>
 800e1c2:	4632      	mov	r2, r6
 800e1c4:	463b      	mov	r3, r7
 800e1c6:	f7f2 fa27 	bl	8000618 <__aeabi_dmul>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	460b      	mov	r3, r1
 800e1ce:	4640      	mov	r0, r8
 800e1d0:	4649      	mov	r1, r9
 800e1d2:	f7f2 f86b 	bl	80002ac <__adddf3>
 800e1d6:	4622      	mov	r2, r4
 800e1d8:	462b      	mov	r3, r5
 800e1da:	f7f2 fa1d 	bl	8000618 <__aeabi_dmul>
 800e1de:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e1e2:	4602      	mov	r2, r0
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	d148      	bne.n	800e27a <atan+0x252>
 800e1e8:	4620      	mov	r0, r4
 800e1ea:	4629      	mov	r1, r5
 800e1ec:	f7f2 f85c 	bl	80002a8 <__aeabi_dsub>
 800e1f0:	e72f      	b.n	800e052 <atan+0x2a>
 800e1f2:	4b52      	ldr	r3, [pc, #328]	@ (800e33c <atan+0x314>)
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	4620      	mov	r0, r4
 800e1f8:	4629      	mov	r1, r5
 800e1fa:	f7f2 f855 	bl	80002a8 <__aeabi_dsub>
 800e1fe:	4b4f      	ldr	r3, [pc, #316]	@ (800e33c <atan+0x314>)
 800e200:	4606      	mov	r6, r0
 800e202:	460f      	mov	r7, r1
 800e204:	2200      	movs	r2, #0
 800e206:	4620      	mov	r0, r4
 800e208:	4629      	mov	r1, r5
 800e20a:	f7f2 f84f 	bl	80002ac <__adddf3>
 800e20e:	4602      	mov	r2, r0
 800e210:	460b      	mov	r3, r1
 800e212:	4630      	mov	r0, r6
 800e214:	4639      	mov	r1, r7
 800e216:	f7f2 fb29 	bl	800086c <__aeabi_ddiv>
 800e21a:	f04f 0a01 	mov.w	sl, #1
 800e21e:	4604      	mov	r4, r0
 800e220:	460d      	mov	r5, r1
 800e222:	e765      	b.n	800e0f0 <atan+0xc8>
 800e224:	4b47      	ldr	r3, [pc, #284]	@ (800e344 <atan+0x31c>)
 800e226:	429e      	cmp	r6, r3
 800e228:	d21c      	bcs.n	800e264 <atan+0x23c>
 800e22a:	4b47      	ldr	r3, [pc, #284]	@ (800e348 <atan+0x320>)
 800e22c:	2200      	movs	r2, #0
 800e22e:	4620      	mov	r0, r4
 800e230:	4629      	mov	r1, r5
 800e232:	f7f2 f839 	bl	80002a8 <__aeabi_dsub>
 800e236:	4b44      	ldr	r3, [pc, #272]	@ (800e348 <atan+0x320>)
 800e238:	4606      	mov	r6, r0
 800e23a:	460f      	mov	r7, r1
 800e23c:	2200      	movs	r2, #0
 800e23e:	4620      	mov	r0, r4
 800e240:	4629      	mov	r1, r5
 800e242:	f7f2 f9e9 	bl	8000618 <__aeabi_dmul>
 800e246:	4b3d      	ldr	r3, [pc, #244]	@ (800e33c <atan+0x314>)
 800e248:	2200      	movs	r2, #0
 800e24a:	f7f2 f82f 	bl	80002ac <__adddf3>
 800e24e:	4602      	mov	r2, r0
 800e250:	460b      	mov	r3, r1
 800e252:	4630      	mov	r0, r6
 800e254:	4639      	mov	r1, r7
 800e256:	f7f2 fb09 	bl	800086c <__aeabi_ddiv>
 800e25a:	f04f 0a02 	mov.w	sl, #2
 800e25e:	4604      	mov	r4, r0
 800e260:	460d      	mov	r5, r1
 800e262:	e745      	b.n	800e0f0 <atan+0xc8>
 800e264:	4622      	mov	r2, r4
 800e266:	462b      	mov	r3, r5
 800e268:	4938      	ldr	r1, [pc, #224]	@ (800e34c <atan+0x324>)
 800e26a:	2000      	movs	r0, #0
 800e26c:	f7f2 fafe 	bl	800086c <__aeabi_ddiv>
 800e270:	f04f 0a03 	mov.w	sl, #3
 800e274:	4604      	mov	r4, r0
 800e276:	460d      	mov	r5, r1
 800e278:	e73a      	b.n	800e0f0 <atan+0xc8>
 800e27a:	4b35      	ldr	r3, [pc, #212]	@ (800e350 <atan+0x328>)
 800e27c:	4e35      	ldr	r6, [pc, #212]	@ (800e354 <atan+0x32c>)
 800e27e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e286:	f7f2 f80f 	bl	80002a8 <__aeabi_dsub>
 800e28a:	4622      	mov	r2, r4
 800e28c:	462b      	mov	r3, r5
 800e28e:	f7f2 f80b 	bl	80002a8 <__aeabi_dsub>
 800e292:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e296:	4602      	mov	r2, r0
 800e298:	460b      	mov	r3, r1
 800e29a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e29e:	f7f2 f803 	bl	80002a8 <__aeabi_dsub>
 800e2a2:	f1bb 0f00 	cmp.w	fp, #0
 800e2a6:	4604      	mov	r4, r0
 800e2a8:	460d      	mov	r5, r1
 800e2aa:	f6bf aedc 	bge.w	800e066 <atan+0x3e>
 800e2ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e2b2:	461d      	mov	r5, r3
 800e2b4:	e6d7      	b.n	800e066 <atan+0x3e>
 800e2b6:	a51c      	add	r5, pc, #112	@ (adr r5, 800e328 <atan+0x300>)
 800e2b8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e2bc:	e6d3      	b.n	800e066 <atan+0x3e>
 800e2be:	bf00      	nop
 800e2c0:	54442d18 	.word	0x54442d18
 800e2c4:	3ff921fb 	.word	0x3ff921fb
 800e2c8:	8800759c 	.word	0x8800759c
 800e2cc:	7e37e43c 	.word	0x7e37e43c
 800e2d0:	e322da11 	.word	0xe322da11
 800e2d4:	3f90ad3a 	.word	0x3f90ad3a
 800e2d8:	24760deb 	.word	0x24760deb
 800e2dc:	3fa97b4b 	.word	0x3fa97b4b
 800e2e0:	a0d03d51 	.word	0xa0d03d51
 800e2e4:	3fb10d66 	.word	0x3fb10d66
 800e2e8:	c54c206e 	.word	0xc54c206e
 800e2ec:	3fb745cd 	.word	0x3fb745cd
 800e2f0:	920083ff 	.word	0x920083ff
 800e2f4:	3fc24924 	.word	0x3fc24924
 800e2f8:	5555550d 	.word	0x5555550d
 800e2fc:	3fd55555 	.word	0x3fd55555
 800e300:	2c6a6c2f 	.word	0x2c6a6c2f
 800e304:	bfa2b444 	.word	0xbfa2b444
 800e308:	52defd9a 	.word	0x52defd9a
 800e30c:	3fadde2d 	.word	0x3fadde2d
 800e310:	af749a6d 	.word	0xaf749a6d
 800e314:	3fb3b0f2 	.word	0x3fb3b0f2
 800e318:	fe231671 	.word	0xfe231671
 800e31c:	3fbc71c6 	.word	0x3fbc71c6
 800e320:	9998ebc4 	.word	0x9998ebc4
 800e324:	3fc99999 	.word	0x3fc99999
 800e328:	54442d18 	.word	0x54442d18
 800e32c:	bff921fb 	.word	0xbff921fb
 800e330:	440fffff 	.word	0x440fffff
 800e334:	7ff00000 	.word	0x7ff00000
 800e338:	3fdbffff 	.word	0x3fdbffff
 800e33c:	3ff00000 	.word	0x3ff00000
 800e340:	3ff2ffff 	.word	0x3ff2ffff
 800e344:	40038000 	.word	0x40038000
 800e348:	3ff80000 	.word	0x3ff80000
 800e34c:	bff00000 	.word	0xbff00000
 800e350:	0800e840 	.word	0x0800e840
 800e354:	0800e860 	.word	0x0800e860

0800e358 <fabs>:
 800e358:	ec51 0b10 	vmov	r0, r1, d0
 800e35c:	4602      	mov	r2, r0
 800e35e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e362:	ec43 2b10 	vmov	d0, r2, r3
 800e366:	4770      	bx	lr

0800e368 <_init>:
 800e368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e36a:	bf00      	nop
 800e36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e36e:	bc08      	pop	{r3}
 800e370:	469e      	mov	lr, r3
 800e372:	4770      	bx	lr

0800e374 <_fini>:
 800e374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e376:	bf00      	nop
 800e378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e37a:	bc08      	pop	{r3}
 800e37c:	469e      	mov	lr, r3
 800e37e:	4770      	bx	lr
